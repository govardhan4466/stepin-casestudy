
bin\Debug\CasestudyOfEmbedded.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00002c9a  00002d2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fuse         00000003  00820000  00820000  00002d46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 000001e0  00000000  00000000  00002d49  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002ae  00000000  00000000  00002f29  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002d28  00000000  00000000  000031d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000014b8  00000000  00000000  00005eff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000201c  00000000  00000000  000073b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000270  00000000  00000000  000093d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000489  00000000  00000000  00009644  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000088e  00000000  00000000  00009acd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000a35b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e9       	ldi	r30, 0x9A	; 154
      7c:	fc e2       	ldi	r31, 0x2C	; 44
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a8 31       	cpi	r26, 0x18	; 24
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
      8a:	0e 94 56 0d 	call	0x1aac	; 0x1aac <main>
      8e:	0c 94 4b 16 	jmp	0x2c96	; 0x2c96 <_exit>

00000092 <__bad_interrupt>:
      92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <SEAT_CHECKING>:

/**
 * @brief Seating Checking and connfiguring the seat, heater and LED
 *
 */
void SEAT_CHECKING(){
      96:	df 93       	push	r29
      98:	cf 93       	push	r28
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
    DDRD|=(1<<PD0); //Setting PDO pin
      9e:	aa e2       	ldi	r26, 0x2A	; 42
      a0:	b0 e0       	ldi	r27, 0x00	; 0
      a2:	ea e2       	ldi	r30, 0x2A	; 42
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	81 60       	ori	r24, 0x01	; 1
      aa:	8c 93       	st	X, r24
    DDRD&=~(1<<PD1); //clearing PD1 pin
      ac:	aa e2       	ldi	r26, 0x2A	; 42
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	ea e2       	ldi	r30, 0x2A	; 42
      b2:	f0 e0       	ldi	r31, 0x00	; 0
      b4:	80 81       	ld	r24, Z
      b6:	8d 7f       	andi	r24, 0xFD	; 253
      b8:	8c 93       	st	X, r24
    PORTD|=(1<<PD1); //Setting PD1 pin
      ba:	ab e2       	ldi	r26, 0x2B	; 43
      bc:	b0 e0       	ldi	r27, 0x00	; 0
      be:	eb e2       	ldi	r30, 0x2B	; 43
      c0:	f0 e0       	ldi	r31, 0x00	; 0
      c2:	80 81       	ld	r24, Z
      c4:	82 60       	ori	r24, 0x02	; 2
      c6:	8c 93       	st	X, r24
    DDRD&=~(1<<PD2); //clearing PD2 pin
      c8:	aa e2       	ldi	r26, 0x2A	; 42
      ca:	b0 e0       	ldi	r27, 0x00	; 0
      cc:	ea e2       	ldi	r30, 0x2A	; 42
      ce:	f0 e0       	ldi	r31, 0x00	; 0
      d0:	80 81       	ld	r24, Z
      d2:	8b 7f       	andi	r24, 0xFB	; 251
      d4:	8c 93       	st	X, r24
    PORTD|=(1<<PD2); //Setting PD2 pin
      d6:	ab e2       	ldi	r26, 0x2B	; 43
      d8:	b0 e0       	ldi	r27, 0x00	; 0
      da:	eb e2       	ldi	r30, 0x2B	; 43
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	84 60       	ori	r24, 0x04	; 4
      e2:	8c 93       	st	X, r24
}
      e4:	cf 91       	pop	r28
      e6:	df 91       	pop	r29
      e8:	08 95       	ret

000000ea <LCD_CMD>:
 * @brief LCD Command
 *
 * @param command
 */
void LCD_CMD( unsigned char command )
{
      ea:	0f 93       	push	r16
      ec:	1f 93       	push	r17
      ee:	df 93       	push	r29
      f0:	cf 93       	push	r28
      f2:	cd b7       	in	r28, 0x3d	; 61
      f4:	de b7       	in	r29, 0x3e	; 62
      f6:	c7 55       	subi	r28, 0x57	; 87
      f8:	d0 40       	sbci	r29, 0x00	; 0
      fa:	0f b6       	in	r0, 0x3f	; 63
      fc:	f8 94       	cli
      fe:	de bf       	out	0x3e, r29	; 62
     100:	0f be       	out	0x3f, r0	; 63
     102:	cd bf       	out	0x3d, r28	; 61
     104:	fe 01       	movw	r30, r28
     106:	e9 5a       	subi	r30, 0xA9	; 169
     108:	ff 4f       	sbci	r31, 0xFF	; 255
     10a:	80 83       	st	Z, r24
	PORT_B = (PORT_B & 0x0F) | (command & 0xF0); // Taking Upper nibble only
     10c:	a5 e2       	ldi	r26, 0x25	; 37
     10e:	b0 e0       	ldi	r27, 0x00	; 0
     110:	e5 e2       	ldi	r30, 0x25	; 37
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	98 2f       	mov	r25, r24
     118:	9f 70       	andi	r25, 0x0F	; 15
     11a:	fe 01       	movw	r30, r28
     11c:	e9 5a       	subi	r30, 0xA9	; 169
     11e:	ff 4f       	sbci	r31, 0xFF	; 255
     120:	80 81       	ld	r24, Z
     122:	80 7f       	andi	r24, 0xF0	; 240
     124:	89 2b       	or	r24, r25
     126:	8c 93       	st	X, r24
	PORT_B &= ~ (1<<LCD_RS); // Making LCD_RS=0
     128:	a5 e2       	ldi	r26, 0x25	; 37
     12a:	b0 e0       	ldi	r27, 0x00	; 0
     12c:	e5 e2       	ldi	r30, 0x25	; 37
     12e:	f0 e0       	ldi	r31, 0x00	; 0
     130:	80 81       	ld	r24, Z
     132:	8b 7f       	andi	r24, 0xFB	; 251
     134:	8c 93       	st	X, r24
	PORT_B |= (1<<LCD_EN); // Enabling EN=1
     136:	a5 e2       	ldi	r26, 0x25	; 37
     138:	b0 e0       	ldi	r27, 0x00	; 0
     13a:	e5 e2       	ldi	r30, 0x25	; 37
     13c:	f0 e0       	ldi	r31, 0x00	; 0
     13e:	80 81       	ld	r24, Z
     140:	88 60       	ori	r24, 0x08	; 8
     142:	8c 93       	st	X, r24
     144:	fe 01       	movw	r30, r28
     146:	ed 5a       	subi	r30, 0xAD	; 173
     148:	ff 4f       	sbci	r31, 0xFF	; 255
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	a0 ea       	ldi	r26, 0xA0	; 160
     150:	b0 e4       	ldi	r27, 0x40	; 64
     152:	80 83       	st	Z, r24
     154:	91 83       	std	Z+1, r25	; 0x01
     156:	a2 83       	std	Z+2, r26	; 0x02
     158:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     15a:	8e 01       	movw	r16, r28
     15c:	01 5b       	subi	r16, 0xB1	; 177
     15e:	1f 4f       	sbci	r17, 0xFF	; 255
     160:	fe 01       	movw	r30, r28
     162:	ed 5a       	subi	r30, 0xAD	; 173
     164:	ff 4f       	sbci	r31, 0xFF	; 255
     166:	60 81       	ld	r22, Z
     168:	71 81       	ldd	r23, Z+1	; 0x01
     16a:	82 81       	ldd	r24, Z+2	; 0x02
     16c:	93 81       	ldd	r25, Z+3	; 0x03
     16e:	2b ea       	ldi	r18, 0xAB	; 171
     170:	3a ea       	ldi	r19, 0xAA	; 170
     172:	4a ea       	ldi	r20, 0xAA	; 170
     174:	50 e4       	ldi	r21, 0x40	; 64
     176:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
     17a:	dc 01       	movw	r26, r24
     17c:	cb 01       	movw	r24, r22
     17e:	f8 01       	movw	r30, r16
     180:	80 83       	st	Z, r24
     182:	91 83       	std	Z+1, r25	; 0x01
     184:	a2 83       	std	Z+2, r26	; 0x02
     186:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     188:	fe 01       	movw	r30, r28
     18a:	e1 5b       	subi	r30, 0xB1	; 177
     18c:	ff 4f       	sbci	r31, 0xFF	; 255
     18e:	60 81       	ld	r22, Z
     190:	71 81       	ldd	r23, Z+1	; 0x01
     192:	82 81       	ldd	r24, Z+2	; 0x02
     194:	93 81       	ldd	r25, Z+3	; 0x03
     196:	20 e0       	ldi	r18, 0x00	; 0
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	40 e8       	ldi	r20, 0x80	; 128
     19c:	5f e3       	ldi	r21, 0x3F	; 63
     19e:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__ltsf2>
     1a2:	88 23       	and	r24, r24
     1a4:	34 f4       	brge	.+12     	; 0x1b2 <LCD_CMD+0xc8>
		__ticks = 1;
     1a6:	fe 01       	movw	r30, r28
     1a8:	e2 5b       	subi	r30, 0xB2	; 178
     1aa:	ff 4f       	sbci	r31, 0xFF	; 255
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	80 83       	st	Z, r24
     1b0:	e0 c0       	rjmp	.+448    	; 0x372 <LCD_CMD+0x288>
	else if (__tmp > 255)
     1b2:	fe 01       	movw	r30, r28
     1b4:	e1 5b       	subi	r30, 0xB1	; 177
     1b6:	ff 4f       	sbci	r31, 0xFF	; 255
     1b8:	60 81       	ld	r22, Z
     1ba:	71 81       	ldd	r23, Z+1	; 0x01
     1bc:	82 81       	ldd	r24, Z+2	; 0x02
     1be:	93 81       	ldd	r25, Z+3	; 0x03
     1c0:	20 e0       	ldi	r18, 0x00	; 0
     1c2:	30 e0       	ldi	r19, 0x00	; 0
     1c4:	4f e7       	ldi	r20, 0x7F	; 127
     1c6:	53 e4       	ldi	r21, 0x43	; 67
     1c8:	0e 94 8a 13 	call	0x2714	; 0x2714 <__gtsf2>
     1cc:	18 16       	cp	r1, r24
     1ce:	0c f0       	brlt	.+2      	; 0x1d2 <LCD_CMD+0xe8>
     1d0:	c0 c0       	rjmp	.+384    	; 0x352 <LCD_CMD+0x268>
	{
		_delay_ms(__us / 1000.0);
     1d2:	fe 01       	movw	r30, r28
     1d4:	ed 5a       	subi	r30, 0xAD	; 173
     1d6:	ff 4f       	sbci	r31, 0xFF	; 255
     1d8:	60 81       	ld	r22, Z
     1da:	71 81       	ldd	r23, Z+1	; 0x01
     1dc:	82 81       	ldd	r24, Z+2	; 0x02
     1de:	93 81       	ldd	r25, Z+3	; 0x03
     1e0:	20 e0       	ldi	r18, 0x00	; 0
     1e2:	30 e0       	ldi	r19, 0x00	; 0
     1e4:	4a e7       	ldi	r20, 0x7A	; 122
     1e6:	54 e4       	ldi	r21, 0x44	; 68
     1e8:	0e 94 de 12 	call	0x25bc	; 0x25bc <__divsf3>
     1ec:	dc 01       	movw	r26, r24
     1ee:	cb 01       	movw	r24, r22
     1f0:	fe 01       	movw	r30, r28
     1f2:	e6 5b       	subi	r30, 0xB6	; 182
     1f4:	ff 4f       	sbci	r31, 0xFF	; 255
     1f6:	80 83       	st	Z, r24
     1f8:	91 83       	std	Z+1, r25	; 0x01
     1fa:	a2 83       	std	Z+2, r26	; 0x02
     1fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     1fe:	8e 01       	movw	r16, r28
     200:	0a 5b       	subi	r16, 0xBA	; 186
     202:	1f 4f       	sbci	r17, 0xFF	; 255
     204:	fe 01       	movw	r30, r28
     206:	e6 5b       	subi	r30, 0xB6	; 182
     208:	ff 4f       	sbci	r31, 0xFF	; 255
     20a:	60 81       	ld	r22, Z
     20c:	71 81       	ldd	r23, Z+1	; 0x01
     20e:	82 81       	ldd	r24, Z+2	; 0x02
     210:	93 81       	ldd	r25, Z+3	; 0x03
     212:	20 e0       	ldi	r18, 0x00	; 0
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	4a e7       	ldi	r20, 0x7A	; 122
     218:	55 e4       	ldi	r21, 0x45	; 69
     21a:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
     21e:	dc 01       	movw	r26, r24
     220:	cb 01       	movw	r24, r22
     222:	f8 01       	movw	r30, r16
     224:	80 83       	st	Z, r24
     226:	91 83       	std	Z+1, r25	; 0x01
     228:	a2 83       	std	Z+2, r26	; 0x02
     22a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     22c:	fe 01       	movw	r30, r28
     22e:	ea 5b       	subi	r30, 0xBA	; 186
     230:	ff 4f       	sbci	r31, 0xFF	; 255
     232:	60 81       	ld	r22, Z
     234:	71 81       	ldd	r23, Z+1	; 0x01
     236:	82 81       	ldd	r24, Z+2	; 0x02
     238:	93 81       	ldd	r25, Z+3	; 0x03
     23a:	20 e0       	ldi	r18, 0x00	; 0
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	40 e8       	ldi	r20, 0x80	; 128
     240:	5f e3       	ldi	r21, 0x3F	; 63
     242:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__ltsf2>
     246:	88 23       	and	r24, r24
     248:	44 f4       	brge	.+16     	; 0x25a <LCD_CMD+0x170>
		__ticks = 1;
     24a:	fe 01       	movw	r30, r28
     24c:	ec 5b       	subi	r30, 0xBC	; 188
     24e:	ff 4f       	sbci	r31, 0xFF	; 255
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	91 83       	std	Z+1, r25	; 0x01
     256:	80 83       	st	Z, r24
     258:	64 c0       	rjmp	.+200    	; 0x322 <LCD_CMD+0x238>
	else if (__tmp > 65535)
     25a:	fe 01       	movw	r30, r28
     25c:	ea 5b       	subi	r30, 0xBA	; 186
     25e:	ff 4f       	sbci	r31, 0xFF	; 255
     260:	60 81       	ld	r22, Z
     262:	71 81       	ldd	r23, Z+1	; 0x01
     264:	82 81       	ldd	r24, Z+2	; 0x02
     266:	93 81       	ldd	r25, Z+3	; 0x03
     268:	20 e0       	ldi	r18, 0x00	; 0
     26a:	3f ef       	ldi	r19, 0xFF	; 255
     26c:	4f e7       	ldi	r20, 0x7F	; 127
     26e:	57 e4       	ldi	r21, 0x47	; 71
     270:	0e 94 8a 13 	call	0x2714	; 0x2714 <__gtsf2>
     274:	18 16       	cp	r1, r24
     276:	0c f0       	brlt	.+2      	; 0x27a <LCD_CMD+0x190>
     278:	43 c0       	rjmp	.+134    	; 0x300 <LCD_CMD+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     27a:	fe 01       	movw	r30, r28
     27c:	e6 5b       	subi	r30, 0xB6	; 182
     27e:	ff 4f       	sbci	r31, 0xFF	; 255
     280:	60 81       	ld	r22, Z
     282:	71 81       	ldd	r23, Z+1	; 0x01
     284:	82 81       	ldd	r24, Z+2	; 0x02
     286:	93 81       	ldd	r25, Z+3	; 0x03
     288:	20 e0       	ldi	r18, 0x00	; 0
     28a:	30 e0       	ldi	r19, 0x00	; 0
     28c:	40 e2       	ldi	r20, 0x20	; 32
     28e:	51 e4       	ldi	r21, 0x41	; 65
     290:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
     294:	dc 01       	movw	r26, r24
     296:	cb 01       	movw	r24, r22
     298:	8e 01       	movw	r16, r28
     29a:	0c 5b       	subi	r16, 0xBC	; 188
     29c:	1f 4f       	sbci	r17, 0xFF	; 255
     29e:	bc 01       	movw	r22, r24
     2a0:	cd 01       	movw	r24, r26
     2a2:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
     2a6:	dc 01       	movw	r26, r24
     2a8:	cb 01       	movw	r24, r22
     2aa:	f8 01       	movw	r30, r16
     2ac:	91 83       	std	Z+1, r25	; 0x01
     2ae:	80 83       	st	Z, r24
     2b0:	1f c0       	rjmp	.+62     	; 0x2f0 <LCD_CMD+0x206>
     2b2:	fe 01       	movw	r30, r28
     2b4:	ee 5b       	subi	r30, 0xBE	; 190
     2b6:	ff 4f       	sbci	r31, 0xFF	; 255
     2b8:	80 e9       	ldi	r24, 0x90	; 144
     2ba:	91 e0       	ldi	r25, 0x01	; 1
     2bc:	91 83       	std	Z+1, r25	; 0x01
     2be:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2c0:	fe 01       	movw	r30, r28
     2c2:	ee 5b       	subi	r30, 0xBE	; 190
     2c4:	ff 4f       	sbci	r31, 0xFF	; 255
     2c6:	80 81       	ld	r24, Z
     2c8:	91 81       	ldd	r25, Z+1	; 0x01
     2ca:	01 97       	sbiw	r24, 0x01	; 1
     2cc:	f1 f7       	brne	.-4      	; 0x2ca <LCD_CMD+0x1e0>
     2ce:	fe 01       	movw	r30, r28
     2d0:	ee 5b       	subi	r30, 0xBE	; 190
     2d2:	ff 4f       	sbci	r31, 0xFF	; 255
     2d4:	91 83       	std	Z+1, r25	; 0x01
     2d6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2d8:	de 01       	movw	r26, r28
     2da:	ac 5b       	subi	r26, 0xBC	; 188
     2dc:	bf 4f       	sbci	r27, 0xFF	; 255
     2de:	fe 01       	movw	r30, r28
     2e0:	ec 5b       	subi	r30, 0xBC	; 188
     2e2:	ff 4f       	sbci	r31, 0xFF	; 255
     2e4:	80 81       	ld	r24, Z
     2e6:	91 81       	ldd	r25, Z+1	; 0x01
     2e8:	01 97       	sbiw	r24, 0x01	; 1
     2ea:	11 96       	adiw	r26, 0x01	; 1
     2ec:	9c 93       	st	X, r25
     2ee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2f0:	fe 01       	movw	r30, r28
     2f2:	ec 5b       	subi	r30, 0xBC	; 188
     2f4:	ff 4f       	sbci	r31, 0xFF	; 255
     2f6:	80 81       	ld	r24, Z
     2f8:	91 81       	ldd	r25, Z+1	; 0x01
     2fa:	00 97       	sbiw	r24, 0x00	; 0
     2fc:	d1 f6       	brne	.-76     	; 0x2b2 <LCD_CMD+0x1c8>
     2fe:	42 c0       	rjmp	.+132    	; 0x384 <LCD_CMD+0x29a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     300:	8e 01       	movw	r16, r28
     302:	0c 5b       	subi	r16, 0xBC	; 188
     304:	1f 4f       	sbci	r17, 0xFF	; 255
     306:	fe 01       	movw	r30, r28
     308:	ea 5b       	subi	r30, 0xBA	; 186
     30a:	ff 4f       	sbci	r31, 0xFF	; 255
     30c:	60 81       	ld	r22, Z
     30e:	71 81       	ldd	r23, Z+1	; 0x01
     310:	82 81       	ldd	r24, Z+2	; 0x02
     312:	93 81       	ldd	r25, Z+3	; 0x03
     314:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
     318:	dc 01       	movw	r26, r24
     31a:	cb 01       	movw	r24, r22
     31c:	f8 01       	movw	r30, r16
     31e:	91 83       	std	Z+1, r25	; 0x01
     320:	80 83       	st	Z, r24
     322:	de 01       	movw	r26, r28
     324:	a0 5c       	subi	r26, 0xC0	; 192
     326:	bf 4f       	sbci	r27, 0xFF	; 255
     328:	fe 01       	movw	r30, r28
     32a:	ec 5b       	subi	r30, 0xBC	; 188
     32c:	ff 4f       	sbci	r31, 0xFF	; 255
     32e:	80 81       	ld	r24, Z
     330:	91 81       	ldd	r25, Z+1	; 0x01
     332:	11 96       	adiw	r26, 0x01	; 1
     334:	9c 93       	st	X, r25
     336:	8e 93       	st	-X, r24
     338:	fe 01       	movw	r30, r28
     33a:	e0 5c       	subi	r30, 0xC0	; 192
     33c:	ff 4f       	sbci	r31, 0xFF	; 255
     33e:	80 81       	ld	r24, Z
     340:	91 81       	ldd	r25, Z+1	; 0x01
     342:	01 97       	sbiw	r24, 0x01	; 1
     344:	f1 f7       	brne	.-4      	; 0x342 <LCD_CMD+0x258>
     346:	fe 01       	movw	r30, r28
     348:	e0 5c       	subi	r30, 0xC0	; 192
     34a:	ff 4f       	sbci	r31, 0xFF	; 255
     34c:	91 83       	std	Z+1, r25	; 0x01
     34e:	80 83       	st	Z, r24
     350:	19 c0       	rjmp	.+50     	; 0x384 <LCD_CMD+0x29a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     352:	8e 01       	movw	r16, r28
     354:	02 5b       	subi	r16, 0xB2	; 178
     356:	1f 4f       	sbci	r17, 0xFF	; 255
     358:	fe 01       	movw	r30, r28
     35a:	e1 5b       	subi	r30, 0xB1	; 177
     35c:	ff 4f       	sbci	r31, 0xFF	; 255
     35e:	60 81       	ld	r22, Z
     360:	71 81       	ldd	r23, Z+1	; 0x01
     362:	82 81       	ldd	r24, Z+2	; 0x02
     364:	93 81       	ldd	r25, Z+3	; 0x03
     366:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
     36a:	dc 01       	movw	r26, r24
     36c:	cb 01       	movw	r24, r22
     36e:	f8 01       	movw	r30, r16
     370:	80 83       	st	Z, r24
     372:	fe 01       	movw	r30, r28
     374:	e2 5b       	subi	r30, 0xB2	; 178
     376:	ff 4f       	sbci	r31, 0xFF	; 255
     378:	80 81       	ld	r24, Z
     37a:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     37c:	8f ad       	ldd	r24, Y+63	; 0x3f
     37e:	8a 95       	dec	r24
     380:	f1 f7       	brne	.-4      	; 0x37e <LCD_CMD+0x294>
     382:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(5);
	PORT_B &= ~ (1<<LCD_EN);
     384:	a5 e2       	ldi	r26, 0x25	; 37
     386:	b0 e0       	ldi	r27, 0x00	; 0
     388:	e5 e2       	ldi	r30, 0x25	; 37
     38a:	f0 e0       	ldi	r31, 0x00	; 0
     38c:	80 81       	ld	r24, Z
     38e:	87 7f       	andi	r24, 0xF7	; 247
     390:	8c 93       	st	X, r24
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	aa e7       	ldi	r26, 0x7A	; 122
     398:	b3 e4       	ldi	r27, 0x43	; 67
     39a:	8b af       	std	Y+59, r24	; 0x3b
     39c:	9c af       	std	Y+60, r25	; 0x3c
     39e:	ad af       	std	Y+61, r26	; 0x3d
     3a0:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     3a2:	6b ad       	ldd	r22, Y+59	; 0x3b
     3a4:	7c ad       	ldd	r23, Y+60	; 0x3c
     3a6:	8d ad       	ldd	r24, Y+61	; 0x3d
     3a8:	9e ad       	ldd	r25, Y+62	; 0x3e
     3aa:	2b ea       	ldi	r18, 0xAB	; 171
     3ac:	3a ea       	ldi	r19, 0xAA	; 170
     3ae:	4a ea       	ldi	r20, 0xAA	; 170
     3b0:	50 e4       	ldi	r21, 0x40	; 64
     3b2:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
     3b6:	dc 01       	movw	r26, r24
     3b8:	cb 01       	movw	r24, r22
     3ba:	8f ab       	std	Y+55, r24	; 0x37
     3bc:	98 af       	std	Y+56, r25	; 0x38
     3be:	a9 af       	std	Y+57, r26	; 0x39
     3c0:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
     3c2:	6f a9       	ldd	r22, Y+55	; 0x37
     3c4:	78 ad       	ldd	r23, Y+56	; 0x38
     3c6:	89 ad       	ldd	r24, Y+57	; 0x39
     3c8:	9a ad       	ldd	r25, Y+58	; 0x3a
     3ca:	20 e0       	ldi	r18, 0x00	; 0
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	40 e8       	ldi	r20, 0x80	; 128
     3d0:	5f e3       	ldi	r21, 0x3F	; 63
     3d2:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__ltsf2>
     3d6:	88 23       	and	r24, r24
     3d8:	1c f4       	brge	.+6      	; 0x3e0 <LCD_CMD+0x2f6>
		__ticks = 1;
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	8e ab       	std	Y+54, r24	; 0x36
     3de:	91 c0       	rjmp	.+290    	; 0x502 <LCD_CMD+0x418>
	else if (__tmp > 255)
     3e0:	6f a9       	ldd	r22, Y+55	; 0x37
     3e2:	78 ad       	ldd	r23, Y+56	; 0x38
     3e4:	89 ad       	ldd	r24, Y+57	; 0x39
     3e6:	9a ad       	ldd	r25, Y+58	; 0x3a
     3e8:	20 e0       	ldi	r18, 0x00	; 0
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	4f e7       	ldi	r20, 0x7F	; 127
     3ee:	53 e4       	ldi	r21, 0x43	; 67
     3f0:	0e 94 8a 13 	call	0x2714	; 0x2714 <__gtsf2>
     3f4:	18 16       	cp	r1, r24
     3f6:	0c f0       	brlt	.+2      	; 0x3fa <LCD_CMD+0x310>
     3f8:	7b c0       	rjmp	.+246    	; 0x4f0 <LCD_CMD+0x406>
	{
		_delay_ms(__us / 1000.0);
     3fa:	6b ad       	ldd	r22, Y+59	; 0x3b
     3fc:	7c ad       	ldd	r23, Y+60	; 0x3c
     3fe:	8d ad       	ldd	r24, Y+61	; 0x3d
     400:	9e ad       	ldd	r25, Y+62	; 0x3e
     402:	20 e0       	ldi	r18, 0x00	; 0
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	4a e7       	ldi	r20, 0x7A	; 122
     408:	54 e4       	ldi	r21, 0x44	; 68
     40a:	0e 94 de 12 	call	0x25bc	; 0x25bc <__divsf3>
     40e:	dc 01       	movw	r26, r24
     410:	cb 01       	movw	r24, r22
     412:	8a ab       	std	Y+50, r24	; 0x32
     414:	9b ab       	std	Y+51, r25	; 0x33
     416:	ac ab       	std	Y+52, r26	; 0x34
     418:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     41a:	6a a9       	ldd	r22, Y+50	; 0x32
     41c:	7b a9       	ldd	r23, Y+51	; 0x33
     41e:	8c a9       	ldd	r24, Y+52	; 0x34
     420:	9d a9       	ldd	r25, Y+53	; 0x35
     422:	20 e0       	ldi	r18, 0x00	; 0
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	4a e7       	ldi	r20, 0x7A	; 122
     428:	55 e4       	ldi	r21, 0x45	; 69
     42a:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
     42e:	dc 01       	movw	r26, r24
     430:	cb 01       	movw	r24, r22
     432:	8e a7       	std	Y+46, r24	; 0x2e
     434:	9f a7       	std	Y+47, r25	; 0x2f
     436:	a8 ab       	std	Y+48, r26	; 0x30
     438:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
     43a:	6e a5       	ldd	r22, Y+46	; 0x2e
     43c:	7f a5       	ldd	r23, Y+47	; 0x2f
     43e:	88 a9       	ldd	r24, Y+48	; 0x30
     440:	99 a9       	ldd	r25, Y+49	; 0x31
     442:	20 e0       	ldi	r18, 0x00	; 0
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	40 e8       	ldi	r20, 0x80	; 128
     448:	5f e3       	ldi	r21, 0x3F	; 63
     44a:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__ltsf2>
     44e:	88 23       	and	r24, r24
     450:	2c f4       	brge	.+10     	; 0x45c <LCD_CMD+0x372>
		__ticks = 1;
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	9d a7       	std	Y+45, r25	; 0x2d
     458:	8c a7       	std	Y+44, r24	; 0x2c
     45a:	3f c0       	rjmp	.+126    	; 0x4da <LCD_CMD+0x3f0>
	else if (__tmp > 65535)
     45c:	6e a5       	ldd	r22, Y+46	; 0x2e
     45e:	7f a5       	ldd	r23, Y+47	; 0x2f
     460:	88 a9       	ldd	r24, Y+48	; 0x30
     462:	99 a9       	ldd	r25, Y+49	; 0x31
     464:	20 e0       	ldi	r18, 0x00	; 0
     466:	3f ef       	ldi	r19, 0xFF	; 255
     468:	4f e7       	ldi	r20, 0x7F	; 127
     46a:	57 e4       	ldi	r21, 0x47	; 71
     46c:	0e 94 8a 13 	call	0x2714	; 0x2714 <__gtsf2>
     470:	18 16       	cp	r1, r24
     472:	4c f5       	brge	.+82     	; 0x4c6 <LCD_CMD+0x3dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     474:	6a a9       	ldd	r22, Y+50	; 0x32
     476:	7b a9       	ldd	r23, Y+51	; 0x33
     478:	8c a9       	ldd	r24, Y+52	; 0x34
     47a:	9d a9       	ldd	r25, Y+53	; 0x35
     47c:	20 e0       	ldi	r18, 0x00	; 0
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	40 e2       	ldi	r20, 0x20	; 32
     482:	51 e4       	ldi	r21, 0x41	; 65
     484:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
     488:	dc 01       	movw	r26, r24
     48a:	cb 01       	movw	r24, r22
     48c:	bc 01       	movw	r22, r24
     48e:	cd 01       	movw	r24, r26
     490:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
     494:	dc 01       	movw	r26, r24
     496:	cb 01       	movw	r24, r22
     498:	9d a7       	std	Y+45, r25	; 0x2d
     49a:	8c a7       	std	Y+44, r24	; 0x2c
     49c:	0f c0       	rjmp	.+30     	; 0x4bc <LCD_CMD+0x3d2>
     49e:	80 e9       	ldi	r24, 0x90	; 144
     4a0:	91 e0       	ldi	r25, 0x01	; 1
     4a2:	9b a7       	std	Y+43, r25	; 0x2b
     4a4:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     4a6:	8a a5       	ldd	r24, Y+42	; 0x2a
     4a8:	9b a5       	ldd	r25, Y+43	; 0x2b
     4aa:	01 97       	sbiw	r24, 0x01	; 1
     4ac:	f1 f7       	brne	.-4      	; 0x4aa <LCD_CMD+0x3c0>
     4ae:	9b a7       	std	Y+43, r25	; 0x2b
     4b0:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4b2:	8c a5       	ldd	r24, Y+44	; 0x2c
     4b4:	9d a5       	ldd	r25, Y+45	; 0x2d
     4b6:	01 97       	sbiw	r24, 0x01	; 1
     4b8:	9d a7       	std	Y+45, r25	; 0x2d
     4ba:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4bc:	8c a5       	ldd	r24, Y+44	; 0x2c
     4be:	9d a5       	ldd	r25, Y+45	; 0x2d
     4c0:	00 97       	sbiw	r24, 0x00	; 0
     4c2:	69 f7       	brne	.-38     	; 0x49e <LCD_CMD+0x3b4>
     4c4:	24 c0       	rjmp	.+72     	; 0x50e <LCD_CMD+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4c6:	6e a5       	ldd	r22, Y+46	; 0x2e
     4c8:	7f a5       	ldd	r23, Y+47	; 0x2f
     4ca:	88 a9       	ldd	r24, Y+48	; 0x30
     4cc:	99 a9       	ldd	r25, Y+49	; 0x31
     4ce:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
     4d2:	dc 01       	movw	r26, r24
     4d4:	cb 01       	movw	r24, r22
     4d6:	9d a7       	std	Y+45, r25	; 0x2d
     4d8:	8c a7       	std	Y+44, r24	; 0x2c
     4da:	8c a5       	ldd	r24, Y+44	; 0x2c
     4dc:	9d a5       	ldd	r25, Y+45	; 0x2d
     4de:	99 a7       	std	Y+41, r25	; 0x29
     4e0:	88 a7       	std	Y+40, r24	; 0x28
     4e2:	88 a5       	ldd	r24, Y+40	; 0x28
     4e4:	99 a5       	ldd	r25, Y+41	; 0x29
     4e6:	01 97       	sbiw	r24, 0x01	; 1
     4e8:	f1 f7       	brne	.-4      	; 0x4e6 <LCD_CMD+0x3fc>
     4ea:	99 a7       	std	Y+41, r25	; 0x29
     4ec:	88 a7       	std	Y+40, r24	; 0x28
     4ee:	0f c0       	rjmp	.+30     	; 0x50e <LCD_CMD+0x424>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     4f0:	6f a9       	ldd	r22, Y+55	; 0x37
     4f2:	78 ad       	ldd	r23, Y+56	; 0x38
     4f4:	89 ad       	ldd	r24, Y+57	; 0x39
     4f6:	9a ad       	ldd	r25, Y+58	; 0x3a
     4f8:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
     4fc:	dc 01       	movw	r26, r24
     4fe:	cb 01       	movw	r24, r22
     500:	8e ab       	std	Y+54, r24	; 0x36
     502:	8e a9       	ldd	r24, Y+54	; 0x36
     504:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     506:	8f a1       	ldd	r24, Y+39	; 0x27
     508:	8a 95       	dec	r24
     50a:	f1 f7       	brne	.-4      	; 0x508 <LCD_CMD+0x41e>
     50c:	8f a3       	std	Y+39, r24	; 0x27

	_delay_us(250);

	PORT_B = (PORT_B & 0x0F) | (command << 4); //Taking Lower nibble only
     50e:	a5 e2       	ldi	r26, 0x25	; 37
     510:	b0 e0       	ldi	r27, 0x00	; 0
     512:	e5 e2       	ldi	r30, 0x25	; 37
     514:	f0 e0       	ldi	r31, 0x00	; 0
     516:	80 81       	ld	r24, Z
     518:	28 2f       	mov	r18, r24
     51a:	2f 70       	andi	r18, 0x0F	; 15
     51c:	fe 01       	movw	r30, r28
     51e:	e9 5a       	subi	r30, 0xA9	; 169
     520:	ff 4f       	sbci	r31, 0xFF	; 255
     522:	80 81       	ld	r24, Z
     524:	88 2f       	mov	r24, r24
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	82 95       	swap	r24
     52a:	92 95       	swap	r25
     52c:	90 7f       	andi	r25, 0xF0	; 240
     52e:	98 27       	eor	r25, r24
     530:	80 7f       	andi	r24, 0xF0	; 240
     532:	98 27       	eor	r25, r24
     534:	82 2b       	or	r24, r18
     536:	8c 93       	st	X, r24
	PORT_B |= (1<<LCD_EN);
     538:	a5 e2       	ldi	r26, 0x25	; 37
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e5 e2       	ldi	r30, 0x25	; 37
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	80 81       	ld	r24, Z
     542:	88 60       	ori	r24, 0x08	; 8
     544:	8c 93       	st	X, r24
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	a0 ea       	ldi	r26, 0xA0	; 160
     54c:	b0 e4       	ldi	r27, 0x40	; 64
     54e:	8b a3       	std	Y+35, r24	; 0x23
     550:	9c a3       	std	Y+36, r25	; 0x24
     552:	ad a3       	std	Y+37, r26	; 0x25
     554:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     556:	6b a1       	ldd	r22, Y+35	; 0x23
     558:	7c a1       	ldd	r23, Y+36	; 0x24
     55a:	8d a1       	ldd	r24, Y+37	; 0x25
     55c:	9e a1       	ldd	r25, Y+38	; 0x26
     55e:	2b ea       	ldi	r18, 0xAB	; 171
     560:	3a ea       	ldi	r19, 0xAA	; 170
     562:	4a ea       	ldi	r20, 0xAA	; 170
     564:	50 e4       	ldi	r21, 0x40	; 64
     566:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
     56a:	dc 01       	movw	r26, r24
     56c:	cb 01       	movw	r24, r22
     56e:	8f 8f       	std	Y+31, r24	; 0x1f
     570:	98 a3       	std	Y+32, r25	; 0x20
     572:	a9 a3       	std	Y+33, r26	; 0x21
     574:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
     576:	6f 8d       	ldd	r22, Y+31	; 0x1f
     578:	78 a1       	ldd	r23, Y+32	; 0x20
     57a:	89 a1       	ldd	r24, Y+33	; 0x21
     57c:	9a a1       	ldd	r25, Y+34	; 0x22
     57e:	20 e0       	ldi	r18, 0x00	; 0
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	40 e8       	ldi	r20, 0x80	; 128
     584:	5f e3       	ldi	r21, 0x3F	; 63
     586:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__ltsf2>
     58a:	88 23       	and	r24, r24
     58c:	1c f4       	brge	.+6      	; 0x594 <LCD_CMD+0x4aa>
		__ticks = 1;
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	8e 8f       	std	Y+30, r24	; 0x1e
     592:	91 c0       	rjmp	.+290    	; 0x6b6 <LCD_CMD+0x5cc>
	else if (__tmp > 255)
     594:	6f 8d       	ldd	r22, Y+31	; 0x1f
     596:	78 a1       	ldd	r23, Y+32	; 0x20
     598:	89 a1       	ldd	r24, Y+33	; 0x21
     59a:	9a a1       	ldd	r25, Y+34	; 0x22
     59c:	20 e0       	ldi	r18, 0x00	; 0
     59e:	30 e0       	ldi	r19, 0x00	; 0
     5a0:	4f e7       	ldi	r20, 0x7F	; 127
     5a2:	53 e4       	ldi	r21, 0x43	; 67
     5a4:	0e 94 8a 13 	call	0x2714	; 0x2714 <__gtsf2>
     5a8:	18 16       	cp	r1, r24
     5aa:	0c f0       	brlt	.+2      	; 0x5ae <LCD_CMD+0x4c4>
     5ac:	7b c0       	rjmp	.+246    	; 0x6a4 <LCD_CMD+0x5ba>
	{
		_delay_ms(__us / 1000.0);
     5ae:	6b a1       	ldd	r22, Y+35	; 0x23
     5b0:	7c a1       	ldd	r23, Y+36	; 0x24
     5b2:	8d a1       	ldd	r24, Y+37	; 0x25
     5b4:	9e a1       	ldd	r25, Y+38	; 0x26
     5b6:	20 e0       	ldi	r18, 0x00	; 0
     5b8:	30 e0       	ldi	r19, 0x00	; 0
     5ba:	4a e7       	ldi	r20, 0x7A	; 122
     5bc:	54 e4       	ldi	r21, 0x44	; 68
     5be:	0e 94 de 12 	call	0x25bc	; 0x25bc <__divsf3>
     5c2:	dc 01       	movw	r26, r24
     5c4:	cb 01       	movw	r24, r22
     5c6:	8a 8f       	std	Y+26, r24	; 0x1a
     5c8:	9b 8f       	std	Y+27, r25	; 0x1b
     5ca:	ac 8f       	std	Y+28, r26	; 0x1c
     5cc:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5ce:	6a 8d       	ldd	r22, Y+26	; 0x1a
     5d0:	7b 8d       	ldd	r23, Y+27	; 0x1b
     5d2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     5d4:	9d 8d       	ldd	r25, Y+29	; 0x1d
     5d6:	20 e0       	ldi	r18, 0x00	; 0
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	4a e7       	ldi	r20, 0x7A	; 122
     5dc:	55 e4       	ldi	r21, 0x45	; 69
     5de:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
     5e2:	dc 01       	movw	r26, r24
     5e4:	cb 01       	movw	r24, r22
     5e6:	8e 8b       	std	Y+22, r24	; 0x16
     5e8:	9f 8b       	std	Y+23, r25	; 0x17
     5ea:	a8 8f       	std	Y+24, r26	; 0x18
     5ec:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
     5ee:	6e 89       	ldd	r22, Y+22	; 0x16
     5f0:	7f 89       	ldd	r23, Y+23	; 0x17
     5f2:	88 8d       	ldd	r24, Y+24	; 0x18
     5f4:	99 8d       	ldd	r25, Y+25	; 0x19
     5f6:	20 e0       	ldi	r18, 0x00	; 0
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	40 e8       	ldi	r20, 0x80	; 128
     5fc:	5f e3       	ldi	r21, 0x3F	; 63
     5fe:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__ltsf2>
     602:	88 23       	and	r24, r24
     604:	2c f4       	brge	.+10     	; 0x610 <LCD_CMD+0x526>
		__ticks = 1;
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	9d 8b       	std	Y+21, r25	; 0x15
     60c:	8c 8b       	std	Y+20, r24	; 0x14
     60e:	3f c0       	rjmp	.+126    	; 0x68e <LCD_CMD+0x5a4>
	else if (__tmp > 65535)
     610:	6e 89       	ldd	r22, Y+22	; 0x16
     612:	7f 89       	ldd	r23, Y+23	; 0x17
     614:	88 8d       	ldd	r24, Y+24	; 0x18
     616:	99 8d       	ldd	r25, Y+25	; 0x19
     618:	20 e0       	ldi	r18, 0x00	; 0
     61a:	3f ef       	ldi	r19, 0xFF	; 255
     61c:	4f e7       	ldi	r20, 0x7F	; 127
     61e:	57 e4       	ldi	r21, 0x47	; 71
     620:	0e 94 8a 13 	call	0x2714	; 0x2714 <__gtsf2>
     624:	18 16       	cp	r1, r24
     626:	4c f5       	brge	.+82     	; 0x67a <LCD_CMD+0x590>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     628:	6a 8d       	ldd	r22, Y+26	; 0x1a
     62a:	7b 8d       	ldd	r23, Y+27	; 0x1b
     62c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     62e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     630:	20 e0       	ldi	r18, 0x00	; 0
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	40 e2       	ldi	r20, 0x20	; 32
     636:	51 e4       	ldi	r21, 0x41	; 65
     638:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
     63c:	dc 01       	movw	r26, r24
     63e:	cb 01       	movw	r24, r22
     640:	bc 01       	movw	r22, r24
     642:	cd 01       	movw	r24, r26
     644:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
     648:	dc 01       	movw	r26, r24
     64a:	cb 01       	movw	r24, r22
     64c:	9d 8b       	std	Y+21, r25	; 0x15
     64e:	8c 8b       	std	Y+20, r24	; 0x14
     650:	0f c0       	rjmp	.+30     	; 0x670 <LCD_CMD+0x586>
     652:	80 e9       	ldi	r24, 0x90	; 144
     654:	91 e0       	ldi	r25, 0x01	; 1
     656:	9b 8b       	std	Y+19, r25	; 0x13
     658:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     65a:	8a 89       	ldd	r24, Y+18	; 0x12
     65c:	9b 89       	ldd	r25, Y+19	; 0x13
     65e:	01 97       	sbiw	r24, 0x01	; 1
     660:	f1 f7       	brne	.-4      	; 0x65e <LCD_CMD+0x574>
     662:	9b 8b       	std	Y+19, r25	; 0x13
     664:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     666:	8c 89       	ldd	r24, Y+20	; 0x14
     668:	9d 89       	ldd	r25, Y+21	; 0x15
     66a:	01 97       	sbiw	r24, 0x01	; 1
     66c:	9d 8b       	std	Y+21, r25	; 0x15
     66e:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     670:	8c 89       	ldd	r24, Y+20	; 0x14
     672:	9d 89       	ldd	r25, Y+21	; 0x15
     674:	00 97       	sbiw	r24, 0x00	; 0
     676:	69 f7       	brne	.-38     	; 0x652 <LCD_CMD+0x568>
     678:	24 c0       	rjmp	.+72     	; 0x6c2 <LCD_CMD+0x5d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     67a:	6e 89       	ldd	r22, Y+22	; 0x16
     67c:	7f 89       	ldd	r23, Y+23	; 0x17
     67e:	88 8d       	ldd	r24, Y+24	; 0x18
     680:	99 8d       	ldd	r25, Y+25	; 0x19
     682:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
     686:	dc 01       	movw	r26, r24
     688:	cb 01       	movw	r24, r22
     68a:	9d 8b       	std	Y+21, r25	; 0x15
     68c:	8c 8b       	std	Y+20, r24	; 0x14
     68e:	8c 89       	ldd	r24, Y+20	; 0x14
     690:	9d 89       	ldd	r25, Y+21	; 0x15
     692:	99 8b       	std	Y+17, r25	; 0x11
     694:	88 8b       	std	Y+16, r24	; 0x10
     696:	88 89       	ldd	r24, Y+16	; 0x10
     698:	99 89       	ldd	r25, Y+17	; 0x11
     69a:	01 97       	sbiw	r24, 0x01	; 1
     69c:	f1 f7       	brne	.-4      	; 0x69a <LCD_CMD+0x5b0>
     69e:	99 8b       	std	Y+17, r25	; 0x11
     6a0:	88 8b       	std	Y+16, r24	; 0x10
     6a2:	0f c0       	rjmp	.+30     	; 0x6c2 <LCD_CMD+0x5d8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     6a4:	6f 8d       	ldd	r22, Y+31	; 0x1f
     6a6:	78 a1       	ldd	r23, Y+32	; 0x20
     6a8:	89 a1       	ldd	r24, Y+33	; 0x21
     6aa:	9a a1       	ldd	r25, Y+34	; 0x22
     6ac:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
     6b0:	dc 01       	movw	r26, r24
     6b2:	cb 01       	movw	r24, r22
     6b4:	8e 8f       	std	Y+30, r24	; 0x1e
     6b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     6b8:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     6ba:	8f 85       	ldd	r24, Y+15	; 0x0f
     6bc:	8a 95       	dec	r24
     6be:	f1 f7       	brne	.-4      	; 0x6bc <LCD_CMD+0x5d2>
     6c0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(5);
	PORT_B &= ~ (1<<LCD_EN);
     6c2:	a5 e2       	ldi	r26, 0x25	; 37
     6c4:	b0 e0       	ldi	r27, 0x00	; 0
     6c6:	e5 e2       	ldi	r30, 0x25	; 37
     6c8:	f0 e0       	ldi	r31, 0x00	; 0
     6ca:	80 81       	ld	r24, Z
     6cc:	87 7f       	andi	r24, 0xF7	; 247
     6ce:	8c 93       	st	X, r24
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	a8 e4       	ldi	r26, 0x48	; 72
     6d6:	b2 e4       	ldi	r27, 0x42	; 66
     6d8:	8b 87       	std	Y+11, r24	; 0x0b
     6da:	9c 87       	std	Y+12, r25	; 0x0c
     6dc:	ad 87       	std	Y+13, r26	; 0x0d
     6de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     6e0:	6b 85       	ldd	r22, Y+11	; 0x0b
     6e2:	7c 85       	ldd	r23, Y+12	; 0x0c
     6e4:	8d 85       	ldd	r24, Y+13	; 0x0d
     6e6:	9e 85       	ldd	r25, Y+14	; 0x0e
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	4a e7       	ldi	r20, 0x7A	; 122
     6ee:	55 e4       	ldi	r21, 0x45	; 69
     6f0:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
     6f4:	dc 01       	movw	r26, r24
     6f6:	cb 01       	movw	r24, r22
     6f8:	8f 83       	std	Y+7, r24	; 0x07
     6fa:	98 87       	std	Y+8, r25	; 0x08
     6fc:	a9 87       	std	Y+9, r26	; 0x09
     6fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     700:	6f 81       	ldd	r22, Y+7	; 0x07
     702:	78 85       	ldd	r23, Y+8	; 0x08
     704:	89 85       	ldd	r24, Y+9	; 0x09
     706:	9a 85       	ldd	r25, Y+10	; 0x0a
     708:	20 e0       	ldi	r18, 0x00	; 0
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	40 e8       	ldi	r20, 0x80	; 128
     70e:	5f e3       	ldi	r21, 0x3F	; 63
     710:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__ltsf2>
     714:	88 23       	and	r24, r24
     716:	2c f4       	brge	.+10     	; 0x722 <LCD_CMD+0x638>
		__ticks = 1;
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	9e 83       	std	Y+6, r25	; 0x06
     71e:	8d 83       	std	Y+5, r24	; 0x05
     720:	3f c0       	rjmp	.+126    	; 0x7a0 <LCD_CMD+0x6b6>
	else if (__tmp > 65535)
     722:	6f 81       	ldd	r22, Y+7	; 0x07
     724:	78 85       	ldd	r23, Y+8	; 0x08
     726:	89 85       	ldd	r24, Y+9	; 0x09
     728:	9a 85       	ldd	r25, Y+10	; 0x0a
     72a:	20 e0       	ldi	r18, 0x00	; 0
     72c:	3f ef       	ldi	r19, 0xFF	; 255
     72e:	4f e7       	ldi	r20, 0x7F	; 127
     730:	57 e4       	ldi	r21, 0x47	; 71
     732:	0e 94 8a 13 	call	0x2714	; 0x2714 <__gtsf2>
     736:	18 16       	cp	r1, r24
     738:	4c f5       	brge	.+82     	; 0x78c <LCD_CMD+0x6a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     73a:	6b 85       	ldd	r22, Y+11	; 0x0b
     73c:	7c 85       	ldd	r23, Y+12	; 0x0c
     73e:	8d 85       	ldd	r24, Y+13	; 0x0d
     740:	9e 85       	ldd	r25, Y+14	; 0x0e
     742:	20 e0       	ldi	r18, 0x00	; 0
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	40 e2       	ldi	r20, 0x20	; 32
     748:	51 e4       	ldi	r21, 0x41	; 65
     74a:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
     74e:	dc 01       	movw	r26, r24
     750:	cb 01       	movw	r24, r22
     752:	bc 01       	movw	r22, r24
     754:	cd 01       	movw	r24, r26
     756:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
     75a:	dc 01       	movw	r26, r24
     75c:	cb 01       	movw	r24, r22
     75e:	9e 83       	std	Y+6, r25	; 0x06
     760:	8d 83       	std	Y+5, r24	; 0x05
     762:	0f c0       	rjmp	.+30     	; 0x782 <LCD_CMD+0x698>
     764:	80 e9       	ldi	r24, 0x90	; 144
     766:	91 e0       	ldi	r25, 0x01	; 1
     768:	9c 83       	std	Y+4, r25	; 0x04
     76a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     76c:	8b 81       	ldd	r24, Y+3	; 0x03
     76e:	9c 81       	ldd	r25, Y+4	; 0x04
     770:	01 97       	sbiw	r24, 0x01	; 1
     772:	f1 f7       	brne	.-4      	; 0x770 <LCD_CMD+0x686>
     774:	9c 83       	std	Y+4, r25	; 0x04
     776:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     778:	8d 81       	ldd	r24, Y+5	; 0x05
     77a:	9e 81       	ldd	r25, Y+6	; 0x06
     77c:	01 97       	sbiw	r24, 0x01	; 1
     77e:	9e 83       	std	Y+6, r25	; 0x06
     780:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     782:	8d 81       	ldd	r24, Y+5	; 0x05
     784:	9e 81       	ldd	r25, Y+6	; 0x06
     786:	00 97       	sbiw	r24, 0x00	; 0
     788:	69 f7       	brne	.-38     	; 0x764 <LCD_CMD+0x67a>
     78a:	14 c0       	rjmp	.+40     	; 0x7b4 <LCD_CMD+0x6ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     78c:	6f 81       	ldd	r22, Y+7	; 0x07
     78e:	78 85       	ldd	r23, Y+8	; 0x08
     790:	89 85       	ldd	r24, Y+9	; 0x09
     792:	9a 85       	ldd	r25, Y+10	; 0x0a
     794:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
     798:	dc 01       	movw	r26, r24
     79a:	cb 01       	movw	r24, r22
     79c:	9e 83       	std	Y+6, r25	; 0x06
     79e:	8d 83       	std	Y+5, r24	; 0x05
     7a0:	8d 81       	ldd	r24, Y+5	; 0x05
     7a2:	9e 81       	ldd	r25, Y+6	; 0x06
     7a4:	9a 83       	std	Y+2, r25	; 0x02
     7a6:	89 83       	std	Y+1, r24	; 0x01
     7a8:	89 81       	ldd	r24, Y+1	; 0x01
     7aa:	9a 81       	ldd	r25, Y+2	; 0x02
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	f1 f7       	brne	.-4      	; 0x7ac <LCD_CMD+0x6c2>
     7b0:	9a 83       	std	Y+2, r25	; 0x02
     7b2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
}
     7b4:	c9 5a       	subi	r28, 0xA9	; 169
     7b6:	df 4f       	sbci	r29, 0xFF	; 255
     7b8:	0f b6       	in	r0, 0x3f	; 63
     7ba:	f8 94       	cli
     7bc:	de bf       	out	0x3e, r29	; 62
     7be:	0f be       	out	0x3f, r0	; 63
     7c0:	cd bf       	out	0x3d, r28	; 61
     7c2:	cf 91       	pop	r28
     7c4:	df 91       	pop	r29
     7c6:	1f 91       	pop	r17
     7c8:	0f 91       	pop	r16
     7ca:	08 95       	ret

000007cc <LCD_CHAR_WISE>:
 * @brief LCD Character wise diplaying
 *
 * @param ch
 */
void LCD_CHAR_WISE( unsigned char ch )
{
     7cc:	0f 93       	push	r16
     7ce:	1f 93       	push	r17
     7d0:	df 93       	push	r29
     7d2:	cf 93       	push	r28
     7d4:	cd b7       	in	r28, 0x3d	; 61
     7d6:	de b7       	in	r29, 0x3e	; 62
     7d8:	c7 55       	subi	r28, 0x57	; 87
     7da:	d0 40       	sbci	r29, 0x00	; 0
     7dc:	0f b6       	in	r0, 0x3f	; 63
     7de:	f8 94       	cli
     7e0:	de bf       	out	0x3e, r29	; 62
     7e2:	0f be       	out	0x3f, r0	; 63
     7e4:	cd bf       	out	0x3d, r28	; 61
     7e6:	fe 01       	movw	r30, r28
     7e8:	e9 5a       	subi	r30, 0xA9	; 169
     7ea:	ff 4f       	sbci	r31, 0xFF	; 255
     7ec:	80 83       	st	Z, r24
	PORT_B = (PORT_B & 0x0F) | (ch & 0xF0); /* sending upper nibble */
     7ee:	a5 e2       	ldi	r26, 0x25	; 37
     7f0:	b0 e0       	ldi	r27, 0x00	; 0
     7f2:	e5 e2       	ldi	r30, 0x25	; 37
     7f4:	f0 e0       	ldi	r31, 0x00	; 0
     7f6:	80 81       	ld	r24, Z
     7f8:	98 2f       	mov	r25, r24
     7fa:	9f 70       	andi	r25, 0x0F	; 15
     7fc:	fe 01       	movw	r30, r28
     7fe:	e9 5a       	subi	r30, 0xA9	; 169
     800:	ff 4f       	sbci	r31, 0xFF	; 255
     802:	80 81       	ld	r24, Z
     804:	80 7f       	andi	r24, 0xF0	; 240
     806:	89 2b       	or	r24, r25
     808:	8c 93       	st	X, r24
	PORT_B |= (1<<LCD_RS);		/* LCD_RS=1, ch reg. */
     80a:	a5 e2       	ldi	r26, 0x25	; 37
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e5 e2       	ldi	r30, 0x25	; 37
     810:	f0 e0       	ldi	r31, 0x00	; 0
     812:	80 81       	ld	r24, Z
     814:	84 60       	ori	r24, 0x04	; 4
     816:	8c 93       	st	X, r24
	PORT_B|= (1<<LCD_EN);
     818:	a5 e2       	ldi	r26, 0x25	; 37
     81a:	b0 e0       	ldi	r27, 0x00	; 0
     81c:	e5 e2       	ldi	r30, 0x25	; 37
     81e:	f0 e0       	ldi	r31, 0x00	; 0
     820:	80 81       	ld	r24, Z
     822:	88 60       	ori	r24, 0x08	; 8
     824:	8c 93       	st	X, r24
     826:	fe 01       	movw	r30, r28
     828:	ed 5a       	subi	r30, 0xAD	; 173
     82a:	ff 4f       	sbci	r31, 0xFF	; 255
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	a0 ea       	ldi	r26, 0xA0	; 160
     832:	b0 e4       	ldi	r27, 0x40	; 64
     834:	80 83       	st	Z, r24
     836:	91 83       	std	Z+1, r25	; 0x01
     838:	a2 83       	std	Z+2, r26	; 0x02
     83a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     83c:	8e 01       	movw	r16, r28
     83e:	01 5b       	subi	r16, 0xB1	; 177
     840:	1f 4f       	sbci	r17, 0xFF	; 255
     842:	fe 01       	movw	r30, r28
     844:	ed 5a       	subi	r30, 0xAD	; 173
     846:	ff 4f       	sbci	r31, 0xFF	; 255
     848:	60 81       	ld	r22, Z
     84a:	71 81       	ldd	r23, Z+1	; 0x01
     84c:	82 81       	ldd	r24, Z+2	; 0x02
     84e:	93 81       	ldd	r25, Z+3	; 0x03
     850:	2b ea       	ldi	r18, 0xAB	; 171
     852:	3a ea       	ldi	r19, 0xAA	; 170
     854:	4a ea       	ldi	r20, 0xAA	; 170
     856:	50 e4       	ldi	r21, 0x40	; 64
     858:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
     85c:	dc 01       	movw	r26, r24
     85e:	cb 01       	movw	r24, r22
     860:	f8 01       	movw	r30, r16
     862:	80 83       	st	Z, r24
     864:	91 83       	std	Z+1, r25	; 0x01
     866:	a2 83       	std	Z+2, r26	; 0x02
     868:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     86a:	fe 01       	movw	r30, r28
     86c:	e1 5b       	subi	r30, 0xB1	; 177
     86e:	ff 4f       	sbci	r31, 0xFF	; 255
     870:	60 81       	ld	r22, Z
     872:	71 81       	ldd	r23, Z+1	; 0x01
     874:	82 81       	ldd	r24, Z+2	; 0x02
     876:	93 81       	ldd	r25, Z+3	; 0x03
     878:	20 e0       	ldi	r18, 0x00	; 0
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	40 e8       	ldi	r20, 0x80	; 128
     87e:	5f e3       	ldi	r21, 0x3F	; 63
     880:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__ltsf2>
     884:	88 23       	and	r24, r24
     886:	34 f4       	brge	.+12     	; 0x894 <LCD_CHAR_WISE+0xc8>
		__ticks = 1;
     888:	fe 01       	movw	r30, r28
     88a:	e2 5b       	subi	r30, 0xB2	; 178
     88c:	ff 4f       	sbci	r31, 0xFF	; 255
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	80 83       	st	Z, r24
     892:	e0 c0       	rjmp	.+448    	; 0xa54 <__stack+0x155>
	else if (__tmp > 255)
     894:	fe 01       	movw	r30, r28
     896:	e1 5b       	subi	r30, 0xB1	; 177
     898:	ff 4f       	sbci	r31, 0xFF	; 255
     89a:	60 81       	ld	r22, Z
     89c:	71 81       	ldd	r23, Z+1	; 0x01
     89e:	82 81       	ldd	r24, Z+2	; 0x02
     8a0:	93 81       	ldd	r25, Z+3	; 0x03
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	4f e7       	ldi	r20, 0x7F	; 127
     8a8:	53 e4       	ldi	r21, 0x43	; 67
     8aa:	0e 94 8a 13 	call	0x2714	; 0x2714 <__gtsf2>
     8ae:	18 16       	cp	r1, r24
     8b0:	0c f0       	brlt	.+2      	; 0x8b4 <LCD_CHAR_WISE+0xe8>
     8b2:	c0 c0       	rjmp	.+384    	; 0xa34 <__stack+0x135>
	{
		_delay_ms(__us / 1000.0);
     8b4:	fe 01       	movw	r30, r28
     8b6:	ed 5a       	subi	r30, 0xAD	; 173
     8b8:	ff 4f       	sbci	r31, 0xFF	; 255
     8ba:	60 81       	ld	r22, Z
     8bc:	71 81       	ldd	r23, Z+1	; 0x01
     8be:	82 81       	ldd	r24, Z+2	; 0x02
     8c0:	93 81       	ldd	r25, Z+3	; 0x03
     8c2:	20 e0       	ldi	r18, 0x00	; 0
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	4a e7       	ldi	r20, 0x7A	; 122
     8c8:	54 e4       	ldi	r21, 0x44	; 68
     8ca:	0e 94 de 12 	call	0x25bc	; 0x25bc <__divsf3>
     8ce:	dc 01       	movw	r26, r24
     8d0:	cb 01       	movw	r24, r22
     8d2:	fe 01       	movw	r30, r28
     8d4:	e6 5b       	subi	r30, 0xB6	; 182
     8d6:	ff 4f       	sbci	r31, 0xFF	; 255
     8d8:	80 83       	st	Z, r24
     8da:	91 83       	std	Z+1, r25	; 0x01
     8dc:	a2 83       	std	Z+2, r26	; 0x02
     8de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8e0:	8e 01       	movw	r16, r28
     8e2:	0a 5b       	subi	r16, 0xBA	; 186
     8e4:	1f 4f       	sbci	r17, 0xFF	; 255
     8e6:	fe 01       	movw	r30, r28
     8e8:	e6 5b       	subi	r30, 0xB6	; 182
     8ea:	ff 4f       	sbci	r31, 0xFF	; 255
     8ec:	60 81       	ld	r22, Z
     8ee:	71 81       	ldd	r23, Z+1	; 0x01
     8f0:	82 81       	ldd	r24, Z+2	; 0x02
     8f2:	93 81       	ldd	r25, Z+3	; 0x03
     8f4:	20 e0       	ldi	r18, 0x00	; 0
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	4a e7       	ldi	r20, 0x7A	; 122
     8fa:	55 e4       	ldi	r21, 0x45	; 69
     8fc:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
     900:	dc 01       	movw	r26, r24
     902:	cb 01       	movw	r24, r22
     904:	f8 01       	movw	r30, r16
     906:	80 83       	st	Z, r24
     908:	91 83       	std	Z+1, r25	; 0x01
     90a:	a2 83       	std	Z+2, r26	; 0x02
     90c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     90e:	fe 01       	movw	r30, r28
     910:	ea 5b       	subi	r30, 0xBA	; 186
     912:	ff 4f       	sbci	r31, 0xFF	; 255
     914:	60 81       	ld	r22, Z
     916:	71 81       	ldd	r23, Z+1	; 0x01
     918:	82 81       	ldd	r24, Z+2	; 0x02
     91a:	93 81       	ldd	r25, Z+3	; 0x03
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	40 e8       	ldi	r20, 0x80	; 128
     922:	5f e3       	ldi	r21, 0x3F	; 63
     924:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__ltsf2>
     928:	88 23       	and	r24, r24
     92a:	44 f4       	brge	.+16     	; 0x93c <__stack+0x3d>
		__ticks = 1;
     92c:	fe 01       	movw	r30, r28
     92e:	ec 5b       	subi	r30, 0xBC	; 188
     930:	ff 4f       	sbci	r31, 0xFF	; 255
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	91 83       	std	Z+1, r25	; 0x01
     938:	80 83       	st	Z, r24
     93a:	64 c0       	rjmp	.+200    	; 0xa04 <__stack+0x105>
	else if (__tmp > 65535)
     93c:	fe 01       	movw	r30, r28
     93e:	ea 5b       	subi	r30, 0xBA	; 186
     940:	ff 4f       	sbci	r31, 0xFF	; 255
     942:	60 81       	ld	r22, Z
     944:	71 81       	ldd	r23, Z+1	; 0x01
     946:	82 81       	ldd	r24, Z+2	; 0x02
     948:	93 81       	ldd	r25, Z+3	; 0x03
     94a:	20 e0       	ldi	r18, 0x00	; 0
     94c:	3f ef       	ldi	r19, 0xFF	; 255
     94e:	4f e7       	ldi	r20, 0x7F	; 127
     950:	57 e4       	ldi	r21, 0x47	; 71
     952:	0e 94 8a 13 	call	0x2714	; 0x2714 <__gtsf2>
     956:	18 16       	cp	r1, r24
     958:	0c f0       	brlt	.+2      	; 0x95c <__stack+0x5d>
     95a:	43 c0       	rjmp	.+134    	; 0x9e2 <__stack+0xe3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     95c:	fe 01       	movw	r30, r28
     95e:	e6 5b       	subi	r30, 0xB6	; 182
     960:	ff 4f       	sbci	r31, 0xFF	; 255
     962:	60 81       	ld	r22, Z
     964:	71 81       	ldd	r23, Z+1	; 0x01
     966:	82 81       	ldd	r24, Z+2	; 0x02
     968:	93 81       	ldd	r25, Z+3	; 0x03
     96a:	20 e0       	ldi	r18, 0x00	; 0
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	40 e2       	ldi	r20, 0x20	; 32
     970:	51 e4       	ldi	r21, 0x41	; 65
     972:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
     976:	dc 01       	movw	r26, r24
     978:	cb 01       	movw	r24, r22
     97a:	8e 01       	movw	r16, r28
     97c:	0c 5b       	subi	r16, 0xBC	; 188
     97e:	1f 4f       	sbci	r17, 0xFF	; 255
     980:	bc 01       	movw	r22, r24
     982:	cd 01       	movw	r24, r26
     984:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
     988:	dc 01       	movw	r26, r24
     98a:	cb 01       	movw	r24, r22
     98c:	f8 01       	movw	r30, r16
     98e:	91 83       	std	Z+1, r25	; 0x01
     990:	80 83       	st	Z, r24
     992:	1f c0       	rjmp	.+62     	; 0x9d2 <__stack+0xd3>
     994:	fe 01       	movw	r30, r28
     996:	ee 5b       	subi	r30, 0xBE	; 190
     998:	ff 4f       	sbci	r31, 0xFF	; 255
     99a:	80 e9       	ldi	r24, 0x90	; 144
     99c:	91 e0       	ldi	r25, 0x01	; 1
     99e:	91 83       	std	Z+1, r25	; 0x01
     9a0:	80 83       	st	Z, r24
     9a2:	fe 01       	movw	r30, r28
     9a4:	ee 5b       	subi	r30, 0xBE	; 190
     9a6:	ff 4f       	sbci	r31, 0xFF	; 255
     9a8:	80 81       	ld	r24, Z
     9aa:	91 81       	ldd	r25, Z+1	; 0x01
     9ac:	01 97       	sbiw	r24, 0x01	; 1
     9ae:	f1 f7       	brne	.-4      	; 0x9ac <__stack+0xad>
     9b0:	fe 01       	movw	r30, r28
     9b2:	ee 5b       	subi	r30, 0xBE	; 190
     9b4:	ff 4f       	sbci	r31, 0xFF	; 255
     9b6:	91 83       	std	Z+1, r25	; 0x01
     9b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9ba:	de 01       	movw	r26, r28
     9bc:	ac 5b       	subi	r26, 0xBC	; 188
     9be:	bf 4f       	sbci	r27, 0xFF	; 255
     9c0:	fe 01       	movw	r30, r28
     9c2:	ec 5b       	subi	r30, 0xBC	; 188
     9c4:	ff 4f       	sbci	r31, 0xFF	; 255
     9c6:	80 81       	ld	r24, Z
     9c8:	91 81       	ldd	r25, Z+1	; 0x01
     9ca:	01 97       	sbiw	r24, 0x01	; 1
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9d2:	fe 01       	movw	r30, r28
     9d4:	ec 5b       	subi	r30, 0xBC	; 188
     9d6:	ff 4f       	sbci	r31, 0xFF	; 255
     9d8:	80 81       	ld	r24, Z
     9da:	91 81       	ldd	r25, Z+1	; 0x01
     9dc:	00 97       	sbiw	r24, 0x00	; 0
     9de:	d1 f6       	brne	.-76     	; 0x994 <__stack+0x95>
     9e0:	42 c0       	rjmp	.+132    	; 0xa66 <__stack+0x167>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9e2:	8e 01       	movw	r16, r28
     9e4:	0c 5b       	subi	r16, 0xBC	; 188
     9e6:	1f 4f       	sbci	r17, 0xFF	; 255
     9e8:	fe 01       	movw	r30, r28
     9ea:	ea 5b       	subi	r30, 0xBA	; 186
     9ec:	ff 4f       	sbci	r31, 0xFF	; 255
     9ee:	60 81       	ld	r22, Z
     9f0:	71 81       	ldd	r23, Z+1	; 0x01
     9f2:	82 81       	ldd	r24, Z+2	; 0x02
     9f4:	93 81       	ldd	r25, Z+3	; 0x03
     9f6:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
     9fa:	dc 01       	movw	r26, r24
     9fc:	cb 01       	movw	r24, r22
     9fe:	f8 01       	movw	r30, r16
     a00:	91 83       	std	Z+1, r25	; 0x01
     a02:	80 83       	st	Z, r24
     a04:	de 01       	movw	r26, r28
     a06:	a0 5c       	subi	r26, 0xC0	; 192
     a08:	bf 4f       	sbci	r27, 0xFF	; 255
     a0a:	fe 01       	movw	r30, r28
     a0c:	ec 5b       	subi	r30, 0xBC	; 188
     a0e:	ff 4f       	sbci	r31, 0xFF	; 255
     a10:	80 81       	ld	r24, Z
     a12:	91 81       	ldd	r25, Z+1	; 0x01
     a14:	11 96       	adiw	r26, 0x01	; 1
     a16:	9c 93       	st	X, r25
     a18:	8e 93       	st	-X, r24
     a1a:	fe 01       	movw	r30, r28
     a1c:	e0 5c       	subi	r30, 0xC0	; 192
     a1e:	ff 4f       	sbci	r31, 0xFF	; 255
     a20:	80 81       	ld	r24, Z
     a22:	91 81       	ldd	r25, Z+1	; 0x01
     a24:	01 97       	sbiw	r24, 0x01	; 1
     a26:	f1 f7       	brne	.-4      	; 0xa24 <__stack+0x125>
     a28:	fe 01       	movw	r30, r28
     a2a:	e0 5c       	subi	r30, 0xC0	; 192
     a2c:	ff 4f       	sbci	r31, 0xFF	; 255
     a2e:	91 83       	std	Z+1, r25	; 0x01
     a30:	80 83       	st	Z, r24
     a32:	19 c0       	rjmp	.+50     	; 0xa66 <__stack+0x167>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     a34:	8e 01       	movw	r16, r28
     a36:	02 5b       	subi	r16, 0xB2	; 178
     a38:	1f 4f       	sbci	r17, 0xFF	; 255
     a3a:	fe 01       	movw	r30, r28
     a3c:	e1 5b       	subi	r30, 0xB1	; 177
     a3e:	ff 4f       	sbci	r31, 0xFF	; 255
     a40:	60 81       	ld	r22, Z
     a42:	71 81       	ldd	r23, Z+1	; 0x01
     a44:	82 81       	ldd	r24, Z+2	; 0x02
     a46:	93 81       	ldd	r25, Z+3	; 0x03
     a48:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
     a4c:	dc 01       	movw	r26, r24
     a4e:	cb 01       	movw	r24, r22
     a50:	f8 01       	movw	r30, r16
     a52:	80 83       	st	Z, r24
     a54:	fe 01       	movw	r30, r28
     a56:	e2 5b       	subi	r30, 0xB2	; 178
     a58:	ff 4f       	sbci	r31, 0xFF	; 255
     a5a:	80 81       	ld	r24, Z
     a5c:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     a5e:	8f ad       	ldd	r24, Y+63	; 0x3f
     a60:	8a 95       	dec	r24
     a62:	f1 f7       	brne	.-4      	; 0xa60 <__stack+0x161>
     a64:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(5);
	PORT_B &= ~ (1<<LCD_EN);
     a66:	a5 e2       	ldi	r26, 0x25	; 37
     a68:	b0 e0       	ldi	r27, 0x00	; 0
     a6a:	e5 e2       	ldi	r30, 0x25	; 37
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	80 81       	ld	r24, Z
     a70:	87 7f       	andi	r24, 0xF7	; 247
     a72:	8c 93       	st	X, r24
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	aa e7       	ldi	r26, 0x7A	; 122
     a7a:	b3 e4       	ldi	r27, 0x43	; 67
     a7c:	8b af       	std	Y+59, r24	; 0x3b
     a7e:	9c af       	std	Y+60, r25	; 0x3c
     a80:	ad af       	std	Y+61, r26	; 0x3d
     a82:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     a84:	6b ad       	ldd	r22, Y+59	; 0x3b
     a86:	7c ad       	ldd	r23, Y+60	; 0x3c
     a88:	8d ad       	ldd	r24, Y+61	; 0x3d
     a8a:	9e ad       	ldd	r25, Y+62	; 0x3e
     a8c:	2b ea       	ldi	r18, 0xAB	; 171
     a8e:	3a ea       	ldi	r19, 0xAA	; 170
     a90:	4a ea       	ldi	r20, 0xAA	; 170
     a92:	50 e4       	ldi	r21, 0x40	; 64
     a94:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
     a98:	dc 01       	movw	r26, r24
     a9a:	cb 01       	movw	r24, r22
     a9c:	8f ab       	std	Y+55, r24	; 0x37
     a9e:	98 af       	std	Y+56, r25	; 0x38
     aa0:	a9 af       	std	Y+57, r26	; 0x39
     aa2:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
     aa4:	6f a9       	ldd	r22, Y+55	; 0x37
     aa6:	78 ad       	ldd	r23, Y+56	; 0x38
     aa8:	89 ad       	ldd	r24, Y+57	; 0x39
     aaa:	9a ad       	ldd	r25, Y+58	; 0x3a
     aac:	20 e0       	ldi	r18, 0x00	; 0
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	40 e8       	ldi	r20, 0x80	; 128
     ab2:	5f e3       	ldi	r21, 0x3F	; 63
     ab4:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__ltsf2>
     ab8:	88 23       	and	r24, r24
     aba:	1c f4       	brge	.+6      	; 0xac2 <__stack+0x1c3>
		__ticks = 1;
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	8e ab       	std	Y+54, r24	; 0x36
     ac0:	91 c0       	rjmp	.+290    	; 0xbe4 <__stack+0x2e5>
	else if (__tmp > 255)
     ac2:	6f a9       	ldd	r22, Y+55	; 0x37
     ac4:	78 ad       	ldd	r23, Y+56	; 0x38
     ac6:	89 ad       	ldd	r24, Y+57	; 0x39
     ac8:	9a ad       	ldd	r25, Y+58	; 0x3a
     aca:	20 e0       	ldi	r18, 0x00	; 0
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	4f e7       	ldi	r20, 0x7F	; 127
     ad0:	53 e4       	ldi	r21, 0x43	; 67
     ad2:	0e 94 8a 13 	call	0x2714	; 0x2714 <__gtsf2>
     ad6:	18 16       	cp	r1, r24
     ad8:	0c f0       	brlt	.+2      	; 0xadc <__stack+0x1dd>
     ada:	7b c0       	rjmp	.+246    	; 0xbd2 <__stack+0x2d3>
	{
		_delay_ms(__us / 1000.0);
     adc:	6b ad       	ldd	r22, Y+59	; 0x3b
     ade:	7c ad       	ldd	r23, Y+60	; 0x3c
     ae0:	8d ad       	ldd	r24, Y+61	; 0x3d
     ae2:	9e ad       	ldd	r25, Y+62	; 0x3e
     ae4:	20 e0       	ldi	r18, 0x00	; 0
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	4a e7       	ldi	r20, 0x7A	; 122
     aea:	54 e4       	ldi	r21, 0x44	; 68
     aec:	0e 94 de 12 	call	0x25bc	; 0x25bc <__divsf3>
     af0:	dc 01       	movw	r26, r24
     af2:	cb 01       	movw	r24, r22
     af4:	8a ab       	std	Y+50, r24	; 0x32
     af6:	9b ab       	std	Y+51, r25	; 0x33
     af8:	ac ab       	std	Y+52, r26	; 0x34
     afa:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     afc:	6a a9       	ldd	r22, Y+50	; 0x32
     afe:	7b a9       	ldd	r23, Y+51	; 0x33
     b00:	8c a9       	ldd	r24, Y+52	; 0x34
     b02:	9d a9       	ldd	r25, Y+53	; 0x35
     b04:	20 e0       	ldi	r18, 0x00	; 0
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	4a e7       	ldi	r20, 0x7A	; 122
     b0a:	55 e4       	ldi	r21, 0x45	; 69
     b0c:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
     b10:	dc 01       	movw	r26, r24
     b12:	cb 01       	movw	r24, r22
     b14:	8e a7       	std	Y+46, r24	; 0x2e
     b16:	9f a7       	std	Y+47, r25	; 0x2f
     b18:	a8 ab       	std	Y+48, r26	; 0x30
     b1a:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
     b1c:	6e a5       	ldd	r22, Y+46	; 0x2e
     b1e:	7f a5       	ldd	r23, Y+47	; 0x2f
     b20:	88 a9       	ldd	r24, Y+48	; 0x30
     b22:	99 a9       	ldd	r25, Y+49	; 0x31
     b24:	20 e0       	ldi	r18, 0x00	; 0
     b26:	30 e0       	ldi	r19, 0x00	; 0
     b28:	40 e8       	ldi	r20, 0x80	; 128
     b2a:	5f e3       	ldi	r21, 0x3F	; 63
     b2c:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__ltsf2>
     b30:	88 23       	and	r24, r24
     b32:	2c f4       	brge	.+10     	; 0xb3e <__stack+0x23f>
		__ticks = 1;
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	9d a7       	std	Y+45, r25	; 0x2d
     b3a:	8c a7       	std	Y+44, r24	; 0x2c
     b3c:	3f c0       	rjmp	.+126    	; 0xbbc <__stack+0x2bd>
	else if (__tmp > 65535)
     b3e:	6e a5       	ldd	r22, Y+46	; 0x2e
     b40:	7f a5       	ldd	r23, Y+47	; 0x2f
     b42:	88 a9       	ldd	r24, Y+48	; 0x30
     b44:	99 a9       	ldd	r25, Y+49	; 0x31
     b46:	20 e0       	ldi	r18, 0x00	; 0
     b48:	3f ef       	ldi	r19, 0xFF	; 255
     b4a:	4f e7       	ldi	r20, 0x7F	; 127
     b4c:	57 e4       	ldi	r21, 0x47	; 71
     b4e:	0e 94 8a 13 	call	0x2714	; 0x2714 <__gtsf2>
     b52:	18 16       	cp	r1, r24
     b54:	4c f5       	brge	.+82     	; 0xba8 <__stack+0x2a9>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b56:	6a a9       	ldd	r22, Y+50	; 0x32
     b58:	7b a9       	ldd	r23, Y+51	; 0x33
     b5a:	8c a9       	ldd	r24, Y+52	; 0x34
     b5c:	9d a9       	ldd	r25, Y+53	; 0x35
     b5e:	20 e0       	ldi	r18, 0x00	; 0
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	40 e2       	ldi	r20, 0x20	; 32
     b64:	51 e4       	ldi	r21, 0x41	; 65
     b66:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
     b6a:	dc 01       	movw	r26, r24
     b6c:	cb 01       	movw	r24, r22
     b6e:	bc 01       	movw	r22, r24
     b70:	cd 01       	movw	r24, r26
     b72:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
     b76:	dc 01       	movw	r26, r24
     b78:	cb 01       	movw	r24, r22
     b7a:	9d a7       	std	Y+45, r25	; 0x2d
     b7c:	8c a7       	std	Y+44, r24	; 0x2c
     b7e:	0f c0       	rjmp	.+30     	; 0xb9e <__stack+0x29f>
     b80:	80 e9       	ldi	r24, 0x90	; 144
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	9b a7       	std	Y+43, r25	; 0x2b
     b86:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b88:	8a a5       	ldd	r24, Y+42	; 0x2a
     b8a:	9b a5       	ldd	r25, Y+43	; 0x2b
     b8c:	01 97       	sbiw	r24, 0x01	; 1
     b8e:	f1 f7       	brne	.-4      	; 0xb8c <__stack+0x28d>
     b90:	9b a7       	std	Y+43, r25	; 0x2b
     b92:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b94:	8c a5       	ldd	r24, Y+44	; 0x2c
     b96:	9d a5       	ldd	r25, Y+45	; 0x2d
     b98:	01 97       	sbiw	r24, 0x01	; 1
     b9a:	9d a7       	std	Y+45, r25	; 0x2d
     b9c:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b9e:	8c a5       	ldd	r24, Y+44	; 0x2c
     ba0:	9d a5       	ldd	r25, Y+45	; 0x2d
     ba2:	00 97       	sbiw	r24, 0x00	; 0
     ba4:	69 f7       	brne	.-38     	; 0xb80 <__stack+0x281>
     ba6:	24 c0       	rjmp	.+72     	; 0xbf0 <__stack+0x2f1>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ba8:	6e a5       	ldd	r22, Y+46	; 0x2e
     baa:	7f a5       	ldd	r23, Y+47	; 0x2f
     bac:	88 a9       	ldd	r24, Y+48	; 0x30
     bae:	99 a9       	ldd	r25, Y+49	; 0x31
     bb0:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
     bb4:	dc 01       	movw	r26, r24
     bb6:	cb 01       	movw	r24, r22
     bb8:	9d a7       	std	Y+45, r25	; 0x2d
     bba:	8c a7       	std	Y+44, r24	; 0x2c
     bbc:	8c a5       	ldd	r24, Y+44	; 0x2c
     bbe:	9d a5       	ldd	r25, Y+45	; 0x2d
     bc0:	99 a7       	std	Y+41, r25	; 0x29
     bc2:	88 a7       	std	Y+40, r24	; 0x28
     bc4:	88 a5       	ldd	r24, Y+40	; 0x28
     bc6:	99 a5       	ldd	r25, Y+41	; 0x29
     bc8:	01 97       	sbiw	r24, 0x01	; 1
     bca:	f1 f7       	brne	.-4      	; 0xbc8 <__stack+0x2c9>
     bcc:	99 a7       	std	Y+41, r25	; 0x29
     bce:	88 a7       	std	Y+40, r24	; 0x28
     bd0:	0f c0       	rjmp	.+30     	; 0xbf0 <__stack+0x2f1>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     bd2:	6f a9       	ldd	r22, Y+55	; 0x37
     bd4:	78 ad       	ldd	r23, Y+56	; 0x38
     bd6:	89 ad       	ldd	r24, Y+57	; 0x39
     bd8:	9a ad       	ldd	r25, Y+58	; 0x3a
     bda:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
     bde:	dc 01       	movw	r26, r24
     be0:	cb 01       	movw	r24, r22
     be2:	8e ab       	std	Y+54, r24	; 0x36
     be4:	8e a9       	ldd	r24, Y+54	; 0x36
     be6:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     be8:	8f a1       	ldd	r24, Y+39	; 0x27
     bea:	8a 95       	dec	r24
     bec:	f1 f7       	brne	.-4      	; 0xbea <__stack+0x2eb>
     bee:	8f a3       	std	Y+39, r24	; 0x27

	_delay_us(250);

	PORT_B = (PORT_B & 0x0F) | (ch << 4); /* sending lower nibble */
     bf0:	a5 e2       	ldi	r26, 0x25	; 37
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	e5 e2       	ldi	r30, 0x25	; 37
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	28 2f       	mov	r18, r24
     bfc:	2f 70       	andi	r18, 0x0F	; 15
     bfe:	fe 01       	movw	r30, r28
     c00:	e9 5a       	subi	r30, 0xA9	; 169
     c02:	ff 4f       	sbci	r31, 0xFF	; 255
     c04:	80 81       	ld	r24, Z
     c06:	88 2f       	mov	r24, r24
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	82 95       	swap	r24
     c0c:	92 95       	swap	r25
     c0e:	90 7f       	andi	r25, 0xF0	; 240
     c10:	98 27       	eor	r25, r24
     c12:	80 7f       	andi	r24, 0xF0	; 240
     c14:	98 27       	eor	r25, r24
     c16:	82 2b       	or	r24, r18
     c18:	8c 93       	st	X, r24
	PORT_B |= (1<<LCD_EN);
     c1a:	a5 e2       	ldi	r26, 0x25	; 37
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e5 e2       	ldi	r30, 0x25	; 37
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	88 60       	ori	r24, 0x08	; 8
     c26:	8c 93       	st	X, r24
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 ea       	ldi	r26, 0xA0	; 160
     c2e:	b0 e4       	ldi	r27, 0x40	; 64
     c30:	8b a3       	std	Y+35, r24	; 0x23
     c32:	9c a3       	std	Y+36, r25	; 0x24
     c34:	ad a3       	std	Y+37, r26	; 0x25
     c36:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     c38:	6b a1       	ldd	r22, Y+35	; 0x23
     c3a:	7c a1       	ldd	r23, Y+36	; 0x24
     c3c:	8d a1       	ldd	r24, Y+37	; 0x25
     c3e:	9e a1       	ldd	r25, Y+38	; 0x26
     c40:	2b ea       	ldi	r18, 0xAB	; 171
     c42:	3a ea       	ldi	r19, 0xAA	; 170
     c44:	4a ea       	ldi	r20, 0xAA	; 170
     c46:	50 e4       	ldi	r21, 0x40	; 64
     c48:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
     c4c:	dc 01       	movw	r26, r24
     c4e:	cb 01       	movw	r24, r22
     c50:	8f 8f       	std	Y+31, r24	; 0x1f
     c52:	98 a3       	std	Y+32, r25	; 0x20
     c54:	a9 a3       	std	Y+33, r26	; 0x21
     c56:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
     c58:	6f 8d       	ldd	r22, Y+31	; 0x1f
     c5a:	78 a1       	ldd	r23, Y+32	; 0x20
     c5c:	89 a1       	ldd	r24, Y+33	; 0x21
     c5e:	9a a1       	ldd	r25, Y+34	; 0x22
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	40 e8       	ldi	r20, 0x80	; 128
     c66:	5f e3       	ldi	r21, 0x3F	; 63
     c68:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__ltsf2>
     c6c:	88 23       	and	r24, r24
     c6e:	1c f4       	brge	.+6      	; 0xc76 <__stack+0x377>
		__ticks = 1;
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	8e 8f       	std	Y+30, r24	; 0x1e
     c74:	91 c0       	rjmp	.+290    	; 0xd98 <__stack+0x499>
	else if (__tmp > 255)
     c76:	6f 8d       	ldd	r22, Y+31	; 0x1f
     c78:	78 a1       	ldd	r23, Y+32	; 0x20
     c7a:	89 a1       	ldd	r24, Y+33	; 0x21
     c7c:	9a a1       	ldd	r25, Y+34	; 0x22
     c7e:	20 e0       	ldi	r18, 0x00	; 0
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	4f e7       	ldi	r20, 0x7F	; 127
     c84:	53 e4       	ldi	r21, 0x43	; 67
     c86:	0e 94 8a 13 	call	0x2714	; 0x2714 <__gtsf2>
     c8a:	18 16       	cp	r1, r24
     c8c:	0c f0       	brlt	.+2      	; 0xc90 <__stack+0x391>
     c8e:	7b c0       	rjmp	.+246    	; 0xd86 <__stack+0x487>
	{
		_delay_ms(__us / 1000.0);
     c90:	6b a1       	ldd	r22, Y+35	; 0x23
     c92:	7c a1       	ldd	r23, Y+36	; 0x24
     c94:	8d a1       	ldd	r24, Y+37	; 0x25
     c96:	9e a1       	ldd	r25, Y+38	; 0x26
     c98:	20 e0       	ldi	r18, 0x00	; 0
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	4a e7       	ldi	r20, 0x7A	; 122
     c9e:	54 e4       	ldi	r21, 0x44	; 68
     ca0:	0e 94 de 12 	call	0x25bc	; 0x25bc <__divsf3>
     ca4:	dc 01       	movw	r26, r24
     ca6:	cb 01       	movw	r24, r22
     ca8:	8a 8f       	std	Y+26, r24	; 0x1a
     caa:	9b 8f       	std	Y+27, r25	; 0x1b
     cac:	ac 8f       	std	Y+28, r26	; 0x1c
     cae:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cb0:	6a 8d       	ldd	r22, Y+26	; 0x1a
     cb2:	7b 8d       	ldd	r23, Y+27	; 0x1b
     cb4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     cb6:	9d 8d       	ldd	r25, Y+29	; 0x1d
     cb8:	20 e0       	ldi	r18, 0x00	; 0
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	4a e7       	ldi	r20, 0x7A	; 122
     cbe:	55 e4       	ldi	r21, 0x45	; 69
     cc0:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
     cc4:	dc 01       	movw	r26, r24
     cc6:	cb 01       	movw	r24, r22
     cc8:	8e 8b       	std	Y+22, r24	; 0x16
     cca:	9f 8b       	std	Y+23, r25	; 0x17
     ccc:	a8 8f       	std	Y+24, r26	; 0x18
     cce:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
     cd0:	6e 89       	ldd	r22, Y+22	; 0x16
     cd2:	7f 89       	ldd	r23, Y+23	; 0x17
     cd4:	88 8d       	ldd	r24, Y+24	; 0x18
     cd6:	99 8d       	ldd	r25, Y+25	; 0x19
     cd8:	20 e0       	ldi	r18, 0x00	; 0
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	40 e8       	ldi	r20, 0x80	; 128
     cde:	5f e3       	ldi	r21, 0x3F	; 63
     ce0:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__ltsf2>
     ce4:	88 23       	and	r24, r24
     ce6:	2c f4       	brge	.+10     	; 0xcf2 <__stack+0x3f3>
		__ticks = 1;
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	9d 8b       	std	Y+21, r25	; 0x15
     cee:	8c 8b       	std	Y+20, r24	; 0x14
     cf0:	3f c0       	rjmp	.+126    	; 0xd70 <__stack+0x471>
	else if (__tmp > 65535)
     cf2:	6e 89       	ldd	r22, Y+22	; 0x16
     cf4:	7f 89       	ldd	r23, Y+23	; 0x17
     cf6:	88 8d       	ldd	r24, Y+24	; 0x18
     cf8:	99 8d       	ldd	r25, Y+25	; 0x19
     cfa:	20 e0       	ldi	r18, 0x00	; 0
     cfc:	3f ef       	ldi	r19, 0xFF	; 255
     cfe:	4f e7       	ldi	r20, 0x7F	; 127
     d00:	57 e4       	ldi	r21, 0x47	; 71
     d02:	0e 94 8a 13 	call	0x2714	; 0x2714 <__gtsf2>
     d06:	18 16       	cp	r1, r24
     d08:	4c f5       	brge	.+82     	; 0xd5c <__stack+0x45d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d0a:	6a 8d       	ldd	r22, Y+26	; 0x1a
     d0c:	7b 8d       	ldd	r23, Y+27	; 0x1b
     d0e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d10:	9d 8d       	ldd	r25, Y+29	; 0x1d
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	40 e2       	ldi	r20, 0x20	; 32
     d18:	51 e4       	ldi	r21, 0x41	; 65
     d1a:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
     d1e:	dc 01       	movw	r26, r24
     d20:	cb 01       	movw	r24, r22
     d22:	bc 01       	movw	r22, r24
     d24:	cd 01       	movw	r24, r26
     d26:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
     d2a:	dc 01       	movw	r26, r24
     d2c:	cb 01       	movw	r24, r22
     d2e:	9d 8b       	std	Y+21, r25	; 0x15
     d30:	8c 8b       	std	Y+20, r24	; 0x14
     d32:	0f c0       	rjmp	.+30     	; 0xd52 <__stack+0x453>
     d34:	80 e9       	ldi	r24, 0x90	; 144
     d36:	91 e0       	ldi	r25, 0x01	; 1
     d38:	9b 8b       	std	Y+19, r25	; 0x13
     d3a:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d3c:	8a 89       	ldd	r24, Y+18	; 0x12
     d3e:	9b 89       	ldd	r25, Y+19	; 0x13
     d40:	01 97       	sbiw	r24, 0x01	; 1
     d42:	f1 f7       	brne	.-4      	; 0xd40 <__stack+0x441>
     d44:	9b 8b       	std	Y+19, r25	; 0x13
     d46:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d48:	8c 89       	ldd	r24, Y+20	; 0x14
     d4a:	9d 89       	ldd	r25, Y+21	; 0x15
     d4c:	01 97       	sbiw	r24, 0x01	; 1
     d4e:	9d 8b       	std	Y+21, r25	; 0x15
     d50:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d52:	8c 89       	ldd	r24, Y+20	; 0x14
     d54:	9d 89       	ldd	r25, Y+21	; 0x15
     d56:	00 97       	sbiw	r24, 0x00	; 0
     d58:	69 f7       	brne	.-38     	; 0xd34 <__stack+0x435>
     d5a:	24 c0       	rjmp	.+72     	; 0xda4 <__stack+0x4a5>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d5c:	6e 89       	ldd	r22, Y+22	; 0x16
     d5e:	7f 89       	ldd	r23, Y+23	; 0x17
     d60:	88 8d       	ldd	r24, Y+24	; 0x18
     d62:	99 8d       	ldd	r25, Y+25	; 0x19
     d64:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
     d68:	dc 01       	movw	r26, r24
     d6a:	cb 01       	movw	r24, r22
     d6c:	9d 8b       	std	Y+21, r25	; 0x15
     d6e:	8c 8b       	std	Y+20, r24	; 0x14
     d70:	8c 89       	ldd	r24, Y+20	; 0x14
     d72:	9d 89       	ldd	r25, Y+21	; 0x15
     d74:	99 8b       	std	Y+17, r25	; 0x11
     d76:	88 8b       	std	Y+16, r24	; 0x10
     d78:	88 89       	ldd	r24, Y+16	; 0x10
     d7a:	99 89       	ldd	r25, Y+17	; 0x11
     d7c:	01 97       	sbiw	r24, 0x01	; 1
     d7e:	f1 f7       	brne	.-4      	; 0xd7c <__stack+0x47d>
     d80:	99 8b       	std	Y+17, r25	; 0x11
     d82:	88 8b       	std	Y+16, r24	; 0x10
     d84:	0f c0       	rjmp	.+30     	; 0xda4 <__stack+0x4a5>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     d86:	6f 8d       	ldd	r22, Y+31	; 0x1f
     d88:	78 a1       	ldd	r23, Y+32	; 0x20
     d8a:	89 a1       	ldd	r24, Y+33	; 0x21
     d8c:	9a a1       	ldd	r25, Y+34	; 0x22
     d8e:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
     d92:	dc 01       	movw	r26, r24
     d94:	cb 01       	movw	r24, r22
     d96:	8e 8f       	std	Y+30, r24	; 0x1e
     d98:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d9a:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     d9c:	8f 85       	ldd	r24, Y+15	; 0x0f
     d9e:	8a 95       	dec	r24
     da0:	f1 f7       	brne	.-4      	; 0xd9e <__stack+0x49f>
     da2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(5);
	PORT_B &= ~ (1<<LCD_EN);
     da4:	a5 e2       	ldi	r26, 0x25	; 37
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	e5 e2       	ldi	r30, 0x25	; 37
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	87 7f       	andi	r24, 0xF7	; 247
     db0:	8c 93       	st	X, r24
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	a8 e4       	ldi	r26, 0x48	; 72
     db8:	b2 e4       	ldi	r27, 0x42	; 66
     dba:	8b 87       	std	Y+11, r24	; 0x0b
     dbc:	9c 87       	std	Y+12, r25	; 0x0c
     dbe:	ad 87       	std	Y+13, r26	; 0x0d
     dc0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dc2:	6b 85       	ldd	r22, Y+11	; 0x0b
     dc4:	7c 85       	ldd	r23, Y+12	; 0x0c
     dc6:	8d 85       	ldd	r24, Y+13	; 0x0d
     dc8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	4a e7       	ldi	r20, 0x7A	; 122
     dd0:	55 e4       	ldi	r21, 0x45	; 69
     dd2:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
     dd6:	dc 01       	movw	r26, r24
     dd8:	cb 01       	movw	r24, r22
     dda:	8f 83       	std	Y+7, r24	; 0x07
     ddc:	98 87       	std	Y+8, r25	; 0x08
     dde:	a9 87       	std	Y+9, r26	; 0x09
     de0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     de2:	6f 81       	ldd	r22, Y+7	; 0x07
     de4:	78 85       	ldd	r23, Y+8	; 0x08
     de6:	89 85       	ldd	r24, Y+9	; 0x09
     de8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	40 e8       	ldi	r20, 0x80	; 128
     df0:	5f e3       	ldi	r21, 0x3F	; 63
     df2:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__ltsf2>
     df6:	88 23       	and	r24, r24
     df8:	2c f4       	brge	.+10     	; 0xe04 <__stack+0x505>
		__ticks = 1;
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	9e 83       	std	Y+6, r25	; 0x06
     e00:	8d 83       	std	Y+5, r24	; 0x05
     e02:	3f c0       	rjmp	.+126    	; 0xe82 <__stack+0x583>
	else if (__tmp > 65535)
     e04:	6f 81       	ldd	r22, Y+7	; 0x07
     e06:	78 85       	ldd	r23, Y+8	; 0x08
     e08:	89 85       	ldd	r24, Y+9	; 0x09
     e0a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	3f ef       	ldi	r19, 0xFF	; 255
     e10:	4f e7       	ldi	r20, 0x7F	; 127
     e12:	57 e4       	ldi	r21, 0x47	; 71
     e14:	0e 94 8a 13 	call	0x2714	; 0x2714 <__gtsf2>
     e18:	18 16       	cp	r1, r24
     e1a:	4c f5       	brge	.+82     	; 0xe6e <__stack+0x56f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e1c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e1e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e20:	8d 85       	ldd	r24, Y+13	; 0x0d
     e22:	9e 85       	ldd	r25, Y+14	; 0x0e
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	40 e2       	ldi	r20, 0x20	; 32
     e2a:	51 e4       	ldi	r21, 0x41	; 65
     e2c:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
     e30:	dc 01       	movw	r26, r24
     e32:	cb 01       	movw	r24, r22
     e34:	bc 01       	movw	r22, r24
     e36:	cd 01       	movw	r24, r26
     e38:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
     e3c:	dc 01       	movw	r26, r24
     e3e:	cb 01       	movw	r24, r22
     e40:	9e 83       	std	Y+6, r25	; 0x06
     e42:	8d 83       	std	Y+5, r24	; 0x05
     e44:	0f c0       	rjmp	.+30     	; 0xe64 <__stack+0x565>
     e46:	80 e9       	ldi	r24, 0x90	; 144
     e48:	91 e0       	ldi	r25, 0x01	; 1
     e4a:	9c 83       	std	Y+4, r25	; 0x04
     e4c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e4e:	8b 81       	ldd	r24, Y+3	; 0x03
     e50:	9c 81       	ldd	r25, Y+4	; 0x04
     e52:	01 97       	sbiw	r24, 0x01	; 1
     e54:	f1 f7       	brne	.-4      	; 0xe52 <__stack+0x553>
     e56:	9c 83       	std	Y+4, r25	; 0x04
     e58:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e5a:	8d 81       	ldd	r24, Y+5	; 0x05
     e5c:	9e 81       	ldd	r25, Y+6	; 0x06
     e5e:	01 97       	sbiw	r24, 0x01	; 1
     e60:	9e 83       	std	Y+6, r25	; 0x06
     e62:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e64:	8d 81       	ldd	r24, Y+5	; 0x05
     e66:	9e 81       	ldd	r25, Y+6	; 0x06
     e68:	00 97       	sbiw	r24, 0x00	; 0
     e6a:	69 f7       	brne	.-38     	; 0xe46 <__stack+0x547>
     e6c:	14 c0       	rjmp	.+40     	; 0xe96 <__stack+0x597>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e6e:	6f 81       	ldd	r22, Y+7	; 0x07
     e70:	78 85       	ldd	r23, Y+8	; 0x08
     e72:	89 85       	ldd	r24, Y+9	; 0x09
     e74:	9a 85       	ldd	r25, Y+10	; 0x0a
     e76:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
     e7a:	dc 01       	movw	r26, r24
     e7c:	cb 01       	movw	r24, r22
     e7e:	9e 83       	std	Y+6, r25	; 0x06
     e80:	8d 83       	std	Y+5, r24	; 0x05
     e82:	8d 81       	ldd	r24, Y+5	; 0x05
     e84:	9e 81       	ldd	r25, Y+6	; 0x06
     e86:	9a 83       	std	Y+2, r25	; 0x02
     e88:	89 83       	std	Y+1, r24	; 0x01
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	9a 81       	ldd	r25, Y+2	; 0x02
     e8e:	01 97       	sbiw	r24, 0x01	; 1
     e90:	f1 f7       	brne	.-4      	; 0xe8e <__stack+0x58f>
     e92:	9a 83       	std	Y+2, r25	; 0x02
     e94:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
}
     e96:	c9 5a       	subi	r28, 0xA9	; 169
     e98:	df 4f       	sbci	r29, 0xFF	; 255
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	f8 94       	cli
     e9e:	de bf       	out	0x3e, r29	; 62
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	cd bf       	out	0x3d, r28	; 61
     ea4:	cf 91       	pop	r28
     ea6:	df 91       	pop	r29
     ea8:	1f 91       	pop	r17
     eaa:	0f 91       	pop	r16
     eac:	08 95       	ret

00000eae <LCD_INITIALIZATION>:
/**
 * @brief LCD Initialization
 *
 */
void LCD_INITIALIZATION(void)
{
     eae:	df 93       	push	r29
     eb0:	cf 93       	push	r28
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
     eb6:	6c 97       	sbiw	r28, 0x1c	; 28
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	f8 94       	cli
     ebc:	de bf       	out	0x3e, r29	; 62
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	cd bf       	out	0x3d, r28	; 61
	LCD_DIRECTION = 0xFF; // LCD port as output
     ec2:	e4 e2       	ldi	r30, 0x24	; 36
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	8f ef       	ldi	r24, 0xFF	; 255
     ec8:	80 83       	st	Z, r24
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	a8 e4       	ldi	r26, 0x48	; 72
     ed0:	b2 e4       	ldi	r27, 0x42	; 66
     ed2:	89 8f       	std	Y+25, r24	; 0x19
     ed4:	9a 8f       	std	Y+26, r25	; 0x1a
     ed6:	ab 8f       	std	Y+27, r26	; 0x1b
     ed8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eda:	69 8d       	ldd	r22, Y+25	; 0x19
     edc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ede:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ee0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	4a e7       	ldi	r20, 0x7A	; 122
     ee8:	55 e4       	ldi	r21, 0x45	; 69
     eea:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
     eee:	dc 01       	movw	r26, r24
     ef0:	cb 01       	movw	r24, r22
     ef2:	8d 8b       	std	Y+21, r24	; 0x15
     ef4:	9e 8b       	std	Y+22, r25	; 0x16
     ef6:	af 8b       	std	Y+23, r26	; 0x17
     ef8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     efa:	6d 89       	ldd	r22, Y+21	; 0x15
     efc:	7e 89       	ldd	r23, Y+22	; 0x16
     efe:	8f 89       	ldd	r24, Y+23	; 0x17
     f00:	98 8d       	ldd	r25, Y+24	; 0x18
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	40 e8       	ldi	r20, 0x80	; 128
     f08:	5f e3       	ldi	r21, 0x3F	; 63
     f0a:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__ltsf2>
     f0e:	88 23       	and	r24, r24
     f10:	2c f4       	brge	.+10     	; 0xf1c <LCD_INITIALIZATION+0x6e>
		__ticks = 1;
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	9c 8b       	std	Y+20, r25	; 0x14
     f18:	8b 8b       	std	Y+19, r24	; 0x13
     f1a:	3f c0       	rjmp	.+126    	; 0xf9a <LCD_INITIALIZATION+0xec>
	else if (__tmp > 65535)
     f1c:	6d 89       	ldd	r22, Y+21	; 0x15
     f1e:	7e 89       	ldd	r23, Y+22	; 0x16
     f20:	8f 89       	ldd	r24, Y+23	; 0x17
     f22:	98 8d       	ldd	r25, Y+24	; 0x18
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	3f ef       	ldi	r19, 0xFF	; 255
     f28:	4f e7       	ldi	r20, 0x7F	; 127
     f2a:	57 e4       	ldi	r21, 0x47	; 71
     f2c:	0e 94 8a 13 	call	0x2714	; 0x2714 <__gtsf2>
     f30:	18 16       	cp	r1, r24
     f32:	4c f5       	brge	.+82     	; 0xf86 <LCD_INITIALIZATION+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f34:	69 8d       	ldd	r22, Y+25	; 0x19
     f36:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f38:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	40 e2       	ldi	r20, 0x20	; 32
     f42:	51 e4       	ldi	r21, 0x41	; 65
     f44:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
     f48:	dc 01       	movw	r26, r24
     f4a:	cb 01       	movw	r24, r22
     f4c:	bc 01       	movw	r22, r24
     f4e:	cd 01       	movw	r24, r26
     f50:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
     f54:	dc 01       	movw	r26, r24
     f56:	cb 01       	movw	r24, r22
     f58:	9c 8b       	std	Y+20, r25	; 0x14
     f5a:	8b 8b       	std	Y+19, r24	; 0x13
     f5c:	0f c0       	rjmp	.+30     	; 0xf7c <LCD_INITIALIZATION+0xce>
     f5e:	80 e9       	ldi	r24, 0x90	; 144
     f60:	91 e0       	ldi	r25, 0x01	; 1
     f62:	9a 8b       	std	Y+18, r25	; 0x12
     f64:	89 8b       	std	Y+17, r24	; 0x11
     f66:	89 89       	ldd	r24, Y+17	; 0x11
     f68:	9a 89       	ldd	r25, Y+18	; 0x12
     f6a:	01 97       	sbiw	r24, 0x01	; 1
     f6c:	f1 f7       	brne	.-4      	; 0xf6a <LCD_INITIALIZATION+0xbc>
     f6e:	9a 8b       	std	Y+18, r25	; 0x12
     f70:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f72:	8b 89       	ldd	r24, Y+19	; 0x13
     f74:	9c 89       	ldd	r25, Y+20	; 0x14
     f76:	01 97       	sbiw	r24, 0x01	; 1
     f78:	9c 8b       	std	Y+20, r25	; 0x14
     f7a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f7c:	8b 89       	ldd	r24, Y+19	; 0x13
     f7e:	9c 89       	ldd	r25, Y+20	; 0x14
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	69 f7       	brne	.-38     	; 0xf5e <LCD_INITIALIZATION+0xb0>
     f84:	14 c0       	rjmp	.+40     	; 0xfae <LCD_INITIALIZATION+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f86:	6d 89       	ldd	r22, Y+21	; 0x15
     f88:	7e 89       	ldd	r23, Y+22	; 0x16
     f8a:	8f 89       	ldd	r24, Y+23	; 0x17
     f8c:	98 8d       	ldd	r25, Y+24	; 0x18
     f8e:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
     f92:	dc 01       	movw	r26, r24
     f94:	cb 01       	movw	r24, r22
     f96:	9c 8b       	std	Y+20, r25	; 0x14
     f98:	8b 8b       	std	Y+19, r24	; 0x13
     f9a:	8b 89       	ldd	r24, Y+19	; 0x13
     f9c:	9c 89       	ldd	r25, Y+20	; 0x14
     f9e:	98 8b       	std	Y+16, r25	; 0x10
     fa0:	8f 87       	std	Y+15, r24	; 0x0f
     fa2:	8f 85       	ldd	r24, Y+15	; 0x0f
     fa4:	98 89       	ldd	r25, Y+16	; 0x10
     fa6:	01 97       	sbiw	r24, 0x01	; 1
     fa8:	f1 f7       	brne	.-4      	; 0xfa6 <LCD_INITIALIZATION+0xf8>
     faa:	98 8b       	std	Y+16, r25	; 0x10
     fac:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);

	LCD_CMD(0x02);	// 4 bit LCD
     fae:	82 e0       	ldi	r24, 0x02	; 2
     fb0:	0e 94 75 00 	call	0xea	; 0xea <LCD_CMD>
	LCD_CMD(0x28);  // 5x7 Matrix(2 line)
     fb4:	88 e2       	ldi	r24, 0x28	; 40
     fb6:	0e 94 75 00 	call	0xea	; 0xea <LCD_CMD>
	LCD_CMD(0x0c);  // Display On cursor Off
     fba:	8c e0       	ldi	r24, 0x0C	; 12
     fbc:	0e 94 75 00 	call	0xea	; 0xea <LCD_CMD>
	LCD_CMD(0x06);  // Increment cursor
     fc0:	86 e0       	ldi	r24, 0x06	; 6
     fc2:	0e 94 75 00 	call	0xea	; 0xea <LCD_CMD>
	LCD_CMD(0x01);  // LCD Clear
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	0e 94 75 00 	call	0xea	; 0xea <LCD_CMD>
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	a0 ea       	ldi	r26, 0xA0	; 160
     fd2:	b0 e4       	ldi	r27, 0x40	; 64
     fd4:	8b 87       	std	Y+11, r24	; 0x0b
     fd6:	9c 87       	std	Y+12, r25	; 0x0c
     fd8:	ad 87       	std	Y+13, r26	; 0x0d
     fda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fdc:	6b 85       	ldd	r22, Y+11	; 0x0b
     fde:	7c 85       	ldd	r23, Y+12	; 0x0c
     fe0:	8d 85       	ldd	r24, Y+13	; 0x0d
     fe2:	9e 85       	ldd	r25, Y+14	; 0x0e
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	4a e7       	ldi	r20, 0x7A	; 122
     fea:	55 e4       	ldi	r21, 0x45	; 69
     fec:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
     ff0:	dc 01       	movw	r26, r24
     ff2:	cb 01       	movw	r24, r22
     ff4:	8f 83       	std	Y+7, r24	; 0x07
     ff6:	98 87       	std	Y+8, r25	; 0x08
     ff8:	a9 87       	std	Y+9, r26	; 0x09
     ffa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ffc:	6f 81       	ldd	r22, Y+7	; 0x07
     ffe:	78 85       	ldd	r23, Y+8	; 0x08
    1000:	89 85       	ldd	r24, Y+9	; 0x09
    1002:	9a 85       	ldd	r25, Y+10	; 0x0a
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	40 e8       	ldi	r20, 0x80	; 128
    100a:	5f e3       	ldi	r21, 0x3F	; 63
    100c:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__ltsf2>
    1010:	88 23       	and	r24, r24
    1012:	2c f4       	brge	.+10     	; 0x101e <LCD_INITIALIZATION+0x170>
		__ticks = 1;
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	9e 83       	std	Y+6, r25	; 0x06
    101a:	8d 83       	std	Y+5, r24	; 0x05
    101c:	3f c0       	rjmp	.+126    	; 0x109c <LCD_INITIALIZATION+0x1ee>
	else if (__tmp > 65535)
    101e:	6f 81       	ldd	r22, Y+7	; 0x07
    1020:	78 85       	ldd	r23, Y+8	; 0x08
    1022:	89 85       	ldd	r24, Y+9	; 0x09
    1024:	9a 85       	ldd	r25, Y+10	; 0x0a
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	3f ef       	ldi	r19, 0xFF	; 255
    102a:	4f e7       	ldi	r20, 0x7F	; 127
    102c:	57 e4       	ldi	r21, 0x47	; 71
    102e:	0e 94 8a 13 	call	0x2714	; 0x2714 <__gtsf2>
    1032:	18 16       	cp	r1, r24
    1034:	4c f5       	brge	.+82     	; 0x1088 <LCD_INITIALIZATION+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1036:	6b 85       	ldd	r22, Y+11	; 0x0b
    1038:	7c 85       	ldd	r23, Y+12	; 0x0c
    103a:	8d 85       	ldd	r24, Y+13	; 0x0d
    103c:	9e 85       	ldd	r25, Y+14	; 0x0e
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	40 e2       	ldi	r20, 0x20	; 32
    1044:	51 e4       	ldi	r21, 0x41	; 65
    1046:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
    104a:	dc 01       	movw	r26, r24
    104c:	cb 01       	movw	r24, r22
    104e:	bc 01       	movw	r22, r24
    1050:	cd 01       	movw	r24, r26
    1052:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
    1056:	dc 01       	movw	r26, r24
    1058:	cb 01       	movw	r24, r22
    105a:	9e 83       	std	Y+6, r25	; 0x06
    105c:	8d 83       	std	Y+5, r24	; 0x05
    105e:	0f c0       	rjmp	.+30     	; 0x107e <LCD_INITIALIZATION+0x1d0>
    1060:	80 e9       	ldi	r24, 0x90	; 144
    1062:	91 e0       	ldi	r25, 0x01	; 1
    1064:	9c 83       	std	Y+4, r25	; 0x04
    1066:	8b 83       	std	Y+3, r24	; 0x03
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	9c 81       	ldd	r25, Y+4	; 0x04
    106c:	01 97       	sbiw	r24, 0x01	; 1
    106e:	f1 f7       	brne	.-4      	; 0x106c <LCD_INITIALIZATION+0x1be>
    1070:	9c 83       	std	Y+4, r25	; 0x04
    1072:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1074:	8d 81       	ldd	r24, Y+5	; 0x05
    1076:	9e 81       	ldd	r25, Y+6	; 0x06
    1078:	01 97       	sbiw	r24, 0x01	; 1
    107a:	9e 83       	std	Y+6, r25	; 0x06
    107c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    107e:	8d 81       	ldd	r24, Y+5	; 0x05
    1080:	9e 81       	ldd	r25, Y+6	; 0x06
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	69 f7       	brne	.-38     	; 0x1060 <LCD_INITIALIZATION+0x1b2>
    1086:	14 c0       	rjmp	.+40     	; 0x10b0 <LCD_INITIALIZATION+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1088:	6f 81       	ldd	r22, Y+7	; 0x07
    108a:	78 85       	ldd	r23, Y+8	; 0x08
    108c:	89 85       	ldd	r24, Y+9	; 0x09
    108e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1090:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
    1094:	dc 01       	movw	r26, r24
    1096:	cb 01       	movw	r24, r22
    1098:	9e 83       	std	Y+6, r25	; 0x06
    109a:	8d 83       	std	Y+5, r24	; 0x05
    109c:	8d 81       	ldd	r24, Y+5	; 0x05
    109e:	9e 81       	ldd	r25, Y+6	; 0x06
    10a0:	9a 83       	std	Y+2, r25	; 0x02
    10a2:	89 83       	std	Y+1, r24	; 0x01
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	9a 81       	ldd	r25, Y+2	; 0x02
    10a8:	01 97       	sbiw	r24, 0x01	; 1
    10aa:	f1 f7       	brne	.-4      	; 0x10a8 <LCD_INITIALIZATION+0x1fa>
    10ac:	9a 83       	std	Y+2, r25	; 0x02
    10ae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    10b0:	6c 96       	adiw	r28, 0x1c	; 28
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	f8 94       	cli
    10b6:	de bf       	out	0x3e, r29	; 62
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	cd bf       	out	0x3d, r28	; 61
    10bc:	cf 91       	pop	r28
    10be:	df 91       	pop	r29
    10c0:	08 95       	ret

000010c2 <LCD_DISPLAY>:
 * @brief LCD String Display
 *
 * @param temperature_value
 */
void LCD_DISPLAY (char *temperature_value)
{
    10c2:	df 93       	push	r29
    10c4:	cf 93       	push	r28
    10c6:	00 d0       	rcall	.+0      	; 0x10c8 <LCD_DISPLAY+0x6>
    10c8:	00 d0       	rcall	.+0      	; 0x10ca <LCD_DISPLAY+0x8>
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
    10ce:	9c 83       	std	Y+4, r25	; 0x04
    10d0:	8b 83       	std	Y+3, r24	; 0x03
	int Index;
	for(Index=0;temperature_value[Index]!=0;Index++)
    10d2:	1a 82       	std	Y+2, r1	; 0x02
    10d4:	19 82       	std	Y+1, r1	; 0x01
    10d6:	0f c0       	rjmp	.+30     	; 0x10f6 <LCD_DISPLAY+0x34>
	{
		LCD_CHAR_WISE(temperature_value[Index]);
    10d8:	29 81       	ldd	r18, Y+1	; 0x01
    10da:	3a 81       	ldd	r19, Y+2	; 0x02
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	9c 81       	ldd	r25, Y+4	; 0x04
    10e0:	fc 01       	movw	r30, r24
    10e2:	e2 0f       	add	r30, r18
    10e4:	f3 1f       	adc	r31, r19
    10e6:	80 81       	ld	r24, Z
    10e8:	0e 94 e6 03 	call	0x7cc	; 0x7cc <LCD_CHAR_WISE>
 * @param temperature_value
 */
void LCD_DISPLAY (char *temperature_value)
{
	int Index;
	for(Index=0;temperature_value[Index]!=0;Index++)
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	9a 81       	ldd	r25, Y+2	; 0x02
    10f0:	01 96       	adiw	r24, 0x01	; 1
    10f2:	9a 83       	std	Y+2, r25	; 0x02
    10f4:	89 83       	std	Y+1, r24	; 0x01
    10f6:	29 81       	ldd	r18, Y+1	; 0x01
    10f8:	3a 81       	ldd	r19, Y+2	; 0x02
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	9c 81       	ldd	r25, Y+4	; 0x04
    10fe:	fc 01       	movw	r30, r24
    1100:	e2 0f       	add	r30, r18
    1102:	f3 1f       	adc	r31, r19
    1104:	80 81       	ld	r24, Z
    1106:	88 23       	and	r24, r24
    1108:	39 f7       	brne	.-50     	; 0x10d8 <LCD_DISPLAY+0x16>
	{
		LCD_CHAR_WISE(temperature_value[Index]);
	}
}
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	08 95       	ret

00001118 <CLEAR_LCD>:
/**
 * @brief LCD Clear
 *
 */
void CLEAR_LCD()
{
    1118:	df 93       	push	r29
    111a:	cf 93       	push	r28
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
    1120:	2e 97       	sbiw	r28, 0x0e	; 14
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	f8 94       	cli
    1126:	de bf       	out	0x3e, r29	; 62
    1128:	0f be       	out	0x3f, r0	; 63
    112a:	cd bf       	out	0x3d, r28	; 61
	LCD_CMD (0x01);	// LCD Clear
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	0e 94 75 00 	call	0xea	; 0xea <LCD_CMD>
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	a8 e4       	ldi	r26, 0x48	; 72
    1138:	b2 e4       	ldi	r27, 0x42	; 66
    113a:	8b 87       	std	Y+11, r24	; 0x0b
    113c:	9c 87       	std	Y+12, r25	; 0x0c
    113e:	ad 87       	std	Y+13, r26	; 0x0d
    1140:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1142:	6b 85       	ldd	r22, Y+11	; 0x0b
    1144:	7c 85       	ldd	r23, Y+12	; 0x0c
    1146:	8d 85       	ldd	r24, Y+13	; 0x0d
    1148:	9e 85       	ldd	r25, Y+14	; 0x0e
    114a:	20 e0       	ldi	r18, 0x00	; 0
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	4a e7       	ldi	r20, 0x7A	; 122
    1150:	55 e4       	ldi	r21, 0x45	; 69
    1152:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
    1156:	dc 01       	movw	r26, r24
    1158:	cb 01       	movw	r24, r22
    115a:	8f 83       	std	Y+7, r24	; 0x07
    115c:	98 87       	std	Y+8, r25	; 0x08
    115e:	a9 87       	std	Y+9, r26	; 0x09
    1160:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1162:	6f 81       	ldd	r22, Y+7	; 0x07
    1164:	78 85       	ldd	r23, Y+8	; 0x08
    1166:	89 85       	ldd	r24, Y+9	; 0x09
    1168:	9a 85       	ldd	r25, Y+10	; 0x0a
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	40 e8       	ldi	r20, 0x80	; 128
    1170:	5f e3       	ldi	r21, 0x3F	; 63
    1172:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__ltsf2>
    1176:	88 23       	and	r24, r24
    1178:	2c f4       	brge	.+10     	; 0x1184 <CLEAR_LCD+0x6c>
		__ticks = 1;
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	9e 83       	std	Y+6, r25	; 0x06
    1180:	8d 83       	std	Y+5, r24	; 0x05
    1182:	3f c0       	rjmp	.+126    	; 0x1202 <CLEAR_LCD+0xea>
	else if (__tmp > 65535)
    1184:	6f 81       	ldd	r22, Y+7	; 0x07
    1186:	78 85       	ldd	r23, Y+8	; 0x08
    1188:	89 85       	ldd	r24, Y+9	; 0x09
    118a:	9a 85       	ldd	r25, Y+10	; 0x0a
    118c:	20 e0       	ldi	r18, 0x00	; 0
    118e:	3f ef       	ldi	r19, 0xFF	; 255
    1190:	4f e7       	ldi	r20, 0x7F	; 127
    1192:	57 e4       	ldi	r21, 0x47	; 71
    1194:	0e 94 8a 13 	call	0x2714	; 0x2714 <__gtsf2>
    1198:	18 16       	cp	r1, r24
    119a:	4c f5       	brge	.+82     	; 0x11ee <CLEAR_LCD+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    119c:	6b 85       	ldd	r22, Y+11	; 0x0b
    119e:	7c 85       	ldd	r23, Y+12	; 0x0c
    11a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    11a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    11a4:	20 e0       	ldi	r18, 0x00	; 0
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	40 e2       	ldi	r20, 0x20	; 32
    11aa:	51 e4       	ldi	r21, 0x41	; 65
    11ac:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
    11b0:	dc 01       	movw	r26, r24
    11b2:	cb 01       	movw	r24, r22
    11b4:	bc 01       	movw	r22, r24
    11b6:	cd 01       	movw	r24, r26
    11b8:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
    11bc:	dc 01       	movw	r26, r24
    11be:	cb 01       	movw	r24, r22
    11c0:	9e 83       	std	Y+6, r25	; 0x06
    11c2:	8d 83       	std	Y+5, r24	; 0x05
    11c4:	0f c0       	rjmp	.+30     	; 0x11e4 <CLEAR_LCD+0xcc>
    11c6:	80 e9       	ldi	r24, 0x90	; 144
    11c8:	91 e0       	ldi	r25, 0x01	; 1
    11ca:	9c 83       	std	Y+4, r25	; 0x04
    11cc:	8b 83       	std	Y+3, r24	; 0x03
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	9c 81       	ldd	r25, Y+4	; 0x04
    11d2:	01 97       	sbiw	r24, 0x01	; 1
    11d4:	f1 f7       	brne	.-4      	; 0x11d2 <CLEAR_LCD+0xba>
    11d6:	9c 83       	std	Y+4, r25	; 0x04
    11d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11da:	8d 81       	ldd	r24, Y+5	; 0x05
    11dc:	9e 81       	ldd	r25, Y+6	; 0x06
    11de:	01 97       	sbiw	r24, 0x01	; 1
    11e0:	9e 83       	std	Y+6, r25	; 0x06
    11e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11e4:	8d 81       	ldd	r24, Y+5	; 0x05
    11e6:	9e 81       	ldd	r25, Y+6	; 0x06
    11e8:	00 97       	sbiw	r24, 0x00	; 0
    11ea:	69 f7       	brne	.-38     	; 0x11c6 <CLEAR_LCD+0xae>
    11ec:	14 c0       	rjmp	.+40     	; 0x1216 <CLEAR_LCD+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ee:	6f 81       	ldd	r22, Y+7	; 0x07
    11f0:	78 85       	ldd	r23, Y+8	; 0x08
    11f2:	89 85       	ldd	r24, Y+9	; 0x09
    11f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11f6:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
    11fa:	dc 01       	movw	r26, r24
    11fc:	cb 01       	movw	r24, r22
    11fe:	9e 83       	std	Y+6, r25	; 0x06
    1200:	8d 83       	std	Y+5, r24	; 0x05
    1202:	8d 81       	ldd	r24, Y+5	; 0x05
    1204:	9e 81       	ldd	r25, Y+6	; 0x06
    1206:	9a 83       	std	Y+2, r25	; 0x02
    1208:	89 83       	std	Y+1, r24	; 0x01
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	9a 81       	ldd	r25, Y+2	; 0x02
    120e:	01 97       	sbiw	r24, 0x01	; 1
    1210:	f1 f7       	brne	.-4      	; 0x120e <CLEAR_LCD+0xf6>
    1212:	9a 83       	std	Y+2, r25	; 0x02
    1214:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	LCD_CMD (0x80);	// cursor back to start position
    1216:	80 e8       	ldi	r24, 0x80	; 128
    1218:	0e 94 75 00 	call	0xea	; 0xea <LCD_CMD>
}
    121c:	2e 96       	adiw	r28, 0x0e	; 14
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	08 95       	ret

0000122e <ADC_INITIALIZATION>:
/**
 * @brief ADC Initialization
 *
 */
void ADC_INITIALIZATION()
{
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
    ADMUX=(1<<REFS0);   //AVCC = +5V
    1236:	ec e7       	ldi	r30, 0x7C	; 124
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 e4       	ldi	r24, 0x40	; 64
    123c:	80 83       	st	Z, r24
    ADCSRA=(1<<ADEN)|(7<<ADPS0);
    123e:	ea e7       	ldi	r30, 0x7A	; 122
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	87 e8       	ldi	r24, 0x87	; 135
    1244:	80 83       	st	Z, r24
}
    1246:	cf 91       	pop	r28
    1248:	df 91       	pop	r29
    124a:	08 95       	ret

0000124c <SENSE_ADC>:
 *
 * @param channel
 * @return uint16_t
 */
uint16_t SENSE_ADC(uint8_t channel)
{
    124c:	df 93       	push	r29
    124e:	cf 93       	push	r28
    1250:	0f 92       	push	r0
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
    1256:	89 83       	std	Y+1, r24	; 0x01
    // Making ADC to accept channels from 0-7
    ADMUX&=0xf8;
    1258:	ac e7       	ldi	r26, 0x7C	; 124
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	ec e7       	ldi	r30, 0x7C	; 124
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	88 7f       	andi	r24, 0xF8	; 248
    1264:	8c 93       	st	X, r24
    channel=channel&0b00000111;
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	87 70       	andi	r24, 0x07	; 7
    126a:	89 83       	std	Y+1, r24	; 0x01
    ADMUX|=channel;
    126c:	ac e7       	ldi	r26, 0x7C	; 124
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	ec e7       	ldi	r30, 0x7C	; 124
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	90 81       	ld	r25, Z
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	89 2b       	or	r24, r25
    127a:	8c 93       	st	X, r24

    ADCSRA|=(1<<ADSC); //Enable Conversion
    127c:	aa e7       	ldi	r26, 0x7A	; 122
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	ea e7       	ldi	r30, 0x7A	; 122
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	80 64       	ori	r24, 0x40	; 64
    1288:	8c 93       	st	X, r24

    while(!(ADCSRA & (1<<ADIF))); // Transferring the data
    128a:	ea e7       	ldi	r30, 0x7A	; 122
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	88 2f       	mov	r24, r24
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	80 71       	andi	r24, 0x10	; 16
    1296:	90 70       	andi	r25, 0x00	; 0
    1298:	00 97       	sbiw	r24, 0x00	; 0
    129a:	b9 f3       	breq	.-18     	; 0x128a <SENSE_ADC+0x3e>

    ADCSRA|=(1<<ADIF); // ADIF=0
    129c:	aa e7       	ldi	r26, 0x7A	; 122
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	ea e7       	ldi	r30, 0x7A	; 122
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	80 61       	ori	r24, 0x10	; 16
    12a8:	8c 93       	st	X, r24
    return(ADC);
    12aa:	e8 e7       	ldi	r30, 0x78	; 120
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	91 81       	ldd	r25, Z+1	; 0x01
}
    12b2:	0f 90       	pop	r0
    12b4:	cf 91       	pop	r28
    12b6:	df 91       	pop	r29
    12b8:	08 95       	ret

000012ba <TIMER_INITIALIZATION>:

/**
 * @brief Timer1 Initialization
 *
 */
void TIMER_INITIALIZATION(void){
    12ba:	df 93       	push	r29
    12bc:	cf 93       	push	r28
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62

    TIMER1_FAST_PWM;
    12c2:	a0 e8       	ldi	r26, 0x80	; 128
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	e0 e8       	ldi	r30, 0x80	; 128
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	83 68       	ori	r24, 0x83	; 131
    12ce:	8c 93       	st	X, r24
    TIMER_PRESCALER_AS_64;
    12d0:	a1 e8       	ldi	r26, 0x81	; 129
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e1 e8       	ldi	r30, 0x81	; 129
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	8b 60       	ori	r24, 0x0B	; 11
    12dc:	8c 93       	st	X, r24
    PWM_OUTPUT_PIN;
    12de:	a4 e2       	ldi	r26, 0x24	; 36
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e4 e2       	ldi	r30, 0x24	; 36
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	82 60       	ori	r24, 0x02	; 2
    12ea:	8c 93       	st	X, r24
}
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <PWM_OUPUT>:
/**
 * @brief PWM Output as Fast PWM
 *
 * @param ADC_READING
 */
void PWM_OUPUT(uint16_t ADC_READING){
    12f2:	0f 93       	push	r16
    12f4:	1f 93       	push	r17
    12f6:	df 93       	push	r29
    12f8:	cf 93       	push	r28
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	c0 57       	subi	r28, 0x70	; 112
    1300:	d0 40       	sbci	r29, 0x00	; 0
    1302:	0f b6       	in	r0, 0x3f	; 63
    1304:	f8 94       	cli
    1306:	de bf       	out	0x3e, r29	; 62
    1308:	0f be       	out	0x3f, r0	; 63
    130a:	cd bf       	out	0x3d, r28	; 61
    130c:	fe 01       	movw	r30, r28
    130e:	e6 59       	subi	r30, 0x96	; 150
    1310:	ff 4f       	sbci	r31, 0xFF	; 255
    1312:	91 83       	std	Z+1, r25	; 0x01
    1314:	80 83       	st	Z, r24
    char Temp[20];
    char start[]="Temperature :)";
    1316:	ce 01       	movw	r24, r28
    1318:	85 5a       	subi	r24, 0xA5	; 165
    131a:	9f 4f       	sbci	r25, 0xFF	; 255
    131c:	ae 96       	adiw	r28, 0x2e	; 46
    131e:	9f af       	std	Y+63, r25	; 0x3f
    1320:	8e af       	std	Y+62, r24	; 0x3e
    1322:	ae 97       	sbiw	r28, 0x2e	; 46
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	91 e0       	ldi	r25, 0x01	; 1
    1328:	e0 96       	adiw	r28, 0x30	; 48
    132a:	9f af       	std	Y+63, r25	; 0x3f
    132c:	8e af       	std	Y+62, r24	; 0x3e
    132e:	e0 97       	sbiw	r28, 0x30	; 48
    1330:	9f e0       	ldi	r25, 0x0F	; 15
    1332:	e1 96       	adiw	r28, 0x31	; 49
    1334:	9f af       	std	Y+63, r25	; 0x3f
    1336:	e1 97       	sbiw	r28, 0x31	; 49
    1338:	e0 96       	adiw	r28, 0x30	; 48
    133a:	ee ad       	ldd	r30, Y+62	; 0x3e
    133c:	ff ad       	ldd	r31, Y+63	; 0x3f
    133e:	e0 97       	sbiw	r28, 0x30	; 48
    1340:	00 80       	ld	r0, Z
    1342:	e0 96       	adiw	r28, 0x30	; 48
    1344:	8e ad       	ldd	r24, Y+62	; 0x3e
    1346:	9f ad       	ldd	r25, Y+63	; 0x3f
    1348:	e0 97       	sbiw	r28, 0x30	; 48
    134a:	01 96       	adiw	r24, 0x01	; 1
    134c:	e0 96       	adiw	r28, 0x30	; 48
    134e:	9f af       	std	Y+63, r25	; 0x3f
    1350:	8e af       	std	Y+62, r24	; 0x3e
    1352:	e0 97       	sbiw	r28, 0x30	; 48
    1354:	ae 96       	adiw	r28, 0x2e	; 46
    1356:	ee ad       	ldd	r30, Y+62	; 0x3e
    1358:	ff ad       	ldd	r31, Y+63	; 0x3f
    135a:	ae 97       	sbiw	r28, 0x2e	; 46
    135c:	00 82       	st	Z, r0
    135e:	ae 96       	adiw	r28, 0x2e	; 46
    1360:	8e ad       	ldd	r24, Y+62	; 0x3e
    1362:	9f ad       	ldd	r25, Y+63	; 0x3f
    1364:	ae 97       	sbiw	r28, 0x2e	; 46
    1366:	01 96       	adiw	r24, 0x01	; 1
    1368:	ae 96       	adiw	r28, 0x2e	; 46
    136a:	9f af       	std	Y+63, r25	; 0x3f
    136c:	8e af       	std	Y+62, r24	; 0x3e
    136e:	ae 97       	sbiw	r28, 0x2e	; 46
    1370:	e1 96       	adiw	r28, 0x31	; 49
    1372:	9f ad       	ldd	r25, Y+63	; 0x3f
    1374:	e1 97       	sbiw	r28, 0x31	; 49
    1376:	91 50       	subi	r25, 0x01	; 1
    1378:	e1 96       	adiw	r28, 0x31	; 49
    137a:	9f af       	std	Y+63, r25	; 0x3f
    137c:	e1 97       	sbiw	r28, 0x31	; 49
    137e:	e1 96       	adiw	r28, 0x31	; 49
    1380:	ef ad       	ldd	r30, Y+63	; 0x3f
    1382:	e1 97       	sbiw	r28, 0x31	; 49
    1384:	ee 23       	and	r30, r30
    1386:	c1 f6       	brne	.-80     	; 0x1338 <PWM_OUPUT+0x46>

    if(ADC_READING>0 && ADC_READING<=200){
    1388:	fe 01       	movw	r30, r28
    138a:	e6 59       	subi	r30, 0x96	; 150
    138c:	ff 4f       	sbci	r31, 0xFF	; 255
    138e:	80 81       	ld	r24, Z
    1390:	91 81       	ldd	r25, Z+1	; 0x01
    1392:	00 97       	sbiw	r24, 0x00	; 0
    1394:	09 f4       	brne	.+2      	; 0x1398 <PWM_OUPUT+0xa6>
    1396:	bf c0       	rjmp	.+382    	; 0x1516 <PWM_OUPUT+0x224>
    1398:	fe 01       	movw	r30, r28
    139a:	e6 59       	subi	r30, 0x96	; 150
    139c:	ff 4f       	sbci	r31, 0xFF	; 255
    139e:	80 81       	ld	r24, Z
    13a0:	91 81       	ldd	r25, Z+1	; 0x01
    13a2:	89 3c       	cpi	r24, 0xC9	; 201
    13a4:	91 05       	cpc	r25, r1
    13a6:	08 f0       	brcs	.+2      	; 0x13aa <PWM_OUPUT+0xb8>
    13a8:	b6 c0       	rjmp	.+364    	; 0x1516 <PWM_OUPUT+0x224>

        OCR1A = 195; // Duty cycle 20%
    13aa:	e8 e8       	ldi	r30, 0x88	; 136
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	83 ec       	ldi	r24, 0xC3	; 195
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	91 83       	std	Z+1, r25	; 0x01
    13b4:	80 83       	st	Z, r24
        Temp[0] = '2';
    13b6:	fe 01       	movw	r30, r28
    13b8:	e9 5b       	subi	r30, 0xB9	; 185
    13ba:	ff 4f       	sbci	r31, 0xFF	; 255
    13bc:	82 e3       	ldi	r24, 0x32	; 50
    13be:	80 83       	st	Z, r24
        Temp[1] = '0';
    13c0:	fe 01       	movw	r30, r28
    13c2:	e9 5b       	subi	r30, 0xB9	; 185
    13c4:	ff 4f       	sbci	r31, 0xFF	; 255
    13c6:	80 e3       	ldi	r24, 0x30	; 48
    13c8:	81 83       	std	Z+1, r24	; 0x01
        Temp[2] = 223;
    13ca:	fe 01       	movw	r30, r28
    13cc:	e9 5b       	subi	r30, 0xB9	; 185
    13ce:	ff 4f       	sbci	r31, 0xFF	; 255
    13d0:	8f ed       	ldi	r24, 0xDF	; 223
    13d2:	82 83       	std	Z+2, r24	; 0x02
        Temp[3] = 'C';
    13d4:	fe 01       	movw	r30, r28
    13d6:	e9 5b       	subi	r30, 0xB9	; 185
    13d8:	ff 4f       	sbci	r31, 0xFF	; 255
    13da:	83 e4       	ldi	r24, 0x43	; 67
    13dc:	83 83       	std	Z+3, r24	; 0x03
        Temp[4] = ' ';
    13de:	fe 01       	movw	r30, r28
    13e0:	e9 5b       	subi	r30, 0xB9	; 185
    13e2:	ff 4f       	sbci	r31, 0xFF	; 255
    13e4:	80 e2       	ldi	r24, 0x20	; 32
    13e6:	84 83       	std	Z+4, r24	; 0x04
        Temp[5] = '\0';
    13e8:	fe 01       	movw	r30, r28
    13ea:	e9 5b       	subi	r30, 0xB9	; 185
    13ec:	ff 4f       	sbci	r31, 0xFF	; 255
    13ee:	15 82       	std	Z+5, r1	; 0x05
        LCD_DISPLAY(start);
    13f0:	ce 01       	movw	r24, r28
    13f2:	85 5a       	subi	r24, 0xA5	; 165
    13f4:	9f 4f       	sbci	r25, 0xFF	; 255
    13f6:	0e 94 61 08 	call	0x10c2	; 0x10c2 <LCD_DISPLAY>
        LCD_CMD(0xC0);
    13fa:	80 ec       	ldi	r24, 0xC0	; 192
    13fc:	0e 94 75 00 	call	0xea	; 0xea <LCD_CMD>
        LCD_DISPLAY(Temp);
    1400:	ce 01       	movw	r24, r28
    1402:	89 5b       	subi	r24, 0xB9	; 185
    1404:	9f 4f       	sbci	r25, 0xFF	; 255
    1406:	0e 94 61 08 	call	0x10c2	; 0x10c2 <LCD_DISPLAY>
    140a:	fe 01       	movw	r30, r28
    140c:	ed 5b       	subi	r30, 0xBD	; 189
    140e:	ff 4f       	sbci	r31, 0xFF	; 255
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	a0 ea       	ldi	r26, 0xA0	; 160
    1416:	b1 e4       	ldi	r27, 0x41	; 65
    1418:	80 83       	st	Z, r24
    141a:	91 83       	std	Z+1, r25	; 0x01
    141c:	a2 83       	std	Z+2, r26	; 0x02
    141e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1420:	8e 01       	movw	r16, r28
    1422:	01 5c       	subi	r16, 0xC1	; 193
    1424:	1f 4f       	sbci	r17, 0xFF	; 255
    1426:	fe 01       	movw	r30, r28
    1428:	ed 5b       	subi	r30, 0xBD	; 189
    142a:	ff 4f       	sbci	r31, 0xFF	; 255
    142c:	60 81       	ld	r22, Z
    142e:	71 81       	ldd	r23, Z+1	; 0x01
    1430:	82 81       	ldd	r24, Z+2	; 0x02
    1432:	93 81       	ldd	r25, Z+3	; 0x03
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	4a e7       	ldi	r20, 0x7A	; 122
    143a:	55 e4       	ldi	r21, 0x45	; 69
    143c:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	f8 01       	movw	r30, r16
    1446:	80 83       	st	Z, r24
    1448:	91 83       	std	Z+1, r25	; 0x01
    144a:	a2 83       	std	Z+2, r26	; 0x02
    144c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    144e:	fe 01       	movw	r30, r28
    1450:	ff 96       	adiw	r30, 0x3f	; 63
    1452:	60 81       	ld	r22, Z
    1454:	71 81       	ldd	r23, Z+1	; 0x01
    1456:	82 81       	ldd	r24, Z+2	; 0x02
    1458:	93 81       	ldd	r25, Z+3	; 0x03
    145a:	20 e0       	ldi	r18, 0x00	; 0
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	40 e8       	ldi	r20, 0x80	; 128
    1460:	5f e3       	ldi	r21, 0x3F	; 63
    1462:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__ltsf2>
    1466:	88 23       	and	r24, r24
    1468:	2c f4       	brge	.+10     	; 0x1474 <PWM_OUPUT+0x182>
		__ticks = 1;
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	9e af       	std	Y+62, r25	; 0x3e
    1470:	8d af       	std	Y+61, r24	; 0x3d
    1472:	46 c0       	rjmp	.+140    	; 0x1500 <PWM_OUPUT+0x20e>
	else if (__tmp > 65535)
    1474:	fe 01       	movw	r30, r28
    1476:	ff 96       	adiw	r30, 0x3f	; 63
    1478:	60 81       	ld	r22, Z
    147a:	71 81       	ldd	r23, Z+1	; 0x01
    147c:	82 81       	ldd	r24, Z+2	; 0x02
    147e:	93 81       	ldd	r25, Z+3	; 0x03
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	3f ef       	ldi	r19, 0xFF	; 255
    1484:	4f e7       	ldi	r20, 0x7F	; 127
    1486:	57 e4       	ldi	r21, 0x47	; 71
    1488:	0e 94 8a 13 	call	0x2714	; 0x2714 <__gtsf2>
    148c:	18 16       	cp	r1, r24
    148e:	64 f5       	brge	.+88     	; 0x14e8 <PWM_OUPUT+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1490:	fe 01       	movw	r30, r28
    1492:	ed 5b       	subi	r30, 0xBD	; 189
    1494:	ff 4f       	sbci	r31, 0xFF	; 255
    1496:	60 81       	ld	r22, Z
    1498:	71 81       	ldd	r23, Z+1	; 0x01
    149a:	82 81       	ldd	r24, Z+2	; 0x02
    149c:	93 81       	ldd	r25, Z+3	; 0x03
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	40 e2       	ldi	r20, 0x20	; 32
    14a4:	51 e4       	ldi	r21, 0x41	; 65
    14a6:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
    14aa:	dc 01       	movw	r26, r24
    14ac:	cb 01       	movw	r24, r22
    14ae:	bc 01       	movw	r22, r24
    14b0:	cd 01       	movw	r24, r26
    14b2:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
    14b6:	dc 01       	movw	r26, r24
    14b8:	cb 01       	movw	r24, r22
    14ba:	9e af       	std	Y+62, r25	; 0x3e
    14bc:	8d af       	std	Y+61, r24	; 0x3d
    14be:	0f c0       	rjmp	.+30     	; 0x14de <PWM_OUPUT+0x1ec>
    14c0:	80 e9       	ldi	r24, 0x90	; 144
    14c2:	91 e0       	ldi	r25, 0x01	; 1
    14c4:	9c af       	std	Y+60, r25	; 0x3c
    14c6:	8b af       	std	Y+59, r24	; 0x3b
    14c8:	8b ad       	ldd	r24, Y+59	; 0x3b
    14ca:	9c ad       	ldd	r25, Y+60	; 0x3c
    14cc:	01 97       	sbiw	r24, 0x01	; 1
    14ce:	f1 f7       	brne	.-4      	; 0x14cc <PWM_OUPUT+0x1da>
    14d0:	9c af       	std	Y+60, r25	; 0x3c
    14d2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14d4:	8d ad       	ldd	r24, Y+61	; 0x3d
    14d6:	9e ad       	ldd	r25, Y+62	; 0x3e
    14d8:	01 97       	sbiw	r24, 0x01	; 1
    14da:	9e af       	std	Y+62, r25	; 0x3e
    14dc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14de:	8d ad       	ldd	r24, Y+61	; 0x3d
    14e0:	9e ad       	ldd	r25, Y+62	; 0x3e
    14e2:	00 97       	sbiw	r24, 0x00	; 0
    14e4:	69 f7       	brne	.-38     	; 0x14c0 <PWM_OUPUT+0x1ce>
    14e6:	d6 c2       	rjmp	.+1452   	; 0x1a94 <PWM_OUPUT+0x7a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14e8:	fe 01       	movw	r30, r28
    14ea:	ff 96       	adiw	r30, 0x3f	; 63
    14ec:	60 81       	ld	r22, Z
    14ee:	71 81       	ldd	r23, Z+1	; 0x01
    14f0:	82 81       	ldd	r24, Z+2	; 0x02
    14f2:	93 81       	ldd	r25, Z+3	; 0x03
    14f4:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
    14f8:	dc 01       	movw	r26, r24
    14fa:	cb 01       	movw	r24, r22
    14fc:	9e af       	std	Y+62, r25	; 0x3e
    14fe:	8d af       	std	Y+61, r24	; 0x3d
    1500:	8d ad       	ldd	r24, Y+61	; 0x3d
    1502:	9e ad       	ldd	r25, Y+62	; 0x3e
    1504:	9a af       	std	Y+58, r25	; 0x3a
    1506:	89 af       	std	Y+57, r24	; 0x39
    1508:	89 ad       	ldd	r24, Y+57	; 0x39
    150a:	9a ad       	ldd	r25, Y+58	; 0x3a
    150c:	01 97       	sbiw	r24, 0x01	; 1
    150e:	f1 f7       	brne	.-4      	; 0x150c <PWM_OUPUT+0x21a>
    1510:	9a af       	std	Y+58, r25	; 0x3a
    1512:	89 af       	std	Y+57, r24	; 0x39
    1514:	bf c2       	rjmp	.+1406   	; 0x1a94 <PWM_OUPUT+0x7a2>
        _delay_ms(20);
    }
    else if((ADC_READING>=210) && (ADC_READING<=500)){
    1516:	fe 01       	movw	r30, r28
    1518:	e6 59       	subi	r30, 0x96	; 150
    151a:	ff 4f       	sbci	r31, 0xFF	; 255
    151c:	80 81       	ld	r24, Z
    151e:	91 81       	ldd	r25, Z+1	; 0x01
    1520:	82 3d       	cpi	r24, 0xD2	; 210
    1522:	91 05       	cpc	r25, r1
    1524:	08 f4       	brcc	.+2      	; 0x1528 <PWM_OUPUT+0x236>
    1526:	ad c0       	rjmp	.+346    	; 0x1682 <PWM_OUPUT+0x390>
    1528:	fe 01       	movw	r30, r28
    152a:	e6 59       	subi	r30, 0x96	; 150
    152c:	ff 4f       	sbci	r31, 0xFF	; 255
    152e:	80 81       	ld	r24, Z
    1530:	91 81       	ldd	r25, Z+1	; 0x01
    1532:	f1 e0       	ldi	r31, 0x01	; 1
    1534:	85 3f       	cpi	r24, 0xF5	; 245
    1536:	9f 07       	cpc	r25, r31
    1538:	08 f0       	brcs	.+2      	; 0x153c <PWM_OUPUT+0x24a>
    153a:	a3 c0       	rjmp	.+326    	; 0x1682 <PWM_OUPUT+0x390>

        OCR1A = 495; // duty cycle 40%
    153c:	e8 e8       	ldi	r30, 0x88	; 136
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	8f ee       	ldi	r24, 0xEF	; 239
    1542:	91 e0       	ldi	r25, 0x01	; 1
    1544:	91 83       	std	Z+1, r25	; 0x01
    1546:	80 83       	st	Z, r24
        Temp[0] = '2';
    1548:	fe 01       	movw	r30, r28
    154a:	e9 5b       	subi	r30, 0xB9	; 185
    154c:	ff 4f       	sbci	r31, 0xFF	; 255
    154e:	82 e3       	ldi	r24, 0x32	; 50
    1550:	80 83       	st	Z, r24
        Temp[1] = '5';
    1552:	fe 01       	movw	r30, r28
    1554:	e9 5b       	subi	r30, 0xB9	; 185
    1556:	ff 4f       	sbci	r31, 0xFF	; 255
    1558:	85 e3       	ldi	r24, 0x35	; 53
    155a:	81 83       	std	Z+1, r24	; 0x01
        Temp[2] = 223;
    155c:	fe 01       	movw	r30, r28
    155e:	e9 5b       	subi	r30, 0xB9	; 185
    1560:	ff 4f       	sbci	r31, 0xFF	; 255
    1562:	8f ed       	ldi	r24, 0xDF	; 223
    1564:	82 83       	std	Z+2, r24	; 0x02
        Temp[3] = 'C';
    1566:	fe 01       	movw	r30, r28
    1568:	e9 5b       	subi	r30, 0xB9	; 185
    156a:	ff 4f       	sbci	r31, 0xFF	; 255
    156c:	83 e4       	ldi	r24, 0x43	; 67
    156e:	83 83       	std	Z+3, r24	; 0x03
        Temp[4] = ' ';
    1570:	fe 01       	movw	r30, r28
    1572:	e9 5b       	subi	r30, 0xB9	; 185
    1574:	ff 4f       	sbci	r31, 0xFF	; 255
    1576:	80 e2       	ldi	r24, 0x20	; 32
    1578:	84 83       	std	Z+4, r24	; 0x04
        Temp[5] = '\0';
    157a:	fe 01       	movw	r30, r28
    157c:	e9 5b       	subi	r30, 0xB9	; 185
    157e:	ff 4f       	sbci	r31, 0xFF	; 255
    1580:	15 82       	std	Z+5, r1	; 0x05
        LCD_DISPLAY(start);
    1582:	ce 01       	movw	r24, r28
    1584:	85 5a       	subi	r24, 0xA5	; 165
    1586:	9f 4f       	sbci	r25, 0xFF	; 255
    1588:	0e 94 61 08 	call	0x10c2	; 0x10c2 <LCD_DISPLAY>
        LCD_CMD(0xC0);
    158c:	80 ec       	ldi	r24, 0xC0	; 192
    158e:	0e 94 75 00 	call	0xea	; 0xea <LCD_CMD>
        LCD_DISPLAY(Temp);
    1592:	ce 01       	movw	r24, r28
    1594:	89 5b       	subi	r24, 0xB9	; 185
    1596:	9f 4f       	sbci	r25, 0xFF	; 255
    1598:	0e 94 61 08 	call	0x10c2	; 0x10c2 <LCD_DISPLAY>
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	a0 ea       	ldi	r26, 0xA0	; 160
    15a2:	b1 e4       	ldi	r27, 0x41	; 65
    15a4:	8d ab       	std	Y+53, r24	; 0x35
    15a6:	9e ab       	std	Y+54, r25	; 0x36
    15a8:	af ab       	std	Y+55, r26	; 0x37
    15aa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ac:	6d a9       	ldd	r22, Y+53	; 0x35
    15ae:	7e a9       	ldd	r23, Y+54	; 0x36
    15b0:	8f a9       	ldd	r24, Y+55	; 0x37
    15b2:	98 ad       	ldd	r25, Y+56	; 0x38
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	4a e7       	ldi	r20, 0x7A	; 122
    15ba:	55 e4       	ldi	r21, 0x45	; 69
    15bc:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
    15c0:	dc 01       	movw	r26, r24
    15c2:	cb 01       	movw	r24, r22
    15c4:	89 ab       	std	Y+49, r24	; 0x31
    15c6:	9a ab       	std	Y+50, r25	; 0x32
    15c8:	ab ab       	std	Y+51, r26	; 0x33
    15ca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    15cc:	69 a9       	ldd	r22, Y+49	; 0x31
    15ce:	7a a9       	ldd	r23, Y+50	; 0x32
    15d0:	8b a9       	ldd	r24, Y+51	; 0x33
    15d2:	9c a9       	ldd	r25, Y+52	; 0x34
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	40 e8       	ldi	r20, 0x80	; 128
    15da:	5f e3       	ldi	r21, 0x3F	; 63
    15dc:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__ltsf2>
    15e0:	88 23       	and	r24, r24
    15e2:	2c f4       	brge	.+10     	; 0x15ee <PWM_OUPUT+0x2fc>
		__ticks = 1;
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	98 ab       	std	Y+48, r25	; 0x30
    15ea:	8f a7       	std	Y+47, r24	; 0x2f
    15ec:	3f c0       	rjmp	.+126    	; 0x166c <PWM_OUPUT+0x37a>
	else if (__tmp > 65535)
    15ee:	69 a9       	ldd	r22, Y+49	; 0x31
    15f0:	7a a9       	ldd	r23, Y+50	; 0x32
    15f2:	8b a9       	ldd	r24, Y+51	; 0x33
    15f4:	9c a9       	ldd	r25, Y+52	; 0x34
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	3f ef       	ldi	r19, 0xFF	; 255
    15fa:	4f e7       	ldi	r20, 0x7F	; 127
    15fc:	57 e4       	ldi	r21, 0x47	; 71
    15fe:	0e 94 8a 13 	call	0x2714	; 0x2714 <__gtsf2>
    1602:	18 16       	cp	r1, r24
    1604:	4c f5       	brge	.+82     	; 0x1658 <PWM_OUPUT+0x366>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1606:	6d a9       	ldd	r22, Y+53	; 0x35
    1608:	7e a9       	ldd	r23, Y+54	; 0x36
    160a:	8f a9       	ldd	r24, Y+55	; 0x37
    160c:	98 ad       	ldd	r25, Y+56	; 0x38
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	40 e2       	ldi	r20, 0x20	; 32
    1614:	51 e4       	ldi	r21, 0x41	; 65
    1616:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	bc 01       	movw	r22, r24
    1620:	cd 01       	movw	r24, r26
    1622:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	98 ab       	std	Y+48, r25	; 0x30
    162c:	8f a7       	std	Y+47, r24	; 0x2f
    162e:	0f c0       	rjmp	.+30     	; 0x164e <PWM_OUPUT+0x35c>
    1630:	80 e9       	ldi	r24, 0x90	; 144
    1632:	91 e0       	ldi	r25, 0x01	; 1
    1634:	9e a7       	std	Y+46, r25	; 0x2e
    1636:	8d a7       	std	Y+45, r24	; 0x2d
    1638:	8d a5       	ldd	r24, Y+45	; 0x2d
    163a:	9e a5       	ldd	r25, Y+46	; 0x2e
    163c:	01 97       	sbiw	r24, 0x01	; 1
    163e:	f1 f7       	brne	.-4      	; 0x163c <PWM_OUPUT+0x34a>
    1640:	9e a7       	std	Y+46, r25	; 0x2e
    1642:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1644:	8f a5       	ldd	r24, Y+47	; 0x2f
    1646:	98 a9       	ldd	r25, Y+48	; 0x30
    1648:	01 97       	sbiw	r24, 0x01	; 1
    164a:	98 ab       	std	Y+48, r25	; 0x30
    164c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    164e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1650:	98 a9       	ldd	r25, Y+48	; 0x30
    1652:	00 97       	sbiw	r24, 0x00	; 0
    1654:	69 f7       	brne	.-38     	; 0x1630 <PWM_OUPUT+0x33e>
    1656:	1e c2       	rjmp	.+1084   	; 0x1a94 <PWM_OUPUT+0x7a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1658:	69 a9       	ldd	r22, Y+49	; 0x31
    165a:	7a a9       	ldd	r23, Y+50	; 0x32
    165c:	8b a9       	ldd	r24, Y+51	; 0x33
    165e:	9c a9       	ldd	r25, Y+52	; 0x34
    1660:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
    1664:	dc 01       	movw	r26, r24
    1666:	cb 01       	movw	r24, r22
    1668:	98 ab       	std	Y+48, r25	; 0x30
    166a:	8f a7       	std	Y+47, r24	; 0x2f
    166c:	8f a5       	ldd	r24, Y+47	; 0x2f
    166e:	98 a9       	ldd	r25, Y+48	; 0x30
    1670:	9c a7       	std	Y+44, r25	; 0x2c
    1672:	8b a7       	std	Y+43, r24	; 0x2b
    1674:	8b a5       	ldd	r24, Y+43	; 0x2b
    1676:	9c a5       	ldd	r25, Y+44	; 0x2c
    1678:	01 97       	sbiw	r24, 0x01	; 1
    167a:	f1 f7       	brne	.-4      	; 0x1678 <PWM_OUPUT+0x386>
    167c:	9c a7       	std	Y+44, r25	; 0x2c
    167e:	8b a7       	std	Y+43, r24	; 0x2b
    1680:	09 c2       	rjmp	.+1042   	; 0x1a94 <PWM_OUPUT+0x7a2>
        _delay_ms(20);
    }
    else if((ADC_READING>=501) && (ADC_READING<=700)){
    1682:	fe 01       	movw	r30, r28
    1684:	e6 59       	subi	r30, 0x96	; 150
    1686:	ff 4f       	sbci	r31, 0xFF	; 255
    1688:	80 81       	ld	r24, Z
    168a:	91 81       	ldd	r25, Z+1	; 0x01
    168c:	21 e0       	ldi	r18, 0x01	; 1
    168e:	85 3f       	cpi	r24, 0xF5	; 245
    1690:	92 07       	cpc	r25, r18
    1692:	08 f4       	brcc	.+2      	; 0x1696 <PWM_OUPUT+0x3a4>
    1694:	ad c0       	rjmp	.+346    	; 0x17f0 <PWM_OUPUT+0x4fe>
    1696:	fe 01       	movw	r30, r28
    1698:	e6 59       	subi	r30, 0x96	; 150
    169a:	ff 4f       	sbci	r31, 0xFF	; 255
    169c:	80 81       	ld	r24, Z
    169e:	91 81       	ldd	r25, Z+1	; 0x01
    16a0:	e2 e0       	ldi	r30, 0x02	; 2
    16a2:	8d 3b       	cpi	r24, 0xBD	; 189
    16a4:	9e 07       	cpc	r25, r30
    16a6:	08 f0       	brcs	.+2      	; 0x16aa <PWM_OUPUT+0x3b8>
    16a8:	a3 c0       	rjmp	.+326    	; 0x17f0 <PWM_OUPUT+0x4fe>

        OCR1A = 695;// duty cycle 70%
    16aa:	e8 e8       	ldi	r30, 0x88	; 136
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	87 eb       	ldi	r24, 0xB7	; 183
    16b0:	92 e0       	ldi	r25, 0x02	; 2
    16b2:	91 83       	std	Z+1, r25	; 0x01
    16b4:	80 83       	st	Z, r24
        Temp[0] = '2';
    16b6:	fe 01       	movw	r30, r28
    16b8:	e9 5b       	subi	r30, 0xB9	; 185
    16ba:	ff 4f       	sbci	r31, 0xFF	; 255
    16bc:	82 e3       	ldi	r24, 0x32	; 50
    16be:	80 83       	st	Z, r24
        Temp[1] = '9';
    16c0:	fe 01       	movw	r30, r28
    16c2:	e9 5b       	subi	r30, 0xB9	; 185
    16c4:	ff 4f       	sbci	r31, 0xFF	; 255
    16c6:	89 e3       	ldi	r24, 0x39	; 57
    16c8:	81 83       	std	Z+1, r24	; 0x01
        Temp[2] = 223;
    16ca:	fe 01       	movw	r30, r28
    16cc:	e9 5b       	subi	r30, 0xB9	; 185
    16ce:	ff 4f       	sbci	r31, 0xFF	; 255
    16d0:	8f ed       	ldi	r24, 0xDF	; 223
    16d2:	82 83       	std	Z+2, r24	; 0x02
        Temp[3] = 'C';
    16d4:	fe 01       	movw	r30, r28
    16d6:	e9 5b       	subi	r30, 0xB9	; 185
    16d8:	ff 4f       	sbci	r31, 0xFF	; 255
    16da:	83 e4       	ldi	r24, 0x43	; 67
    16dc:	83 83       	std	Z+3, r24	; 0x03
        Temp[4] = ' ';
    16de:	fe 01       	movw	r30, r28
    16e0:	e9 5b       	subi	r30, 0xB9	; 185
    16e2:	ff 4f       	sbci	r31, 0xFF	; 255
    16e4:	80 e2       	ldi	r24, 0x20	; 32
    16e6:	84 83       	std	Z+4, r24	; 0x04
        Temp[5] = '\0';
    16e8:	fe 01       	movw	r30, r28
    16ea:	e9 5b       	subi	r30, 0xB9	; 185
    16ec:	ff 4f       	sbci	r31, 0xFF	; 255
    16ee:	15 82       	std	Z+5, r1	; 0x05
        LCD_DISPLAY(start);
    16f0:	ce 01       	movw	r24, r28
    16f2:	85 5a       	subi	r24, 0xA5	; 165
    16f4:	9f 4f       	sbci	r25, 0xFF	; 255
    16f6:	0e 94 61 08 	call	0x10c2	; 0x10c2 <LCD_DISPLAY>
        LCD_CMD(0xC0);
    16fa:	80 ec       	ldi	r24, 0xC0	; 192
    16fc:	0e 94 75 00 	call	0xea	; 0xea <LCD_CMD>
        LCD_DISPLAY(Temp);
    1700:	ce 01       	movw	r24, r28
    1702:	89 5b       	subi	r24, 0xB9	; 185
    1704:	9f 4f       	sbci	r25, 0xFF	; 255
    1706:	0e 94 61 08 	call	0x10c2	; 0x10c2 <LCD_DISPLAY>
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	a0 ea       	ldi	r26, 0xA0	; 160
    1710:	b1 e4       	ldi	r27, 0x41	; 65
    1712:	8f a3       	std	Y+39, r24	; 0x27
    1714:	98 a7       	std	Y+40, r25	; 0x28
    1716:	a9 a7       	std	Y+41, r26	; 0x29
    1718:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    171a:	6f a1       	ldd	r22, Y+39	; 0x27
    171c:	78 a5       	ldd	r23, Y+40	; 0x28
    171e:	89 a5       	ldd	r24, Y+41	; 0x29
    1720:	9a a5       	ldd	r25, Y+42	; 0x2a
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	4a e7       	ldi	r20, 0x7A	; 122
    1728:	55 e4       	ldi	r21, 0x45	; 69
    172a:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
    172e:	dc 01       	movw	r26, r24
    1730:	cb 01       	movw	r24, r22
    1732:	8b a3       	std	Y+35, r24	; 0x23
    1734:	9c a3       	std	Y+36, r25	; 0x24
    1736:	ad a3       	std	Y+37, r26	; 0x25
    1738:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    173a:	6b a1       	ldd	r22, Y+35	; 0x23
    173c:	7c a1       	ldd	r23, Y+36	; 0x24
    173e:	8d a1       	ldd	r24, Y+37	; 0x25
    1740:	9e a1       	ldd	r25, Y+38	; 0x26
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	40 e8       	ldi	r20, 0x80	; 128
    1748:	5f e3       	ldi	r21, 0x3F	; 63
    174a:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__ltsf2>
    174e:	88 23       	and	r24, r24
    1750:	2c f4       	brge	.+10     	; 0x175c <PWM_OUPUT+0x46a>
		__ticks = 1;
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	9a a3       	std	Y+34, r25	; 0x22
    1758:	89 a3       	std	Y+33, r24	; 0x21
    175a:	3f c0       	rjmp	.+126    	; 0x17da <PWM_OUPUT+0x4e8>
	else if (__tmp > 65535)
    175c:	6b a1       	ldd	r22, Y+35	; 0x23
    175e:	7c a1       	ldd	r23, Y+36	; 0x24
    1760:	8d a1       	ldd	r24, Y+37	; 0x25
    1762:	9e a1       	ldd	r25, Y+38	; 0x26
    1764:	20 e0       	ldi	r18, 0x00	; 0
    1766:	3f ef       	ldi	r19, 0xFF	; 255
    1768:	4f e7       	ldi	r20, 0x7F	; 127
    176a:	57 e4       	ldi	r21, 0x47	; 71
    176c:	0e 94 8a 13 	call	0x2714	; 0x2714 <__gtsf2>
    1770:	18 16       	cp	r1, r24
    1772:	4c f5       	brge	.+82     	; 0x17c6 <PWM_OUPUT+0x4d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1774:	6f a1       	ldd	r22, Y+39	; 0x27
    1776:	78 a5       	ldd	r23, Y+40	; 0x28
    1778:	89 a5       	ldd	r24, Y+41	; 0x29
    177a:	9a a5       	ldd	r25, Y+42	; 0x2a
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	40 e2       	ldi	r20, 0x20	; 32
    1782:	51 e4       	ldi	r21, 0x41	; 65
    1784:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	bc 01       	movw	r22, r24
    178e:	cd 01       	movw	r24, r26
    1790:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
    1794:	dc 01       	movw	r26, r24
    1796:	cb 01       	movw	r24, r22
    1798:	9a a3       	std	Y+34, r25	; 0x22
    179a:	89 a3       	std	Y+33, r24	; 0x21
    179c:	0f c0       	rjmp	.+30     	; 0x17bc <PWM_OUPUT+0x4ca>
    179e:	80 e9       	ldi	r24, 0x90	; 144
    17a0:	91 e0       	ldi	r25, 0x01	; 1
    17a2:	98 a3       	std	Y+32, r25	; 0x20
    17a4:	8f 8f       	std	Y+31, r24	; 0x1f
    17a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17a8:	98 a1       	ldd	r25, Y+32	; 0x20
    17aa:	01 97       	sbiw	r24, 0x01	; 1
    17ac:	f1 f7       	brne	.-4      	; 0x17aa <PWM_OUPUT+0x4b8>
    17ae:	98 a3       	std	Y+32, r25	; 0x20
    17b0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b2:	89 a1       	ldd	r24, Y+33	; 0x21
    17b4:	9a a1       	ldd	r25, Y+34	; 0x22
    17b6:	01 97       	sbiw	r24, 0x01	; 1
    17b8:	9a a3       	std	Y+34, r25	; 0x22
    17ba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17bc:	89 a1       	ldd	r24, Y+33	; 0x21
    17be:	9a a1       	ldd	r25, Y+34	; 0x22
    17c0:	00 97       	sbiw	r24, 0x00	; 0
    17c2:	69 f7       	brne	.-38     	; 0x179e <PWM_OUPUT+0x4ac>
    17c4:	67 c1       	rjmp	.+718    	; 0x1a94 <PWM_OUPUT+0x7a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17c6:	6b a1       	ldd	r22, Y+35	; 0x23
    17c8:	7c a1       	ldd	r23, Y+36	; 0x24
    17ca:	8d a1       	ldd	r24, Y+37	; 0x25
    17cc:	9e a1       	ldd	r25, Y+38	; 0x26
    17ce:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
    17d2:	dc 01       	movw	r26, r24
    17d4:	cb 01       	movw	r24, r22
    17d6:	9a a3       	std	Y+34, r25	; 0x22
    17d8:	89 a3       	std	Y+33, r24	; 0x21
    17da:	89 a1       	ldd	r24, Y+33	; 0x21
    17dc:	9a a1       	ldd	r25, Y+34	; 0x22
    17de:	9e 8f       	std	Y+30, r25	; 0x1e
    17e0:	8d 8f       	std	Y+29, r24	; 0x1d
    17e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17e6:	01 97       	sbiw	r24, 0x01	; 1
    17e8:	f1 f7       	brne	.-4      	; 0x17e6 <PWM_OUPUT+0x4f4>
    17ea:	9e 8f       	std	Y+30, r25	; 0x1e
    17ec:	8d 8f       	std	Y+29, r24	; 0x1d
    17ee:	52 c1       	rjmp	.+676    	; 0x1a94 <PWM_OUPUT+0x7a2>
        _delay_ms(20);
    }
    else if((ADC_READING>=701) && (ADC_READING<=1024)){
    17f0:	fe 01       	movw	r30, r28
    17f2:	e6 59       	subi	r30, 0x96	; 150
    17f4:	ff 4f       	sbci	r31, 0xFF	; 255
    17f6:	80 81       	ld	r24, Z
    17f8:	91 81       	ldd	r25, Z+1	; 0x01
    17fa:	f2 e0       	ldi	r31, 0x02	; 2
    17fc:	8d 3b       	cpi	r24, 0xBD	; 189
    17fe:	9f 07       	cpc	r25, r31
    1800:	08 f4       	brcc	.+2      	; 0x1804 <PWM_OUPUT+0x512>
    1802:	ad c0       	rjmp	.+346    	; 0x195e <PWM_OUPUT+0x66c>
    1804:	fe 01       	movw	r30, r28
    1806:	e6 59       	subi	r30, 0x96	; 150
    1808:	ff 4f       	sbci	r31, 0xFF	; 255
    180a:	80 81       	ld	r24, Z
    180c:	91 81       	ldd	r25, Z+1	; 0x01
    180e:	24 e0       	ldi	r18, 0x04	; 4
    1810:	81 30       	cpi	r24, 0x01	; 1
    1812:	92 07       	cpc	r25, r18
    1814:	08 f0       	brcs	.+2      	; 0x1818 <PWM_OUPUT+0x526>
    1816:	a3 c0       	rjmp	.+326    	; 0x195e <PWM_OUPUT+0x66c>

        OCR1A = 1019; // duty cycle 95%
    1818:	e8 e8       	ldi	r30, 0x88	; 136
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	8b ef       	ldi	r24, 0xFB	; 251
    181e:	93 e0       	ldi	r25, 0x03	; 3
    1820:	91 83       	std	Z+1, r25	; 0x01
    1822:	80 83       	st	Z, r24
        Temp[0] = '3';
    1824:	fe 01       	movw	r30, r28
    1826:	e9 5b       	subi	r30, 0xB9	; 185
    1828:	ff 4f       	sbci	r31, 0xFF	; 255
    182a:	83 e3       	ldi	r24, 0x33	; 51
    182c:	80 83       	st	Z, r24
        Temp[1] = '3';
    182e:	fe 01       	movw	r30, r28
    1830:	e9 5b       	subi	r30, 0xB9	; 185
    1832:	ff 4f       	sbci	r31, 0xFF	; 255
    1834:	83 e3       	ldi	r24, 0x33	; 51
    1836:	81 83       	std	Z+1, r24	; 0x01
        Temp[2] = 223;
    1838:	fe 01       	movw	r30, r28
    183a:	e9 5b       	subi	r30, 0xB9	; 185
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	8f ed       	ldi	r24, 0xDF	; 223
    1840:	82 83       	std	Z+2, r24	; 0x02
        Temp[3] = 'C';
    1842:	fe 01       	movw	r30, r28
    1844:	e9 5b       	subi	r30, 0xB9	; 185
    1846:	ff 4f       	sbci	r31, 0xFF	; 255
    1848:	83 e4       	ldi	r24, 0x43	; 67
    184a:	83 83       	std	Z+3, r24	; 0x03
        Temp[4] = ' ';
    184c:	fe 01       	movw	r30, r28
    184e:	e9 5b       	subi	r30, 0xB9	; 185
    1850:	ff 4f       	sbci	r31, 0xFF	; 255
    1852:	80 e2       	ldi	r24, 0x20	; 32
    1854:	84 83       	std	Z+4, r24	; 0x04
        Temp[5] = '\0';
    1856:	fe 01       	movw	r30, r28
    1858:	e9 5b       	subi	r30, 0xB9	; 185
    185a:	ff 4f       	sbci	r31, 0xFF	; 255
    185c:	15 82       	std	Z+5, r1	; 0x05
        LCD_DISPLAY(start);
    185e:	ce 01       	movw	r24, r28
    1860:	85 5a       	subi	r24, 0xA5	; 165
    1862:	9f 4f       	sbci	r25, 0xFF	; 255
    1864:	0e 94 61 08 	call	0x10c2	; 0x10c2 <LCD_DISPLAY>
        LCD_CMD(0xC0);
    1868:	80 ec       	ldi	r24, 0xC0	; 192
    186a:	0e 94 75 00 	call	0xea	; 0xea <LCD_CMD>
        LCD_DISPLAY(Temp);
    186e:	ce 01       	movw	r24, r28
    1870:	89 5b       	subi	r24, 0xB9	; 185
    1872:	9f 4f       	sbci	r25, 0xFF	; 255
    1874:	0e 94 61 08 	call	0x10c2	; 0x10c2 <LCD_DISPLAY>
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	a0 ea       	ldi	r26, 0xA0	; 160
    187e:	b1 e4       	ldi	r27, 0x41	; 65
    1880:	89 8f       	std	Y+25, r24	; 0x19
    1882:	9a 8f       	std	Y+26, r25	; 0x1a
    1884:	ab 8f       	std	Y+27, r26	; 0x1b
    1886:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1888:	69 8d       	ldd	r22, Y+25	; 0x19
    188a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    188c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    188e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	4a e7       	ldi	r20, 0x7A	; 122
    1896:	55 e4       	ldi	r21, 0x45	; 69
    1898:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	8d 8b       	std	Y+21, r24	; 0x15
    18a2:	9e 8b       	std	Y+22, r25	; 0x16
    18a4:	af 8b       	std	Y+23, r26	; 0x17
    18a6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18a8:	6d 89       	ldd	r22, Y+21	; 0x15
    18aa:	7e 89       	ldd	r23, Y+22	; 0x16
    18ac:	8f 89       	ldd	r24, Y+23	; 0x17
    18ae:	98 8d       	ldd	r25, Y+24	; 0x18
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	40 e8       	ldi	r20, 0x80	; 128
    18b6:	5f e3       	ldi	r21, 0x3F	; 63
    18b8:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__ltsf2>
    18bc:	88 23       	and	r24, r24
    18be:	2c f4       	brge	.+10     	; 0x18ca <PWM_OUPUT+0x5d8>
		__ticks = 1;
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	9c 8b       	std	Y+20, r25	; 0x14
    18c6:	8b 8b       	std	Y+19, r24	; 0x13
    18c8:	3f c0       	rjmp	.+126    	; 0x1948 <PWM_OUPUT+0x656>
	else if (__tmp > 65535)
    18ca:	6d 89       	ldd	r22, Y+21	; 0x15
    18cc:	7e 89       	ldd	r23, Y+22	; 0x16
    18ce:	8f 89       	ldd	r24, Y+23	; 0x17
    18d0:	98 8d       	ldd	r25, Y+24	; 0x18
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	3f ef       	ldi	r19, 0xFF	; 255
    18d6:	4f e7       	ldi	r20, 0x7F	; 127
    18d8:	57 e4       	ldi	r21, 0x47	; 71
    18da:	0e 94 8a 13 	call	0x2714	; 0x2714 <__gtsf2>
    18de:	18 16       	cp	r1, r24
    18e0:	4c f5       	brge	.+82     	; 0x1934 <PWM_OUPUT+0x642>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e2:	69 8d       	ldd	r22, Y+25	; 0x19
    18e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	40 e2       	ldi	r20, 0x20	; 32
    18f0:	51 e4       	ldi	r21, 0x41	; 65
    18f2:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
    18f6:	dc 01       	movw	r26, r24
    18f8:	cb 01       	movw	r24, r22
    18fa:	bc 01       	movw	r22, r24
    18fc:	cd 01       	movw	r24, r26
    18fe:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
    1902:	dc 01       	movw	r26, r24
    1904:	cb 01       	movw	r24, r22
    1906:	9c 8b       	std	Y+20, r25	; 0x14
    1908:	8b 8b       	std	Y+19, r24	; 0x13
    190a:	0f c0       	rjmp	.+30     	; 0x192a <PWM_OUPUT+0x638>
    190c:	80 e9       	ldi	r24, 0x90	; 144
    190e:	91 e0       	ldi	r25, 0x01	; 1
    1910:	9a 8b       	std	Y+18, r25	; 0x12
    1912:	89 8b       	std	Y+17, r24	; 0x11
    1914:	89 89       	ldd	r24, Y+17	; 0x11
    1916:	9a 89       	ldd	r25, Y+18	; 0x12
    1918:	01 97       	sbiw	r24, 0x01	; 1
    191a:	f1 f7       	brne	.-4      	; 0x1918 <PWM_OUPUT+0x626>
    191c:	9a 8b       	std	Y+18, r25	; 0x12
    191e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1920:	8b 89       	ldd	r24, Y+19	; 0x13
    1922:	9c 89       	ldd	r25, Y+20	; 0x14
    1924:	01 97       	sbiw	r24, 0x01	; 1
    1926:	9c 8b       	std	Y+20, r25	; 0x14
    1928:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    192a:	8b 89       	ldd	r24, Y+19	; 0x13
    192c:	9c 89       	ldd	r25, Y+20	; 0x14
    192e:	00 97       	sbiw	r24, 0x00	; 0
    1930:	69 f7       	brne	.-38     	; 0x190c <PWM_OUPUT+0x61a>
    1932:	b0 c0       	rjmp	.+352    	; 0x1a94 <PWM_OUPUT+0x7a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1934:	6d 89       	ldd	r22, Y+21	; 0x15
    1936:	7e 89       	ldd	r23, Y+22	; 0x16
    1938:	8f 89       	ldd	r24, Y+23	; 0x17
    193a:	98 8d       	ldd	r25, Y+24	; 0x18
    193c:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	9c 8b       	std	Y+20, r25	; 0x14
    1946:	8b 8b       	std	Y+19, r24	; 0x13
    1948:	8b 89       	ldd	r24, Y+19	; 0x13
    194a:	9c 89       	ldd	r25, Y+20	; 0x14
    194c:	98 8b       	std	Y+16, r25	; 0x10
    194e:	8f 87       	std	Y+15, r24	; 0x0f
    1950:	8f 85       	ldd	r24, Y+15	; 0x0f
    1952:	98 89       	ldd	r25, Y+16	; 0x10
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	f1 f7       	brne	.-4      	; 0x1954 <PWM_OUPUT+0x662>
    1958:	98 8b       	std	Y+16, r25	; 0x10
    195a:	8f 87       	std	Y+15, r24	; 0x0f
    195c:	9b c0       	rjmp	.+310    	; 0x1a94 <PWM_OUPUT+0x7a2>
        _delay_ms(20);
    }
    else{
        OCR1A = 0; // Duty cycle 0%
    195e:	e8 e8       	ldi	r30, 0x88	; 136
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	11 82       	std	Z+1, r1	; 0x01
    1964:	10 82       	st	Z, r1
        Temp[0] = 'O';
    1966:	fe 01       	movw	r30, r28
    1968:	e9 5b       	subi	r30, 0xB9	; 185
    196a:	ff 4f       	sbci	r31, 0xFF	; 255
    196c:	8f e4       	ldi	r24, 0x4F	; 79
    196e:	80 83       	st	Z, r24
        Temp[1] = 'F';
    1970:	fe 01       	movw	r30, r28
    1972:	e9 5b       	subi	r30, 0xB9	; 185
    1974:	ff 4f       	sbci	r31, 0xFF	; 255
    1976:	86 e4       	ldi	r24, 0x46	; 70
    1978:	81 83       	std	Z+1, r24	; 0x01
        Temp[2] = 'F';
    197a:	fe 01       	movw	r30, r28
    197c:	e9 5b       	subi	r30, 0xB9	; 185
    197e:	ff 4f       	sbci	r31, 0xFF	; 255
    1980:	86 e4       	ldi	r24, 0x46	; 70
    1982:	82 83       	std	Z+2, r24	; 0x02
        Temp[3] = ' ';
    1984:	fe 01       	movw	r30, r28
    1986:	e9 5b       	subi	r30, 0xB9	; 185
    1988:	ff 4f       	sbci	r31, 0xFF	; 255
    198a:	80 e2       	ldi	r24, 0x20	; 32
    198c:	83 83       	std	Z+3, r24	; 0x03
        Temp[4] = '\0';
    198e:	fe 01       	movw	r30, r28
    1990:	e9 5b       	subi	r30, 0xB9	; 185
    1992:	ff 4f       	sbci	r31, 0xFF	; 255
    1994:	14 82       	std	Z+4, r1	; 0x04
        LCD_DISPLAY(start);
    1996:	ce 01       	movw	r24, r28
    1998:	85 5a       	subi	r24, 0xA5	; 165
    199a:	9f 4f       	sbci	r25, 0xFF	; 255
    199c:	0e 94 61 08 	call	0x10c2	; 0x10c2 <LCD_DISPLAY>
        LCD_CMD(0xC0);
    19a0:	80 ec       	ldi	r24, 0xC0	; 192
    19a2:	0e 94 75 00 	call	0xea	; 0xea <LCD_CMD>
        LCD_DISPLAY(Temp);
    19a6:	ce 01       	movw	r24, r28
    19a8:	89 5b       	subi	r24, 0xB9	; 185
    19aa:	9f 4f       	sbci	r25, 0xFF	; 255
    19ac:	0e 94 61 08 	call	0x10c2	; 0x10c2 <LCD_DISPLAY>
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	a0 ea       	ldi	r26, 0xA0	; 160
    19b6:	b1 e4       	ldi	r27, 0x41	; 65
    19b8:	8b 87       	std	Y+11, r24	; 0x0b
    19ba:	9c 87       	std	Y+12, r25	; 0x0c
    19bc:	ad 87       	std	Y+13, r26	; 0x0d
    19be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	4a e7       	ldi	r20, 0x7A	; 122
    19ce:	55 e4       	ldi	r21, 0x45	; 69
    19d0:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	8f 83       	std	Y+7, r24	; 0x07
    19da:	98 87       	std	Y+8, r25	; 0x08
    19dc:	a9 87       	std	Y+9, r26	; 0x09
    19de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19e0:	6f 81       	ldd	r22, Y+7	; 0x07
    19e2:	78 85       	ldd	r23, Y+8	; 0x08
    19e4:	89 85       	ldd	r24, Y+9	; 0x09
    19e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	40 e8       	ldi	r20, 0x80	; 128
    19ee:	5f e3       	ldi	r21, 0x3F	; 63
    19f0:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__ltsf2>
    19f4:	88 23       	and	r24, r24
    19f6:	2c f4       	brge	.+10     	; 0x1a02 <PWM_OUPUT+0x710>
		__ticks = 1;
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	9e 83       	std	Y+6, r25	; 0x06
    19fe:	8d 83       	std	Y+5, r24	; 0x05
    1a00:	3f c0       	rjmp	.+126    	; 0x1a80 <PWM_OUPUT+0x78e>
	else if (__tmp > 65535)
    1a02:	6f 81       	ldd	r22, Y+7	; 0x07
    1a04:	78 85       	ldd	r23, Y+8	; 0x08
    1a06:	89 85       	ldd	r24, Y+9	; 0x09
    1a08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	3f ef       	ldi	r19, 0xFF	; 255
    1a0e:	4f e7       	ldi	r20, 0x7F	; 127
    1a10:	57 e4       	ldi	r21, 0x47	; 71
    1a12:	0e 94 8a 13 	call	0x2714	; 0x2714 <__gtsf2>
    1a16:	18 16       	cp	r1, r24
    1a18:	4c f5       	brge	.+82     	; 0x1a6c <PWM_OUPUT+0x77a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a20:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	40 e2       	ldi	r20, 0x20	; 32
    1a28:	51 e4       	ldi	r21, 0x41	; 65
    1a2a:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	bc 01       	movw	r22, r24
    1a34:	cd 01       	movw	r24, r26
    1a36:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	9e 83       	std	Y+6, r25	; 0x06
    1a40:	8d 83       	std	Y+5, r24	; 0x05
    1a42:	0f c0       	rjmp	.+30     	; 0x1a62 <PWM_OUPUT+0x770>
    1a44:	80 e9       	ldi	r24, 0x90	; 144
    1a46:	91 e0       	ldi	r25, 0x01	; 1
    1a48:	9c 83       	std	Y+4, r25	; 0x04
    1a4a:	8b 83       	std	Y+3, r24	; 0x03
    1a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	f1 f7       	brne	.-4      	; 0x1a50 <PWM_OUPUT+0x75e>
    1a54:	9c 83       	std	Y+4, r25	; 0x04
    1a56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a58:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	9e 83       	std	Y+6, r25	; 0x06
    1a60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a62:	8d 81       	ldd	r24, Y+5	; 0x05
    1a64:	9e 81       	ldd	r25, Y+6	; 0x06
    1a66:	00 97       	sbiw	r24, 0x00	; 0
    1a68:	69 f7       	brne	.-38     	; 0x1a44 <PWM_OUPUT+0x752>
    1a6a:	14 c0       	rjmp	.+40     	; 0x1a94 <PWM_OUPUT+0x7a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a6e:	78 85       	ldd	r23, Y+8	; 0x08
    1a70:	89 85       	ldd	r24, Y+9	; 0x09
    1a72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a74:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	9e 83       	std	Y+6, r25	; 0x06
    1a7e:	8d 83       	std	Y+5, r24	; 0x05
    1a80:	8d 81       	ldd	r24, Y+5	; 0x05
    1a82:	9e 81       	ldd	r25, Y+6	; 0x06
    1a84:	9a 83       	std	Y+2, r25	; 0x02
    1a86:	89 83       	std	Y+1, r24	; 0x01
    1a88:	89 81       	ldd	r24, Y+1	; 0x01
    1a8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	f1 f7       	brne	.-4      	; 0x1a8c <PWM_OUPUT+0x79a>
    1a90:	9a 83       	std	Y+2, r25	; 0x02
    1a92:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(20);
    }

}
    1a94:	c0 59       	subi	r28, 0x90	; 144
    1a96:	df 4f       	sbci	r29, 0xFF	; 255
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	f8 94       	cli
    1a9c:	de bf       	out	0x3e, r29	; 62
    1a9e:	0f be       	out	0x3f, r0	; 63
    1aa0:	cd bf       	out	0x3d, r28	; 61
    1aa2:	cf 91       	pop	r28
    1aa4:	df 91       	pop	r29
    1aa6:	1f 91       	pop	r17
    1aa8:	0f 91       	pop	r16
    1aaa:	08 95       	ret

00001aac <main>:
#include<util/delay.h>
#include "Activity1.h"
#include "Activity2.h"
#include"Activity3.h"
int main(void)
{
    1aac:	0f 93       	push	r16
    1aae:	1f 93       	push	r17
    1ab0:	df 93       	push	r29
    1ab2:	cf 93       	push	r28
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
    1ab8:	c8 54       	subi	r28, 0x48	; 72
    1aba:	d0 40       	sbci	r29, 0x00	; 0
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	f8 94       	cli
    1ac0:	de bf       	out	0x3e, r29	; 62
    1ac2:	0f be       	out	0x3f, r0	; 63
    1ac4:	cd bf       	out	0x3d, r28	; 61
    SEAT_CHECKING(); //Initializing Drivers seat
    1ac6:	0e 94 4b 00 	call	0x96	; 0x96 <SEAT_CHECKING>
    ADC_INITIALIZATION(); //Initializing ADC to accept temperature values
    1aca:	0e 94 17 09 	call	0x122e	; 0x122e <ADC_INITIALIZATION>
    TIMER_INITIALIZATION(); //Initializing Timer by dividing clock with 64 prescale
    1ace:	0e 94 5d 09 	call	0x12ba	; 0x12ba <TIMER_INITIALIZATION>
    LCD_INITIALIZATION(); //Initializing LCD
    1ad2:	0e 94 57 07 	call	0xeae	; 0xeae <LCD_INITIALIZATION>

    uint16_t read;

	while(1)
    {
        if(SEAT_CHECK)
    1ad6:	e9 e2       	ldi	r30, 0x29	; 41
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	88 2f       	mov	r24, r24
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	82 70       	andi	r24, 0x02	; 2
    1ae2:	90 70       	andi	r25, 0x00	; 0
    1ae4:	00 97       	sbiw	r24, 0x00	; 0
    1ae6:	09 f0       	breq	.+2      	; 0x1aea <main+0x3e>
    1ae8:	a4 c1       	rjmp	.+840    	; 0x1e32 <main+0x386>
        {
            PORTD|=(1<<PD2);
    1aea:	ab e2       	ldi	r26, 0x2B	; 43
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	eb e2       	ldi	r30, 0x2B	; 43
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	84 60       	ori	r24, 0x04	; 4
    1af6:	8c 93       	st	X, r24
            if(HEATER_ON){
    1af8:	e9 e2       	ldi	r30, 0x29	; 41
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	88 2f       	mov	r24, r24
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	84 70       	andi	r24, 0x04	; 4
    1b04:	90 70       	andi	r25, 0x00	; 0
    1b06:	00 97       	sbiw	r24, 0x00	; 0
    1b08:	09 f4       	brne	.+2      	; 0x1b0c <main+0x60>
    1b0a:	9e c0       	rjmp	.+316    	; 0x1c48 <main+0x19c>
                LED_ON;
    1b0c:	ab e2       	ldi	r26, 0x2B	; 43
    1b0e:	b0 e0       	ldi	r27, 0x00	; 0
    1b10:	eb e2       	ldi	r30, 0x2B	; 43
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	80 81       	ld	r24, Z
    1b16:	81 60       	ori	r24, 0x01	; 1
    1b18:	8c 93       	st	X, r24
    1b1a:	fe 01       	movw	r30, r28
    1b1c:	ed 5b       	subi	r30, 0xBD	; 189
    1b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	a8 e4       	ldi	r26, 0x48	; 72
    1b26:	b3 e4       	ldi	r27, 0x43	; 67
    1b28:	80 83       	st	Z, r24
    1b2a:	91 83       	std	Z+1, r25	; 0x01
    1b2c:	a2 83       	std	Z+2, r26	; 0x02
    1b2e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b30:	8e 01       	movw	r16, r28
    1b32:	01 5c       	subi	r16, 0xC1	; 193
    1b34:	1f 4f       	sbci	r17, 0xFF	; 255
    1b36:	fe 01       	movw	r30, r28
    1b38:	ed 5b       	subi	r30, 0xBD	; 189
    1b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3c:	60 81       	ld	r22, Z
    1b3e:	71 81       	ldd	r23, Z+1	; 0x01
    1b40:	82 81       	ldd	r24, Z+2	; 0x02
    1b42:	93 81       	ldd	r25, Z+3	; 0x03
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	4a e7       	ldi	r20, 0x7A	; 122
    1b4a:	55 e4       	ldi	r21, 0x45	; 69
    1b4c:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	f8 01       	movw	r30, r16
    1b56:	80 83       	st	Z, r24
    1b58:	91 83       	std	Z+1, r25	; 0x01
    1b5a:	a2 83       	std	Z+2, r26	; 0x02
    1b5c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b5e:	fe 01       	movw	r30, r28
    1b60:	ff 96       	adiw	r30, 0x3f	; 63
    1b62:	60 81       	ld	r22, Z
    1b64:	71 81       	ldd	r23, Z+1	; 0x01
    1b66:	82 81       	ldd	r24, Z+2	; 0x02
    1b68:	93 81       	ldd	r25, Z+3	; 0x03
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	40 e8       	ldi	r20, 0x80	; 128
    1b70:	5f e3       	ldi	r21, 0x3F	; 63
    1b72:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__ltsf2>
    1b76:	88 23       	and	r24, r24
    1b78:	2c f4       	brge	.+10     	; 0x1b84 <main+0xd8>
		__ticks = 1;
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	9e af       	std	Y+62, r25	; 0x3e
    1b80:	8d af       	std	Y+61, r24	; 0x3d
    1b82:	46 c0       	rjmp	.+140    	; 0x1c10 <main+0x164>
	else if (__tmp > 65535)
    1b84:	fe 01       	movw	r30, r28
    1b86:	ff 96       	adiw	r30, 0x3f	; 63
    1b88:	60 81       	ld	r22, Z
    1b8a:	71 81       	ldd	r23, Z+1	; 0x01
    1b8c:	82 81       	ldd	r24, Z+2	; 0x02
    1b8e:	93 81       	ldd	r25, Z+3	; 0x03
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	3f ef       	ldi	r19, 0xFF	; 255
    1b94:	4f e7       	ldi	r20, 0x7F	; 127
    1b96:	57 e4       	ldi	r21, 0x47	; 71
    1b98:	0e 94 8a 13 	call	0x2714	; 0x2714 <__gtsf2>
    1b9c:	18 16       	cp	r1, r24
    1b9e:	64 f5       	brge	.+88     	; 0x1bf8 <main+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba0:	fe 01       	movw	r30, r28
    1ba2:	ed 5b       	subi	r30, 0xBD	; 189
    1ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba6:	60 81       	ld	r22, Z
    1ba8:	71 81       	ldd	r23, Z+1	; 0x01
    1baa:	82 81       	ldd	r24, Z+2	; 0x02
    1bac:	93 81       	ldd	r25, Z+3	; 0x03
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	40 e2       	ldi	r20, 0x20	; 32
    1bb4:	51 e4       	ldi	r21, 0x41	; 65
    1bb6:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	bc 01       	movw	r22, r24
    1bc0:	cd 01       	movw	r24, r26
    1bc2:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	cb 01       	movw	r24, r22
    1bca:	9e af       	std	Y+62, r25	; 0x3e
    1bcc:	8d af       	std	Y+61, r24	; 0x3d
    1bce:	0f c0       	rjmp	.+30     	; 0x1bee <main+0x142>
    1bd0:	80 e9       	ldi	r24, 0x90	; 144
    1bd2:	91 e0       	ldi	r25, 0x01	; 1
    1bd4:	9c af       	std	Y+60, r25	; 0x3c
    1bd6:	8b af       	std	Y+59, r24	; 0x3b
    1bd8:	8b ad       	ldd	r24, Y+59	; 0x3b
    1bda:	9c ad       	ldd	r25, Y+60	; 0x3c
    1bdc:	01 97       	sbiw	r24, 0x01	; 1
    1bde:	f1 f7       	brne	.-4      	; 0x1bdc <main+0x130>
    1be0:	9c af       	std	Y+60, r25	; 0x3c
    1be2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1be6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1be8:	01 97       	sbiw	r24, 0x01	; 1
    1bea:	9e af       	std	Y+62, r25	; 0x3e
    1bec:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bee:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bf0:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bf2:	00 97       	sbiw	r24, 0x00	; 0
    1bf4:	69 f7       	brne	.-38     	; 0x1bd0 <main+0x124>
    1bf6:	16 c0       	rjmp	.+44     	; 0x1c24 <main+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bf8:	fe 01       	movw	r30, r28
    1bfa:	ff 96       	adiw	r30, 0x3f	; 63
    1bfc:	60 81       	ld	r22, Z
    1bfe:	71 81       	ldd	r23, Z+1	; 0x01
    1c00:	82 81       	ldd	r24, Z+2	; 0x02
    1c02:	93 81       	ldd	r25, Z+3	; 0x03
    1c04:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	9e af       	std	Y+62, r25	; 0x3e
    1c0e:	8d af       	std	Y+61, r24	; 0x3d
    1c10:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c12:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c14:	9a af       	std	Y+58, r25	; 0x3a
    1c16:	89 af       	std	Y+57, r24	; 0x39
    1c18:	89 ad       	ldd	r24, Y+57	; 0x39
    1c1a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c1c:	01 97       	sbiw	r24, 0x01	; 1
    1c1e:	f1 f7       	brne	.-4      	; 0x1c1c <main+0x170>
    1c20:	9a af       	std	Y+58, r25	; 0x3a
    1c22:	89 af       	std	Y+57, r24	; 0x39
                _delay_ms(200);
                CLEAR_LCD();
    1c24:	0e 94 8c 08 	call	0x1118	; 0x1118 <CLEAR_LCD>
                read=SENSE_ADC(0);
    1c28:	80 e0       	ldi	r24, 0x00	; 0
    1c2a:	0e 94 26 09 	call	0x124c	; 0x124c <SENSE_ADC>
    1c2e:	fe 01       	movw	r30, r28
    1c30:	e9 5b       	subi	r30, 0xB9	; 185
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	91 83       	std	Z+1, r25	; 0x01
    1c36:	80 83       	st	Z, r24
                PWM_OUPUT(read);
    1c38:	fe 01       	movw	r30, r28
    1c3a:	e9 5b       	subi	r30, 0xB9	; 185
    1c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3e:	80 81       	ld	r24, Z
    1c40:	91 81       	ldd	r25, Z+1	; 0x01
    1c42:	0e 94 79 09 	call	0x12f2	; 0x12f2 <PWM_OUPUT>
    1c46:	47 cf       	rjmp	.-370    	; 0x1ad6 <main+0x2a>

            }
            else
                {
                    LED_OFF;
    1c48:	ab e2       	ldi	r26, 0x2B	; 43
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	eb e2       	ldi	r30, 0x2B	; 43
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	8e 7f       	andi	r24, 0xFE	; 254
    1c54:	8c 93       	st	X, r24
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	a8 e4       	ldi	r26, 0x48	; 72
    1c5c:	b3 e4       	ldi	r27, 0x43	; 67
    1c5e:	8d ab       	std	Y+53, r24	; 0x35
    1c60:	9e ab       	std	Y+54, r25	; 0x36
    1c62:	af ab       	std	Y+55, r26	; 0x37
    1c64:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c66:	6d a9       	ldd	r22, Y+53	; 0x35
    1c68:	7e a9       	ldd	r23, Y+54	; 0x36
    1c6a:	8f a9       	ldd	r24, Y+55	; 0x37
    1c6c:	98 ad       	ldd	r25, Y+56	; 0x38
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	4a e7       	ldi	r20, 0x7A	; 122
    1c74:	55 e4       	ldi	r21, 0x45	; 69
    1c76:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	89 ab       	std	Y+49, r24	; 0x31
    1c80:	9a ab       	std	Y+50, r25	; 0x32
    1c82:	ab ab       	std	Y+51, r26	; 0x33
    1c84:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c86:	69 a9       	ldd	r22, Y+49	; 0x31
    1c88:	7a a9       	ldd	r23, Y+50	; 0x32
    1c8a:	8b a9       	ldd	r24, Y+51	; 0x33
    1c8c:	9c a9       	ldd	r25, Y+52	; 0x34
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	40 e8       	ldi	r20, 0x80	; 128
    1c94:	5f e3       	ldi	r21, 0x3F	; 63
    1c96:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__ltsf2>
    1c9a:	88 23       	and	r24, r24
    1c9c:	2c f4       	brge	.+10     	; 0x1ca8 <main+0x1fc>
		__ticks = 1;
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	98 ab       	std	Y+48, r25	; 0x30
    1ca4:	8f a7       	std	Y+47, r24	; 0x2f
    1ca6:	3f c0       	rjmp	.+126    	; 0x1d26 <main+0x27a>
	else if (__tmp > 65535)
    1ca8:	69 a9       	ldd	r22, Y+49	; 0x31
    1caa:	7a a9       	ldd	r23, Y+50	; 0x32
    1cac:	8b a9       	ldd	r24, Y+51	; 0x33
    1cae:	9c a9       	ldd	r25, Y+52	; 0x34
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	3f ef       	ldi	r19, 0xFF	; 255
    1cb4:	4f e7       	ldi	r20, 0x7F	; 127
    1cb6:	57 e4       	ldi	r21, 0x47	; 71
    1cb8:	0e 94 8a 13 	call	0x2714	; 0x2714 <__gtsf2>
    1cbc:	18 16       	cp	r1, r24
    1cbe:	4c f5       	brge	.+82     	; 0x1d12 <main+0x266>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc0:	6d a9       	ldd	r22, Y+53	; 0x35
    1cc2:	7e a9       	ldd	r23, Y+54	; 0x36
    1cc4:	8f a9       	ldd	r24, Y+55	; 0x37
    1cc6:	98 ad       	ldd	r25, Y+56	; 0x38
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	40 e2       	ldi	r20, 0x20	; 32
    1cce:	51 e4       	ldi	r21, 0x41	; 65
    1cd0:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	bc 01       	movw	r22, r24
    1cda:	cd 01       	movw	r24, r26
    1cdc:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	98 ab       	std	Y+48, r25	; 0x30
    1ce6:	8f a7       	std	Y+47, r24	; 0x2f
    1ce8:	0f c0       	rjmp	.+30     	; 0x1d08 <main+0x25c>
    1cea:	80 e9       	ldi	r24, 0x90	; 144
    1cec:	91 e0       	ldi	r25, 0x01	; 1
    1cee:	9e a7       	std	Y+46, r25	; 0x2e
    1cf0:	8d a7       	std	Y+45, r24	; 0x2d
    1cf2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1cf4:	9e a5       	ldd	r25, Y+46	; 0x2e
    1cf6:	01 97       	sbiw	r24, 0x01	; 1
    1cf8:	f1 f7       	brne	.-4      	; 0x1cf6 <main+0x24a>
    1cfa:	9e a7       	std	Y+46, r25	; 0x2e
    1cfc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cfe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d00:	98 a9       	ldd	r25, Y+48	; 0x30
    1d02:	01 97       	sbiw	r24, 0x01	; 1
    1d04:	98 ab       	std	Y+48, r25	; 0x30
    1d06:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d08:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d0a:	98 a9       	ldd	r25, Y+48	; 0x30
    1d0c:	00 97       	sbiw	r24, 0x00	; 0
    1d0e:	69 f7       	brne	.-38     	; 0x1cea <main+0x23e>
    1d10:	14 c0       	rjmp	.+40     	; 0x1d3a <main+0x28e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d12:	69 a9       	ldd	r22, Y+49	; 0x31
    1d14:	7a a9       	ldd	r23, Y+50	; 0x32
    1d16:	8b a9       	ldd	r24, Y+51	; 0x33
    1d18:	9c a9       	ldd	r25, Y+52	; 0x34
    1d1a:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	98 ab       	std	Y+48, r25	; 0x30
    1d24:	8f a7       	std	Y+47, r24	; 0x2f
    1d26:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d28:	98 a9       	ldd	r25, Y+48	; 0x30
    1d2a:	9c a7       	std	Y+44, r25	; 0x2c
    1d2c:	8b a7       	std	Y+43, r24	; 0x2b
    1d2e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d30:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	f1 f7       	brne	.-4      	; 0x1d32 <main+0x286>
    1d36:	9c a7       	std	Y+44, r25	; 0x2c
    1d38:	8b a7       	std	Y+43, r24	; 0x2b
                     _delay_ms(200);
                    HEATER_OFF;
    1d3a:	ab e2       	ldi	r26, 0x2B	; 43
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	eb e2       	ldi	r30, 0x2B	; 43
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	8b 7f       	andi	r24, 0xFB	; 251
    1d46:	8c 93       	st	X, r24
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	a8 e4       	ldi	r26, 0x48	; 72
    1d4e:	b3 e4       	ldi	r27, 0x43	; 67
    1d50:	8f a3       	std	Y+39, r24	; 0x27
    1d52:	98 a7       	std	Y+40, r25	; 0x28
    1d54:	a9 a7       	std	Y+41, r26	; 0x29
    1d56:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d58:	6f a1       	ldd	r22, Y+39	; 0x27
    1d5a:	78 a5       	ldd	r23, Y+40	; 0x28
    1d5c:	89 a5       	ldd	r24, Y+41	; 0x29
    1d5e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	4a e7       	ldi	r20, 0x7A	; 122
    1d66:	55 e4       	ldi	r21, 0x45	; 69
    1d68:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	8b a3       	std	Y+35, r24	; 0x23
    1d72:	9c a3       	std	Y+36, r25	; 0x24
    1d74:	ad a3       	std	Y+37, r26	; 0x25
    1d76:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d78:	6b a1       	ldd	r22, Y+35	; 0x23
    1d7a:	7c a1       	ldd	r23, Y+36	; 0x24
    1d7c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d7e:	9e a1       	ldd	r25, Y+38	; 0x26
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	40 e8       	ldi	r20, 0x80	; 128
    1d86:	5f e3       	ldi	r21, 0x3F	; 63
    1d88:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__ltsf2>
    1d8c:	88 23       	and	r24, r24
    1d8e:	2c f4       	brge	.+10     	; 0x1d9a <main+0x2ee>
		__ticks = 1;
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	9a a3       	std	Y+34, r25	; 0x22
    1d96:	89 a3       	std	Y+33, r24	; 0x21
    1d98:	3f c0       	rjmp	.+126    	; 0x1e18 <main+0x36c>
	else if (__tmp > 65535)
    1d9a:	6b a1       	ldd	r22, Y+35	; 0x23
    1d9c:	7c a1       	ldd	r23, Y+36	; 0x24
    1d9e:	8d a1       	ldd	r24, Y+37	; 0x25
    1da0:	9e a1       	ldd	r25, Y+38	; 0x26
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	3f ef       	ldi	r19, 0xFF	; 255
    1da6:	4f e7       	ldi	r20, 0x7F	; 127
    1da8:	57 e4       	ldi	r21, 0x47	; 71
    1daa:	0e 94 8a 13 	call	0x2714	; 0x2714 <__gtsf2>
    1dae:	18 16       	cp	r1, r24
    1db0:	4c f5       	brge	.+82     	; 0x1e04 <main+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db2:	6f a1       	ldd	r22, Y+39	; 0x27
    1db4:	78 a5       	ldd	r23, Y+40	; 0x28
    1db6:	89 a5       	ldd	r24, Y+41	; 0x29
    1db8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	40 e2       	ldi	r20, 0x20	; 32
    1dc0:	51 e4       	ldi	r21, 0x41	; 65
    1dc2:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	bc 01       	movw	r22, r24
    1dcc:	cd 01       	movw	r24, r26
    1dce:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	9a a3       	std	Y+34, r25	; 0x22
    1dd8:	89 a3       	std	Y+33, r24	; 0x21
    1dda:	0f c0       	rjmp	.+30     	; 0x1dfa <main+0x34e>
    1ddc:	80 e9       	ldi	r24, 0x90	; 144
    1dde:	91 e0       	ldi	r25, 0x01	; 1
    1de0:	98 a3       	std	Y+32, r25	; 0x20
    1de2:	8f 8f       	std	Y+31, r24	; 0x1f
    1de4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1de6:	98 a1       	ldd	r25, Y+32	; 0x20
    1de8:	01 97       	sbiw	r24, 0x01	; 1
    1dea:	f1 f7       	brne	.-4      	; 0x1de8 <main+0x33c>
    1dec:	98 a3       	std	Y+32, r25	; 0x20
    1dee:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df0:	89 a1       	ldd	r24, Y+33	; 0x21
    1df2:	9a a1       	ldd	r25, Y+34	; 0x22
    1df4:	01 97       	sbiw	r24, 0x01	; 1
    1df6:	9a a3       	std	Y+34, r25	; 0x22
    1df8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dfa:	89 a1       	ldd	r24, Y+33	; 0x21
    1dfc:	9a a1       	ldd	r25, Y+34	; 0x22
    1dfe:	00 97       	sbiw	r24, 0x00	; 0
    1e00:	69 f7       	brne	.-38     	; 0x1ddc <main+0x330>
    1e02:	14 c0       	rjmp	.+40     	; 0x1e2c <main+0x380>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e04:	6b a1       	ldd	r22, Y+35	; 0x23
    1e06:	7c a1       	ldd	r23, Y+36	; 0x24
    1e08:	8d a1       	ldd	r24, Y+37	; 0x25
    1e0a:	9e a1       	ldd	r25, Y+38	; 0x26
    1e0c:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	9a a3       	std	Y+34, r25	; 0x22
    1e16:	89 a3       	std	Y+33, r24	; 0x21
    1e18:	89 a1       	ldd	r24, Y+33	; 0x21
    1e1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e1c:	9e 8f       	std	Y+30, r25	; 0x1e
    1e1e:	8d 8f       	std	Y+29, r24	; 0x1d
    1e20:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e22:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e24:	01 97       	sbiw	r24, 0x01	; 1
    1e26:	f1 f7       	brne	.-4      	; 0x1e24 <main+0x378>
    1e28:	9e 8f       	std	Y+30, r25	; 0x1e
    1e2a:	8d 8f       	std	Y+29, r24	; 0x1d
                    _delay_ms(200);
                    CLEAR_LCD();
    1e2c:	0e 94 8c 08 	call	0x1118	; 0x1118 <CLEAR_LCD>
    1e30:	52 ce       	rjmp	.-860    	; 0x1ad6 <main+0x2a>
                }
        }
        else{
            LED_OFF;
    1e32:	ab e2       	ldi	r26, 0x2B	; 43
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	eb e2       	ldi	r30, 0x2B	; 43
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	8e 7f       	andi	r24, 0xFE	; 254
    1e3e:	8c 93       	st	X, r24
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	a8 e4       	ldi	r26, 0x48	; 72
    1e46:	b3 e4       	ldi	r27, 0x43	; 67
    1e48:	89 8f       	std	Y+25, r24	; 0x19
    1e4a:	9a 8f       	std	Y+26, r25	; 0x1a
    1e4c:	ab 8f       	std	Y+27, r26	; 0x1b
    1e4e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e50:	69 8d       	ldd	r22, Y+25	; 0x19
    1e52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	4a e7       	ldi	r20, 0x7A	; 122
    1e5e:	55 e4       	ldi	r21, 0x45	; 69
    1e60:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	8d 8b       	std	Y+21, r24	; 0x15
    1e6a:	9e 8b       	std	Y+22, r25	; 0x16
    1e6c:	af 8b       	std	Y+23, r26	; 0x17
    1e6e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e70:	6d 89       	ldd	r22, Y+21	; 0x15
    1e72:	7e 89       	ldd	r23, Y+22	; 0x16
    1e74:	8f 89       	ldd	r24, Y+23	; 0x17
    1e76:	98 8d       	ldd	r25, Y+24	; 0x18
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	40 e8       	ldi	r20, 0x80	; 128
    1e7e:	5f e3       	ldi	r21, 0x3F	; 63
    1e80:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__ltsf2>
    1e84:	88 23       	and	r24, r24
    1e86:	2c f4       	brge	.+10     	; 0x1e92 <main+0x3e6>
		__ticks = 1;
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	9c 8b       	std	Y+20, r25	; 0x14
    1e8e:	8b 8b       	std	Y+19, r24	; 0x13
    1e90:	3f c0       	rjmp	.+126    	; 0x1f10 <main+0x464>
	else if (__tmp > 65535)
    1e92:	6d 89       	ldd	r22, Y+21	; 0x15
    1e94:	7e 89       	ldd	r23, Y+22	; 0x16
    1e96:	8f 89       	ldd	r24, Y+23	; 0x17
    1e98:	98 8d       	ldd	r25, Y+24	; 0x18
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	3f ef       	ldi	r19, 0xFF	; 255
    1e9e:	4f e7       	ldi	r20, 0x7F	; 127
    1ea0:	57 e4       	ldi	r21, 0x47	; 71
    1ea2:	0e 94 8a 13 	call	0x2714	; 0x2714 <__gtsf2>
    1ea6:	18 16       	cp	r1, r24
    1ea8:	4c f5       	brge	.+82     	; 0x1efc <main+0x450>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eaa:	69 8d       	ldd	r22, Y+25	; 0x19
    1eac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	40 e2       	ldi	r20, 0x20	; 32
    1eb8:	51 e4       	ldi	r21, 0x41	; 65
    1eba:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	bc 01       	movw	r22, r24
    1ec4:	cd 01       	movw	r24, r26
    1ec6:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	9c 8b       	std	Y+20, r25	; 0x14
    1ed0:	8b 8b       	std	Y+19, r24	; 0x13
    1ed2:	0f c0       	rjmp	.+30     	; 0x1ef2 <main+0x446>
    1ed4:	80 e9       	ldi	r24, 0x90	; 144
    1ed6:	91 e0       	ldi	r25, 0x01	; 1
    1ed8:	9a 8b       	std	Y+18, r25	; 0x12
    1eda:	89 8b       	std	Y+17, r24	; 0x11
    1edc:	89 89       	ldd	r24, Y+17	; 0x11
    1ede:	9a 89       	ldd	r25, Y+18	; 0x12
    1ee0:	01 97       	sbiw	r24, 0x01	; 1
    1ee2:	f1 f7       	brne	.-4      	; 0x1ee0 <main+0x434>
    1ee4:	9a 8b       	std	Y+18, r25	; 0x12
    1ee6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee8:	8b 89       	ldd	r24, Y+19	; 0x13
    1eea:	9c 89       	ldd	r25, Y+20	; 0x14
    1eec:	01 97       	sbiw	r24, 0x01	; 1
    1eee:	9c 8b       	std	Y+20, r25	; 0x14
    1ef0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef6:	00 97       	sbiw	r24, 0x00	; 0
    1ef8:	69 f7       	brne	.-38     	; 0x1ed4 <main+0x428>
    1efa:	14 c0       	rjmp	.+40     	; 0x1f24 <main+0x478>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1efc:	6d 89       	ldd	r22, Y+21	; 0x15
    1efe:	7e 89       	ldd	r23, Y+22	; 0x16
    1f00:	8f 89       	ldd	r24, Y+23	; 0x17
    1f02:	98 8d       	ldd	r25, Y+24	; 0x18
    1f04:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	9c 8b       	std	Y+20, r25	; 0x14
    1f0e:	8b 8b       	std	Y+19, r24	; 0x13
    1f10:	8b 89       	ldd	r24, Y+19	; 0x13
    1f12:	9c 89       	ldd	r25, Y+20	; 0x14
    1f14:	98 8b       	std	Y+16, r25	; 0x10
    1f16:	8f 87       	std	Y+15, r24	; 0x0f
    1f18:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f1a:	98 89       	ldd	r25, Y+16	; 0x10
    1f1c:	01 97       	sbiw	r24, 0x01	; 1
    1f1e:	f1 f7       	brne	.-4      	; 0x1f1c <main+0x470>
    1f20:	98 8b       	std	Y+16, r25	; 0x10
    1f22:	8f 87       	std	Y+15, r24	; 0x0f
            _delay_ms(200);
            HEATER_OFF;
    1f24:	ab e2       	ldi	r26, 0x2B	; 43
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	eb e2       	ldi	r30, 0x2B	; 43
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	80 81       	ld	r24, Z
    1f2e:	8b 7f       	andi	r24, 0xFB	; 251
    1f30:	8c 93       	st	X, r24
    1f32:	80 e0       	ldi	r24, 0x00	; 0
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	a8 e4       	ldi	r26, 0x48	; 72
    1f38:	b3 e4       	ldi	r27, 0x43	; 67
    1f3a:	8b 87       	std	Y+11, r24	; 0x0b
    1f3c:	9c 87       	std	Y+12, r25	; 0x0c
    1f3e:	ad 87       	std	Y+13, r26	; 0x0d
    1f40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	4a e7       	ldi	r20, 0x7A	; 122
    1f50:	55 e4       	ldi	r21, 0x45	; 69
    1f52:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	8f 83       	std	Y+7, r24	; 0x07
    1f5c:	98 87       	std	Y+8, r25	; 0x08
    1f5e:	a9 87       	std	Y+9, r26	; 0x09
    1f60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f62:	6f 81       	ldd	r22, Y+7	; 0x07
    1f64:	78 85       	ldd	r23, Y+8	; 0x08
    1f66:	89 85       	ldd	r24, Y+9	; 0x09
    1f68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	40 e8       	ldi	r20, 0x80	; 128
    1f70:	5f e3       	ldi	r21, 0x3F	; 63
    1f72:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__ltsf2>
    1f76:	88 23       	and	r24, r24
    1f78:	2c f4       	brge	.+10     	; 0x1f84 <main+0x4d8>
		__ticks = 1;
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	9e 83       	std	Y+6, r25	; 0x06
    1f80:	8d 83       	std	Y+5, r24	; 0x05
    1f82:	3f c0       	rjmp	.+126    	; 0x2002 <main+0x556>
	else if (__tmp > 65535)
    1f84:	6f 81       	ldd	r22, Y+7	; 0x07
    1f86:	78 85       	ldd	r23, Y+8	; 0x08
    1f88:	89 85       	ldd	r24, Y+9	; 0x09
    1f8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	3f ef       	ldi	r19, 0xFF	; 255
    1f90:	4f e7       	ldi	r20, 0x7F	; 127
    1f92:	57 e4       	ldi	r21, 0x47	; 71
    1f94:	0e 94 8a 13 	call	0x2714	; 0x2714 <__gtsf2>
    1f98:	18 16       	cp	r1, r24
    1f9a:	4c f5       	brge	.+82     	; 0x1fee <main+0x542>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fa0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fa2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	40 e2       	ldi	r20, 0x20	; 32
    1faa:	51 e4       	ldi	r21, 0x41	; 65
    1fac:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	bc 01       	movw	r22, r24
    1fb6:	cd 01       	movw	r24, r26
    1fb8:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	9e 83       	std	Y+6, r25	; 0x06
    1fc2:	8d 83       	std	Y+5, r24	; 0x05
    1fc4:	0f c0       	rjmp	.+30     	; 0x1fe4 <main+0x538>
    1fc6:	80 e9       	ldi	r24, 0x90	; 144
    1fc8:	91 e0       	ldi	r25, 0x01	; 1
    1fca:	9c 83       	std	Y+4, r25	; 0x04
    1fcc:	8b 83       	std	Y+3, r24	; 0x03
    1fce:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd2:	01 97       	sbiw	r24, 0x01	; 1
    1fd4:	f1 f7       	brne	.-4      	; 0x1fd2 <main+0x526>
    1fd6:	9c 83       	std	Y+4, r25	; 0x04
    1fd8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fda:	8d 81       	ldd	r24, Y+5	; 0x05
    1fdc:	9e 81       	ldd	r25, Y+6	; 0x06
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	9e 83       	std	Y+6, r25	; 0x06
    1fe2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe8:	00 97       	sbiw	r24, 0x00	; 0
    1fea:	69 f7       	brne	.-38     	; 0x1fc6 <main+0x51a>
    1fec:	14 c0       	rjmp	.+40     	; 0x2016 <main+0x56a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fee:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff0:	78 85       	ldd	r23, Y+8	; 0x08
    1ff2:	89 85       	ldd	r24, Y+9	; 0x09
    1ff4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff6:	0e 94 0e 10 	call	0x201c	; 0x201c <__fixunssfsi>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	9e 83       	std	Y+6, r25	; 0x06
    2000:	8d 83       	std	Y+5, r24	; 0x05
    2002:	8d 81       	ldd	r24, Y+5	; 0x05
    2004:	9e 81       	ldd	r25, Y+6	; 0x06
    2006:	9a 83       	std	Y+2, r25	; 0x02
    2008:	89 83       	std	Y+1, r24	; 0x01
    200a:	89 81       	ldd	r24, Y+1	; 0x01
    200c:	9a 81       	ldd	r25, Y+2	; 0x02
    200e:	01 97       	sbiw	r24, 0x01	; 1
    2010:	f1 f7       	brne	.-4      	; 0x200e <main+0x562>
    2012:	9a 83       	std	Y+2, r25	; 0x02
    2014:	89 83       	std	Y+1, r24	; 0x01
            _delay_ms(200);
            CLEAR_LCD();
    2016:	0e 94 8c 08 	call	0x1118	; 0x1118 <CLEAR_LCD>
    201a:	5d cd       	rjmp	.-1350   	; 0x1ad6 <main+0x2a>

0000201c <__fixunssfsi>:
    201c:	ef 92       	push	r14
    201e:	ff 92       	push	r15
    2020:	0f 93       	push	r16
    2022:	1f 93       	push	r17
    2024:	7b 01       	movw	r14, r22
    2026:	8c 01       	movw	r16, r24
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	40 e0       	ldi	r20, 0x00	; 0
    202e:	5f e4       	ldi	r21, 0x4F	; 79
    2030:	0e 94 ba 13 	call	0x2774	; 0x2774 <__gesf2>
    2034:	88 23       	and	r24, r24
    2036:	8c f0       	brlt	.+34     	; 0x205a <__fixunssfsi+0x3e>
    2038:	c8 01       	movw	r24, r16
    203a:	b7 01       	movw	r22, r14
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	40 e0       	ldi	r20, 0x00	; 0
    2042:	5f e4       	ldi	r21, 0x4F	; 79
    2044:	0e 94 86 11 	call	0x230c	; 0x230c <__subsf3>
    2048:	0e 94 1a 14 	call	0x2834	; 0x2834 <__fixsfsi>
    204c:	9b 01       	movw	r18, r22
    204e:	ac 01       	movw	r20, r24
    2050:	20 50       	subi	r18, 0x00	; 0
    2052:	30 40       	sbci	r19, 0x00	; 0
    2054:	40 40       	sbci	r20, 0x00	; 0
    2056:	50 48       	sbci	r21, 0x80	; 128
    2058:	06 c0       	rjmp	.+12     	; 0x2066 <__fixunssfsi+0x4a>
    205a:	c8 01       	movw	r24, r16
    205c:	b7 01       	movw	r22, r14
    205e:	0e 94 1a 14 	call	0x2834	; 0x2834 <__fixsfsi>
    2062:	9b 01       	movw	r18, r22
    2064:	ac 01       	movw	r20, r24
    2066:	b9 01       	movw	r22, r18
    2068:	ca 01       	movw	r24, r20
    206a:	1f 91       	pop	r17
    206c:	0f 91       	pop	r16
    206e:	ff 90       	pop	r15
    2070:	ef 90       	pop	r14
    2072:	08 95       	ret

00002074 <_fpadd_parts>:
    2074:	a0 e0       	ldi	r26, 0x00	; 0
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	e0 e4       	ldi	r30, 0x40	; 64
    207a:	f0 e1       	ldi	r31, 0x10	; 16
    207c:	0c 94 14 16 	jmp	0x2c28	; 0x2c28 <__prologue_saves__>
    2080:	dc 01       	movw	r26, r24
    2082:	2b 01       	movw	r4, r22
    2084:	fa 01       	movw	r30, r20
    2086:	9c 91       	ld	r25, X
    2088:	92 30       	cpi	r25, 0x02	; 2
    208a:	08 f4       	brcc	.+2      	; 0x208e <_fpadd_parts+0x1a>
    208c:	39 c1       	rjmp	.+626    	; 0x2300 <_fpadd_parts+0x28c>
    208e:	eb 01       	movw	r28, r22
    2090:	88 81       	ld	r24, Y
    2092:	82 30       	cpi	r24, 0x02	; 2
    2094:	08 f4       	brcc	.+2      	; 0x2098 <_fpadd_parts+0x24>
    2096:	33 c1       	rjmp	.+614    	; 0x22fe <_fpadd_parts+0x28a>
    2098:	94 30       	cpi	r25, 0x04	; 4
    209a:	69 f4       	brne	.+26     	; 0x20b6 <_fpadd_parts+0x42>
    209c:	84 30       	cpi	r24, 0x04	; 4
    209e:	09 f0       	breq	.+2      	; 0x20a2 <_fpadd_parts+0x2e>
    20a0:	2f c1       	rjmp	.+606    	; 0x2300 <_fpadd_parts+0x28c>
    20a2:	11 96       	adiw	r26, 0x01	; 1
    20a4:	9c 91       	ld	r25, X
    20a6:	11 97       	sbiw	r26, 0x01	; 1
    20a8:	89 81       	ldd	r24, Y+1	; 0x01
    20aa:	98 17       	cp	r25, r24
    20ac:	09 f4       	brne	.+2      	; 0x20b0 <_fpadd_parts+0x3c>
    20ae:	28 c1       	rjmp	.+592    	; 0x2300 <_fpadd_parts+0x28c>
    20b0:	af e0       	ldi	r26, 0x0F	; 15
    20b2:	b1 e0       	ldi	r27, 0x01	; 1
    20b4:	25 c1       	rjmp	.+586    	; 0x2300 <_fpadd_parts+0x28c>
    20b6:	84 30       	cpi	r24, 0x04	; 4
    20b8:	09 f4       	brne	.+2      	; 0x20bc <_fpadd_parts+0x48>
    20ba:	21 c1       	rjmp	.+578    	; 0x22fe <_fpadd_parts+0x28a>
    20bc:	82 30       	cpi	r24, 0x02	; 2
    20be:	a9 f4       	brne	.+42     	; 0x20ea <_fpadd_parts+0x76>
    20c0:	92 30       	cpi	r25, 0x02	; 2
    20c2:	09 f0       	breq	.+2      	; 0x20c6 <_fpadd_parts+0x52>
    20c4:	1d c1       	rjmp	.+570    	; 0x2300 <_fpadd_parts+0x28c>
    20c6:	9a 01       	movw	r18, r20
    20c8:	ad 01       	movw	r20, r26
    20ca:	88 e0       	ldi	r24, 0x08	; 8
    20cc:	ea 01       	movw	r28, r20
    20ce:	09 90       	ld	r0, Y+
    20d0:	ae 01       	movw	r20, r28
    20d2:	e9 01       	movw	r28, r18
    20d4:	09 92       	st	Y+, r0
    20d6:	9e 01       	movw	r18, r28
    20d8:	81 50       	subi	r24, 0x01	; 1
    20da:	c1 f7       	brne	.-16     	; 0x20cc <_fpadd_parts+0x58>
    20dc:	e2 01       	movw	r28, r4
    20de:	89 81       	ldd	r24, Y+1	; 0x01
    20e0:	11 96       	adiw	r26, 0x01	; 1
    20e2:	9c 91       	ld	r25, X
    20e4:	89 23       	and	r24, r25
    20e6:	81 83       	std	Z+1, r24	; 0x01
    20e8:	08 c1       	rjmp	.+528    	; 0x22fa <_fpadd_parts+0x286>
    20ea:	92 30       	cpi	r25, 0x02	; 2
    20ec:	09 f4       	brne	.+2      	; 0x20f0 <_fpadd_parts+0x7c>
    20ee:	07 c1       	rjmp	.+526    	; 0x22fe <_fpadd_parts+0x28a>
    20f0:	12 96       	adiw	r26, 0x02	; 2
    20f2:	2d 90       	ld	r2, X+
    20f4:	3c 90       	ld	r3, X
    20f6:	13 97       	sbiw	r26, 0x03	; 3
    20f8:	eb 01       	movw	r28, r22
    20fa:	8a 81       	ldd	r24, Y+2	; 0x02
    20fc:	9b 81       	ldd	r25, Y+3	; 0x03
    20fe:	14 96       	adiw	r26, 0x04	; 4
    2100:	ad 90       	ld	r10, X+
    2102:	bd 90       	ld	r11, X+
    2104:	cd 90       	ld	r12, X+
    2106:	dc 90       	ld	r13, X
    2108:	17 97       	sbiw	r26, 0x07	; 7
    210a:	ec 80       	ldd	r14, Y+4	; 0x04
    210c:	fd 80       	ldd	r15, Y+5	; 0x05
    210e:	0e 81       	ldd	r16, Y+6	; 0x06
    2110:	1f 81       	ldd	r17, Y+7	; 0x07
    2112:	91 01       	movw	r18, r2
    2114:	28 1b       	sub	r18, r24
    2116:	39 0b       	sbc	r19, r25
    2118:	b9 01       	movw	r22, r18
    211a:	37 ff       	sbrs	r19, 7
    211c:	04 c0       	rjmp	.+8      	; 0x2126 <_fpadd_parts+0xb2>
    211e:	66 27       	eor	r22, r22
    2120:	77 27       	eor	r23, r23
    2122:	62 1b       	sub	r22, r18
    2124:	73 0b       	sbc	r23, r19
    2126:	60 32       	cpi	r22, 0x20	; 32
    2128:	71 05       	cpc	r23, r1
    212a:	0c f0       	brlt	.+2      	; 0x212e <_fpadd_parts+0xba>
    212c:	61 c0       	rjmp	.+194    	; 0x21f0 <_fpadd_parts+0x17c>
    212e:	12 16       	cp	r1, r18
    2130:	13 06       	cpc	r1, r19
    2132:	6c f5       	brge	.+90     	; 0x218e <_fpadd_parts+0x11a>
    2134:	37 01       	movw	r6, r14
    2136:	48 01       	movw	r8, r16
    2138:	06 2e       	mov	r0, r22
    213a:	04 c0       	rjmp	.+8      	; 0x2144 <_fpadd_parts+0xd0>
    213c:	96 94       	lsr	r9
    213e:	87 94       	ror	r8
    2140:	77 94       	ror	r7
    2142:	67 94       	ror	r6
    2144:	0a 94       	dec	r0
    2146:	d2 f7       	brpl	.-12     	; 0x213c <_fpadd_parts+0xc8>
    2148:	21 e0       	ldi	r18, 0x01	; 1
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	40 e0       	ldi	r20, 0x00	; 0
    214e:	50 e0       	ldi	r21, 0x00	; 0
    2150:	04 c0       	rjmp	.+8      	; 0x215a <_fpadd_parts+0xe6>
    2152:	22 0f       	add	r18, r18
    2154:	33 1f       	adc	r19, r19
    2156:	44 1f       	adc	r20, r20
    2158:	55 1f       	adc	r21, r21
    215a:	6a 95       	dec	r22
    215c:	d2 f7       	brpl	.-12     	; 0x2152 <_fpadd_parts+0xde>
    215e:	21 50       	subi	r18, 0x01	; 1
    2160:	30 40       	sbci	r19, 0x00	; 0
    2162:	40 40       	sbci	r20, 0x00	; 0
    2164:	50 40       	sbci	r21, 0x00	; 0
    2166:	2e 21       	and	r18, r14
    2168:	3f 21       	and	r19, r15
    216a:	40 23       	and	r20, r16
    216c:	51 23       	and	r21, r17
    216e:	21 15       	cp	r18, r1
    2170:	31 05       	cpc	r19, r1
    2172:	41 05       	cpc	r20, r1
    2174:	51 05       	cpc	r21, r1
    2176:	21 f0       	breq	.+8      	; 0x2180 <_fpadd_parts+0x10c>
    2178:	21 e0       	ldi	r18, 0x01	; 1
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	40 e0       	ldi	r20, 0x00	; 0
    217e:	50 e0       	ldi	r21, 0x00	; 0
    2180:	79 01       	movw	r14, r18
    2182:	8a 01       	movw	r16, r20
    2184:	e6 28       	or	r14, r6
    2186:	f7 28       	or	r15, r7
    2188:	08 29       	or	r16, r8
    218a:	19 29       	or	r17, r9
    218c:	3c c0       	rjmp	.+120    	; 0x2206 <_fpadd_parts+0x192>
    218e:	23 2b       	or	r18, r19
    2190:	d1 f1       	breq	.+116    	; 0x2206 <_fpadd_parts+0x192>
    2192:	26 0e       	add	r2, r22
    2194:	37 1e       	adc	r3, r23
    2196:	35 01       	movw	r6, r10
    2198:	46 01       	movw	r8, r12
    219a:	06 2e       	mov	r0, r22
    219c:	04 c0       	rjmp	.+8      	; 0x21a6 <_fpadd_parts+0x132>
    219e:	96 94       	lsr	r9
    21a0:	87 94       	ror	r8
    21a2:	77 94       	ror	r7
    21a4:	67 94       	ror	r6
    21a6:	0a 94       	dec	r0
    21a8:	d2 f7       	brpl	.-12     	; 0x219e <_fpadd_parts+0x12a>
    21aa:	21 e0       	ldi	r18, 0x01	; 1
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	40 e0       	ldi	r20, 0x00	; 0
    21b0:	50 e0       	ldi	r21, 0x00	; 0
    21b2:	04 c0       	rjmp	.+8      	; 0x21bc <_fpadd_parts+0x148>
    21b4:	22 0f       	add	r18, r18
    21b6:	33 1f       	adc	r19, r19
    21b8:	44 1f       	adc	r20, r20
    21ba:	55 1f       	adc	r21, r21
    21bc:	6a 95       	dec	r22
    21be:	d2 f7       	brpl	.-12     	; 0x21b4 <_fpadd_parts+0x140>
    21c0:	21 50       	subi	r18, 0x01	; 1
    21c2:	30 40       	sbci	r19, 0x00	; 0
    21c4:	40 40       	sbci	r20, 0x00	; 0
    21c6:	50 40       	sbci	r21, 0x00	; 0
    21c8:	2a 21       	and	r18, r10
    21ca:	3b 21       	and	r19, r11
    21cc:	4c 21       	and	r20, r12
    21ce:	5d 21       	and	r21, r13
    21d0:	21 15       	cp	r18, r1
    21d2:	31 05       	cpc	r19, r1
    21d4:	41 05       	cpc	r20, r1
    21d6:	51 05       	cpc	r21, r1
    21d8:	21 f0       	breq	.+8      	; 0x21e2 <_fpadd_parts+0x16e>
    21da:	21 e0       	ldi	r18, 0x01	; 1
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	40 e0       	ldi	r20, 0x00	; 0
    21e0:	50 e0       	ldi	r21, 0x00	; 0
    21e2:	59 01       	movw	r10, r18
    21e4:	6a 01       	movw	r12, r20
    21e6:	a6 28       	or	r10, r6
    21e8:	b7 28       	or	r11, r7
    21ea:	c8 28       	or	r12, r8
    21ec:	d9 28       	or	r13, r9
    21ee:	0b c0       	rjmp	.+22     	; 0x2206 <_fpadd_parts+0x192>
    21f0:	82 15       	cp	r24, r2
    21f2:	93 05       	cpc	r25, r3
    21f4:	2c f0       	brlt	.+10     	; 0x2200 <_fpadd_parts+0x18c>
    21f6:	1c 01       	movw	r2, r24
    21f8:	aa 24       	eor	r10, r10
    21fa:	bb 24       	eor	r11, r11
    21fc:	65 01       	movw	r12, r10
    21fe:	03 c0       	rjmp	.+6      	; 0x2206 <_fpadd_parts+0x192>
    2200:	ee 24       	eor	r14, r14
    2202:	ff 24       	eor	r15, r15
    2204:	87 01       	movw	r16, r14
    2206:	11 96       	adiw	r26, 0x01	; 1
    2208:	9c 91       	ld	r25, X
    220a:	d2 01       	movw	r26, r4
    220c:	11 96       	adiw	r26, 0x01	; 1
    220e:	8c 91       	ld	r24, X
    2210:	98 17       	cp	r25, r24
    2212:	09 f4       	brne	.+2      	; 0x2216 <_fpadd_parts+0x1a2>
    2214:	45 c0       	rjmp	.+138    	; 0x22a0 <_fpadd_parts+0x22c>
    2216:	99 23       	and	r25, r25
    2218:	39 f0       	breq	.+14     	; 0x2228 <_fpadd_parts+0x1b4>
    221a:	a8 01       	movw	r20, r16
    221c:	97 01       	movw	r18, r14
    221e:	2a 19       	sub	r18, r10
    2220:	3b 09       	sbc	r19, r11
    2222:	4c 09       	sbc	r20, r12
    2224:	5d 09       	sbc	r21, r13
    2226:	06 c0       	rjmp	.+12     	; 0x2234 <_fpadd_parts+0x1c0>
    2228:	a6 01       	movw	r20, r12
    222a:	95 01       	movw	r18, r10
    222c:	2e 19       	sub	r18, r14
    222e:	3f 09       	sbc	r19, r15
    2230:	40 0b       	sbc	r20, r16
    2232:	51 0b       	sbc	r21, r17
    2234:	57 fd       	sbrc	r21, 7
    2236:	08 c0       	rjmp	.+16     	; 0x2248 <_fpadd_parts+0x1d4>
    2238:	11 82       	std	Z+1, r1	; 0x01
    223a:	33 82       	std	Z+3, r3	; 0x03
    223c:	22 82       	std	Z+2, r2	; 0x02
    223e:	24 83       	std	Z+4, r18	; 0x04
    2240:	35 83       	std	Z+5, r19	; 0x05
    2242:	46 83       	std	Z+6, r20	; 0x06
    2244:	57 83       	std	Z+7, r21	; 0x07
    2246:	1d c0       	rjmp	.+58     	; 0x2282 <_fpadd_parts+0x20e>
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	81 83       	std	Z+1, r24	; 0x01
    224c:	33 82       	std	Z+3, r3	; 0x03
    224e:	22 82       	std	Z+2, r2	; 0x02
    2250:	88 27       	eor	r24, r24
    2252:	99 27       	eor	r25, r25
    2254:	dc 01       	movw	r26, r24
    2256:	82 1b       	sub	r24, r18
    2258:	93 0b       	sbc	r25, r19
    225a:	a4 0b       	sbc	r26, r20
    225c:	b5 0b       	sbc	r27, r21
    225e:	84 83       	std	Z+4, r24	; 0x04
    2260:	95 83       	std	Z+5, r25	; 0x05
    2262:	a6 83       	std	Z+6, r26	; 0x06
    2264:	b7 83       	std	Z+7, r27	; 0x07
    2266:	0d c0       	rjmp	.+26     	; 0x2282 <_fpadd_parts+0x20e>
    2268:	22 0f       	add	r18, r18
    226a:	33 1f       	adc	r19, r19
    226c:	44 1f       	adc	r20, r20
    226e:	55 1f       	adc	r21, r21
    2270:	24 83       	std	Z+4, r18	; 0x04
    2272:	35 83       	std	Z+5, r19	; 0x05
    2274:	46 83       	std	Z+6, r20	; 0x06
    2276:	57 83       	std	Z+7, r21	; 0x07
    2278:	82 81       	ldd	r24, Z+2	; 0x02
    227a:	93 81       	ldd	r25, Z+3	; 0x03
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	93 83       	std	Z+3, r25	; 0x03
    2280:	82 83       	std	Z+2, r24	; 0x02
    2282:	24 81       	ldd	r18, Z+4	; 0x04
    2284:	35 81       	ldd	r19, Z+5	; 0x05
    2286:	46 81       	ldd	r20, Z+6	; 0x06
    2288:	57 81       	ldd	r21, Z+7	; 0x07
    228a:	da 01       	movw	r26, r20
    228c:	c9 01       	movw	r24, r18
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	a1 09       	sbc	r26, r1
    2292:	b1 09       	sbc	r27, r1
    2294:	8f 5f       	subi	r24, 0xFF	; 255
    2296:	9f 4f       	sbci	r25, 0xFF	; 255
    2298:	af 4f       	sbci	r26, 0xFF	; 255
    229a:	bf 43       	sbci	r27, 0x3F	; 63
    229c:	28 f3       	brcs	.-54     	; 0x2268 <_fpadd_parts+0x1f4>
    229e:	0b c0       	rjmp	.+22     	; 0x22b6 <_fpadd_parts+0x242>
    22a0:	91 83       	std	Z+1, r25	; 0x01
    22a2:	33 82       	std	Z+3, r3	; 0x03
    22a4:	22 82       	std	Z+2, r2	; 0x02
    22a6:	ea 0c       	add	r14, r10
    22a8:	fb 1c       	adc	r15, r11
    22aa:	0c 1d       	adc	r16, r12
    22ac:	1d 1d       	adc	r17, r13
    22ae:	e4 82       	std	Z+4, r14	; 0x04
    22b0:	f5 82       	std	Z+5, r15	; 0x05
    22b2:	06 83       	std	Z+6, r16	; 0x06
    22b4:	17 83       	std	Z+7, r17	; 0x07
    22b6:	83 e0       	ldi	r24, 0x03	; 3
    22b8:	80 83       	st	Z, r24
    22ba:	24 81       	ldd	r18, Z+4	; 0x04
    22bc:	35 81       	ldd	r19, Z+5	; 0x05
    22be:	46 81       	ldd	r20, Z+6	; 0x06
    22c0:	57 81       	ldd	r21, Z+7	; 0x07
    22c2:	57 ff       	sbrs	r21, 7
    22c4:	1a c0       	rjmp	.+52     	; 0x22fa <_fpadd_parts+0x286>
    22c6:	c9 01       	movw	r24, r18
    22c8:	aa 27       	eor	r26, r26
    22ca:	97 fd       	sbrc	r25, 7
    22cc:	a0 95       	com	r26
    22ce:	ba 2f       	mov	r27, r26
    22d0:	81 70       	andi	r24, 0x01	; 1
    22d2:	90 70       	andi	r25, 0x00	; 0
    22d4:	a0 70       	andi	r26, 0x00	; 0
    22d6:	b0 70       	andi	r27, 0x00	; 0
    22d8:	56 95       	lsr	r21
    22da:	47 95       	ror	r20
    22dc:	37 95       	ror	r19
    22de:	27 95       	ror	r18
    22e0:	82 2b       	or	r24, r18
    22e2:	93 2b       	or	r25, r19
    22e4:	a4 2b       	or	r26, r20
    22e6:	b5 2b       	or	r27, r21
    22e8:	84 83       	std	Z+4, r24	; 0x04
    22ea:	95 83       	std	Z+5, r25	; 0x05
    22ec:	a6 83       	std	Z+6, r26	; 0x06
    22ee:	b7 83       	std	Z+7, r27	; 0x07
    22f0:	82 81       	ldd	r24, Z+2	; 0x02
    22f2:	93 81       	ldd	r25, Z+3	; 0x03
    22f4:	01 96       	adiw	r24, 0x01	; 1
    22f6:	93 83       	std	Z+3, r25	; 0x03
    22f8:	82 83       	std	Z+2, r24	; 0x02
    22fa:	df 01       	movw	r26, r30
    22fc:	01 c0       	rjmp	.+2      	; 0x2300 <_fpadd_parts+0x28c>
    22fe:	d2 01       	movw	r26, r4
    2300:	cd 01       	movw	r24, r26
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
    2306:	e2 e1       	ldi	r30, 0x12	; 18
    2308:	0c 94 30 16 	jmp	0x2c60	; 0x2c60 <__epilogue_restores__>

0000230c <__subsf3>:
    230c:	a0 e2       	ldi	r26, 0x20	; 32
    230e:	b0 e0       	ldi	r27, 0x00	; 0
    2310:	ec e8       	ldi	r30, 0x8C	; 140
    2312:	f1 e1       	ldi	r31, 0x11	; 17
    2314:	0c 94 20 16 	jmp	0x2c40	; 0x2c40 <__prologue_saves__+0x18>
    2318:	69 83       	std	Y+1, r22	; 0x01
    231a:	7a 83       	std	Y+2, r23	; 0x02
    231c:	8b 83       	std	Y+3, r24	; 0x03
    231e:	9c 83       	std	Y+4, r25	; 0x04
    2320:	2d 83       	std	Y+5, r18	; 0x05
    2322:	3e 83       	std	Y+6, r19	; 0x06
    2324:	4f 83       	std	Y+7, r20	; 0x07
    2326:	58 87       	std	Y+8, r21	; 0x08
    2328:	e9 e0       	ldi	r30, 0x09	; 9
    232a:	ee 2e       	mov	r14, r30
    232c:	f1 2c       	mov	r15, r1
    232e:	ec 0e       	add	r14, r28
    2330:	fd 1e       	adc	r15, r29
    2332:	ce 01       	movw	r24, r28
    2334:	01 96       	adiw	r24, 0x01	; 1
    2336:	b7 01       	movw	r22, r14
    2338:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__unpack_f>
    233c:	8e 01       	movw	r16, r28
    233e:	0f 5e       	subi	r16, 0xEF	; 239
    2340:	1f 4f       	sbci	r17, 0xFF	; 255
    2342:	ce 01       	movw	r24, r28
    2344:	05 96       	adiw	r24, 0x05	; 5
    2346:	b8 01       	movw	r22, r16
    2348:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__unpack_f>
    234c:	8a 89       	ldd	r24, Y+18	; 0x12
    234e:	91 e0       	ldi	r25, 0x01	; 1
    2350:	89 27       	eor	r24, r25
    2352:	8a 8b       	std	Y+18, r24	; 0x12
    2354:	c7 01       	movw	r24, r14
    2356:	b8 01       	movw	r22, r16
    2358:	ae 01       	movw	r20, r28
    235a:	47 5e       	subi	r20, 0xE7	; 231
    235c:	5f 4f       	sbci	r21, 0xFF	; 255
    235e:	0e 94 3a 10 	call	0x2074	; 0x2074 <_fpadd_parts>
    2362:	0e 94 6e 14 	call	0x28dc	; 0x28dc <__pack_f>
    2366:	a0 96       	adiw	r28, 0x20	; 32
    2368:	e6 e0       	ldi	r30, 0x06	; 6
    236a:	0c 94 3c 16 	jmp	0x2c78	; 0x2c78 <__epilogue_restores__+0x18>

0000236e <__addsf3>:
    236e:	a0 e2       	ldi	r26, 0x20	; 32
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	ed eb       	ldi	r30, 0xBD	; 189
    2374:	f1 e1       	ldi	r31, 0x11	; 17
    2376:	0c 94 20 16 	jmp	0x2c40	; 0x2c40 <__prologue_saves__+0x18>
    237a:	69 83       	std	Y+1, r22	; 0x01
    237c:	7a 83       	std	Y+2, r23	; 0x02
    237e:	8b 83       	std	Y+3, r24	; 0x03
    2380:	9c 83       	std	Y+4, r25	; 0x04
    2382:	2d 83       	std	Y+5, r18	; 0x05
    2384:	3e 83       	std	Y+6, r19	; 0x06
    2386:	4f 83       	std	Y+7, r20	; 0x07
    2388:	58 87       	std	Y+8, r21	; 0x08
    238a:	f9 e0       	ldi	r31, 0x09	; 9
    238c:	ef 2e       	mov	r14, r31
    238e:	f1 2c       	mov	r15, r1
    2390:	ec 0e       	add	r14, r28
    2392:	fd 1e       	adc	r15, r29
    2394:	ce 01       	movw	r24, r28
    2396:	01 96       	adiw	r24, 0x01	; 1
    2398:	b7 01       	movw	r22, r14
    239a:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__unpack_f>
    239e:	8e 01       	movw	r16, r28
    23a0:	0f 5e       	subi	r16, 0xEF	; 239
    23a2:	1f 4f       	sbci	r17, 0xFF	; 255
    23a4:	ce 01       	movw	r24, r28
    23a6:	05 96       	adiw	r24, 0x05	; 5
    23a8:	b8 01       	movw	r22, r16
    23aa:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__unpack_f>
    23ae:	c7 01       	movw	r24, r14
    23b0:	b8 01       	movw	r22, r16
    23b2:	ae 01       	movw	r20, r28
    23b4:	47 5e       	subi	r20, 0xE7	; 231
    23b6:	5f 4f       	sbci	r21, 0xFF	; 255
    23b8:	0e 94 3a 10 	call	0x2074	; 0x2074 <_fpadd_parts>
    23bc:	0e 94 6e 14 	call	0x28dc	; 0x28dc <__pack_f>
    23c0:	a0 96       	adiw	r28, 0x20	; 32
    23c2:	e6 e0       	ldi	r30, 0x06	; 6
    23c4:	0c 94 3c 16 	jmp	0x2c78	; 0x2c78 <__epilogue_restores__+0x18>

000023c8 <__mulsf3>:
    23c8:	a0 e2       	ldi	r26, 0x20	; 32
    23ca:	b0 e0       	ldi	r27, 0x00	; 0
    23cc:	ea ee       	ldi	r30, 0xEA	; 234
    23ce:	f1 e1       	ldi	r31, 0x11	; 17
    23d0:	0c 94 14 16 	jmp	0x2c28	; 0x2c28 <__prologue_saves__>
    23d4:	69 83       	std	Y+1, r22	; 0x01
    23d6:	7a 83       	std	Y+2, r23	; 0x02
    23d8:	8b 83       	std	Y+3, r24	; 0x03
    23da:	9c 83       	std	Y+4, r25	; 0x04
    23dc:	2d 83       	std	Y+5, r18	; 0x05
    23de:	3e 83       	std	Y+6, r19	; 0x06
    23e0:	4f 83       	std	Y+7, r20	; 0x07
    23e2:	58 87       	std	Y+8, r21	; 0x08
    23e4:	ce 01       	movw	r24, r28
    23e6:	01 96       	adiw	r24, 0x01	; 1
    23e8:	be 01       	movw	r22, r28
    23ea:	67 5f       	subi	r22, 0xF7	; 247
    23ec:	7f 4f       	sbci	r23, 0xFF	; 255
    23ee:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__unpack_f>
    23f2:	ce 01       	movw	r24, r28
    23f4:	05 96       	adiw	r24, 0x05	; 5
    23f6:	be 01       	movw	r22, r28
    23f8:	6f 5e       	subi	r22, 0xEF	; 239
    23fa:	7f 4f       	sbci	r23, 0xFF	; 255
    23fc:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__unpack_f>
    2400:	99 85       	ldd	r25, Y+9	; 0x09
    2402:	92 30       	cpi	r25, 0x02	; 2
    2404:	88 f0       	brcs	.+34     	; 0x2428 <__mulsf3+0x60>
    2406:	89 89       	ldd	r24, Y+17	; 0x11
    2408:	82 30       	cpi	r24, 0x02	; 2
    240a:	c8 f0       	brcs	.+50     	; 0x243e <__mulsf3+0x76>
    240c:	94 30       	cpi	r25, 0x04	; 4
    240e:	19 f4       	brne	.+6      	; 0x2416 <__mulsf3+0x4e>
    2410:	82 30       	cpi	r24, 0x02	; 2
    2412:	51 f4       	brne	.+20     	; 0x2428 <__mulsf3+0x60>
    2414:	04 c0       	rjmp	.+8      	; 0x241e <__mulsf3+0x56>
    2416:	84 30       	cpi	r24, 0x04	; 4
    2418:	29 f4       	brne	.+10     	; 0x2424 <__mulsf3+0x5c>
    241a:	92 30       	cpi	r25, 0x02	; 2
    241c:	81 f4       	brne	.+32     	; 0x243e <__mulsf3+0x76>
    241e:	8f e0       	ldi	r24, 0x0F	; 15
    2420:	91 e0       	ldi	r25, 0x01	; 1
    2422:	c6 c0       	rjmp	.+396    	; 0x25b0 <__mulsf3+0x1e8>
    2424:	92 30       	cpi	r25, 0x02	; 2
    2426:	49 f4       	brne	.+18     	; 0x243a <__mulsf3+0x72>
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	9a 85       	ldd	r25, Y+10	; 0x0a
    242c:	8a 89       	ldd	r24, Y+18	; 0x12
    242e:	98 13       	cpse	r25, r24
    2430:	21 e0       	ldi	r18, 0x01	; 1
    2432:	2a 87       	std	Y+10, r18	; 0x0a
    2434:	ce 01       	movw	r24, r28
    2436:	09 96       	adiw	r24, 0x09	; 9
    2438:	bb c0       	rjmp	.+374    	; 0x25b0 <__mulsf3+0x1e8>
    243a:	82 30       	cpi	r24, 0x02	; 2
    243c:	49 f4       	brne	.+18     	; 0x2450 <__mulsf3+0x88>
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	9a 85       	ldd	r25, Y+10	; 0x0a
    2442:	8a 89       	ldd	r24, Y+18	; 0x12
    2444:	98 13       	cpse	r25, r24
    2446:	21 e0       	ldi	r18, 0x01	; 1
    2448:	2a 8b       	std	Y+18, r18	; 0x12
    244a:	ce 01       	movw	r24, r28
    244c:	41 96       	adiw	r24, 0x11	; 17
    244e:	b0 c0       	rjmp	.+352    	; 0x25b0 <__mulsf3+0x1e8>
    2450:	2d 84       	ldd	r2, Y+13	; 0x0d
    2452:	3e 84       	ldd	r3, Y+14	; 0x0e
    2454:	4f 84       	ldd	r4, Y+15	; 0x0f
    2456:	58 88       	ldd	r5, Y+16	; 0x10
    2458:	6d 88       	ldd	r6, Y+21	; 0x15
    245a:	7e 88       	ldd	r7, Y+22	; 0x16
    245c:	8f 88       	ldd	r8, Y+23	; 0x17
    245e:	98 8c       	ldd	r9, Y+24	; 0x18
    2460:	ee 24       	eor	r14, r14
    2462:	ff 24       	eor	r15, r15
    2464:	87 01       	movw	r16, r14
    2466:	aa 24       	eor	r10, r10
    2468:	bb 24       	eor	r11, r11
    246a:	65 01       	movw	r12, r10
    246c:	40 e0       	ldi	r20, 0x00	; 0
    246e:	50 e0       	ldi	r21, 0x00	; 0
    2470:	60 e0       	ldi	r22, 0x00	; 0
    2472:	70 e0       	ldi	r23, 0x00	; 0
    2474:	e0 e0       	ldi	r30, 0x00	; 0
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	c1 01       	movw	r24, r2
    247a:	81 70       	andi	r24, 0x01	; 1
    247c:	90 70       	andi	r25, 0x00	; 0
    247e:	89 2b       	or	r24, r25
    2480:	e9 f0       	breq	.+58     	; 0x24bc <__mulsf3+0xf4>
    2482:	e6 0c       	add	r14, r6
    2484:	f7 1c       	adc	r15, r7
    2486:	08 1d       	adc	r16, r8
    2488:	19 1d       	adc	r17, r9
    248a:	9a 01       	movw	r18, r20
    248c:	ab 01       	movw	r20, r22
    248e:	2a 0d       	add	r18, r10
    2490:	3b 1d       	adc	r19, r11
    2492:	4c 1d       	adc	r20, r12
    2494:	5d 1d       	adc	r21, r13
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	a0 e0       	ldi	r26, 0x00	; 0
    249c:	b0 e0       	ldi	r27, 0x00	; 0
    249e:	e6 14       	cp	r14, r6
    24a0:	f7 04       	cpc	r15, r7
    24a2:	08 05       	cpc	r16, r8
    24a4:	19 05       	cpc	r17, r9
    24a6:	20 f4       	brcc	.+8      	; 0x24b0 <__mulsf3+0xe8>
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	a0 e0       	ldi	r26, 0x00	; 0
    24ae:	b0 e0       	ldi	r27, 0x00	; 0
    24b0:	ba 01       	movw	r22, r20
    24b2:	a9 01       	movw	r20, r18
    24b4:	48 0f       	add	r20, r24
    24b6:	59 1f       	adc	r21, r25
    24b8:	6a 1f       	adc	r22, r26
    24ba:	7b 1f       	adc	r23, r27
    24bc:	aa 0c       	add	r10, r10
    24be:	bb 1c       	adc	r11, r11
    24c0:	cc 1c       	adc	r12, r12
    24c2:	dd 1c       	adc	r13, r13
    24c4:	97 fe       	sbrs	r9, 7
    24c6:	08 c0       	rjmp	.+16     	; 0x24d8 <__mulsf3+0x110>
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	a0 e0       	ldi	r26, 0x00	; 0
    24ce:	b0 e0       	ldi	r27, 0x00	; 0
    24d0:	a8 2a       	or	r10, r24
    24d2:	b9 2a       	or	r11, r25
    24d4:	ca 2a       	or	r12, r26
    24d6:	db 2a       	or	r13, r27
    24d8:	31 96       	adiw	r30, 0x01	; 1
    24da:	e0 32       	cpi	r30, 0x20	; 32
    24dc:	f1 05       	cpc	r31, r1
    24de:	49 f0       	breq	.+18     	; 0x24f2 <__mulsf3+0x12a>
    24e0:	66 0c       	add	r6, r6
    24e2:	77 1c       	adc	r7, r7
    24e4:	88 1c       	adc	r8, r8
    24e6:	99 1c       	adc	r9, r9
    24e8:	56 94       	lsr	r5
    24ea:	47 94       	ror	r4
    24ec:	37 94       	ror	r3
    24ee:	27 94       	ror	r2
    24f0:	c3 cf       	rjmp	.-122    	; 0x2478 <__mulsf3+0xb0>
    24f2:	fa 85       	ldd	r31, Y+10	; 0x0a
    24f4:	ea 89       	ldd	r30, Y+18	; 0x12
    24f6:	2b 89       	ldd	r18, Y+19	; 0x13
    24f8:	3c 89       	ldd	r19, Y+20	; 0x14
    24fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    24fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    24fe:	28 0f       	add	r18, r24
    2500:	39 1f       	adc	r19, r25
    2502:	2e 5f       	subi	r18, 0xFE	; 254
    2504:	3f 4f       	sbci	r19, 0xFF	; 255
    2506:	17 c0       	rjmp	.+46     	; 0x2536 <__mulsf3+0x16e>
    2508:	ca 01       	movw	r24, r20
    250a:	81 70       	andi	r24, 0x01	; 1
    250c:	90 70       	andi	r25, 0x00	; 0
    250e:	89 2b       	or	r24, r25
    2510:	61 f0       	breq	.+24     	; 0x252a <__mulsf3+0x162>
    2512:	16 95       	lsr	r17
    2514:	07 95       	ror	r16
    2516:	f7 94       	ror	r15
    2518:	e7 94       	ror	r14
    251a:	80 e0       	ldi	r24, 0x00	; 0
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	a0 e0       	ldi	r26, 0x00	; 0
    2520:	b0 e8       	ldi	r27, 0x80	; 128
    2522:	e8 2a       	or	r14, r24
    2524:	f9 2a       	or	r15, r25
    2526:	0a 2b       	or	r16, r26
    2528:	1b 2b       	or	r17, r27
    252a:	76 95       	lsr	r23
    252c:	67 95       	ror	r22
    252e:	57 95       	ror	r21
    2530:	47 95       	ror	r20
    2532:	2f 5f       	subi	r18, 0xFF	; 255
    2534:	3f 4f       	sbci	r19, 0xFF	; 255
    2536:	77 fd       	sbrc	r23, 7
    2538:	e7 cf       	rjmp	.-50     	; 0x2508 <__mulsf3+0x140>
    253a:	0c c0       	rjmp	.+24     	; 0x2554 <__mulsf3+0x18c>
    253c:	44 0f       	add	r20, r20
    253e:	55 1f       	adc	r21, r21
    2540:	66 1f       	adc	r22, r22
    2542:	77 1f       	adc	r23, r23
    2544:	17 fd       	sbrc	r17, 7
    2546:	41 60       	ori	r20, 0x01	; 1
    2548:	ee 0c       	add	r14, r14
    254a:	ff 1c       	adc	r15, r15
    254c:	00 1f       	adc	r16, r16
    254e:	11 1f       	adc	r17, r17
    2550:	21 50       	subi	r18, 0x01	; 1
    2552:	30 40       	sbci	r19, 0x00	; 0
    2554:	40 30       	cpi	r20, 0x00	; 0
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	59 07       	cpc	r21, r25
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	69 07       	cpc	r22, r25
    255e:	90 e4       	ldi	r25, 0x40	; 64
    2560:	79 07       	cpc	r23, r25
    2562:	60 f3       	brcs	.-40     	; 0x253c <__mulsf3+0x174>
    2564:	2b 8f       	std	Y+27, r18	; 0x1b
    2566:	3c 8f       	std	Y+28, r19	; 0x1c
    2568:	db 01       	movw	r26, r22
    256a:	ca 01       	movw	r24, r20
    256c:	8f 77       	andi	r24, 0x7F	; 127
    256e:	90 70       	andi	r25, 0x00	; 0
    2570:	a0 70       	andi	r26, 0x00	; 0
    2572:	b0 70       	andi	r27, 0x00	; 0
    2574:	80 34       	cpi	r24, 0x40	; 64
    2576:	91 05       	cpc	r25, r1
    2578:	a1 05       	cpc	r26, r1
    257a:	b1 05       	cpc	r27, r1
    257c:	61 f4       	brne	.+24     	; 0x2596 <__mulsf3+0x1ce>
    257e:	47 fd       	sbrc	r20, 7
    2580:	0a c0       	rjmp	.+20     	; 0x2596 <__mulsf3+0x1ce>
    2582:	e1 14       	cp	r14, r1
    2584:	f1 04       	cpc	r15, r1
    2586:	01 05       	cpc	r16, r1
    2588:	11 05       	cpc	r17, r1
    258a:	29 f0       	breq	.+10     	; 0x2596 <__mulsf3+0x1ce>
    258c:	40 5c       	subi	r20, 0xC0	; 192
    258e:	5f 4f       	sbci	r21, 0xFF	; 255
    2590:	6f 4f       	sbci	r22, 0xFF	; 255
    2592:	7f 4f       	sbci	r23, 0xFF	; 255
    2594:	40 78       	andi	r20, 0x80	; 128
    2596:	1a 8e       	std	Y+26, r1	; 0x1a
    2598:	fe 17       	cp	r31, r30
    259a:	11 f0       	breq	.+4      	; 0x25a0 <__mulsf3+0x1d8>
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	8a 8f       	std	Y+26, r24	; 0x1a
    25a0:	4d 8f       	std	Y+29, r20	; 0x1d
    25a2:	5e 8f       	std	Y+30, r21	; 0x1e
    25a4:	6f 8f       	std	Y+31, r22	; 0x1f
    25a6:	78 a3       	std	Y+32, r23	; 0x20
    25a8:	83 e0       	ldi	r24, 0x03	; 3
    25aa:	89 8f       	std	Y+25, r24	; 0x19
    25ac:	ce 01       	movw	r24, r28
    25ae:	49 96       	adiw	r24, 0x19	; 25
    25b0:	0e 94 6e 14 	call	0x28dc	; 0x28dc <__pack_f>
    25b4:	a0 96       	adiw	r28, 0x20	; 32
    25b6:	e2 e1       	ldi	r30, 0x12	; 18
    25b8:	0c 94 30 16 	jmp	0x2c60	; 0x2c60 <__epilogue_restores__>

000025bc <__divsf3>:
    25bc:	a8 e1       	ldi	r26, 0x18	; 24
    25be:	b0 e0       	ldi	r27, 0x00	; 0
    25c0:	e4 ee       	ldi	r30, 0xE4	; 228
    25c2:	f2 e1       	ldi	r31, 0x12	; 18
    25c4:	0c 94 1c 16 	jmp	0x2c38	; 0x2c38 <__prologue_saves__+0x10>
    25c8:	69 83       	std	Y+1, r22	; 0x01
    25ca:	7a 83       	std	Y+2, r23	; 0x02
    25cc:	8b 83       	std	Y+3, r24	; 0x03
    25ce:	9c 83       	std	Y+4, r25	; 0x04
    25d0:	2d 83       	std	Y+5, r18	; 0x05
    25d2:	3e 83       	std	Y+6, r19	; 0x06
    25d4:	4f 83       	std	Y+7, r20	; 0x07
    25d6:	58 87       	std	Y+8, r21	; 0x08
    25d8:	b9 e0       	ldi	r27, 0x09	; 9
    25da:	eb 2e       	mov	r14, r27
    25dc:	f1 2c       	mov	r15, r1
    25de:	ec 0e       	add	r14, r28
    25e0:	fd 1e       	adc	r15, r29
    25e2:	ce 01       	movw	r24, r28
    25e4:	01 96       	adiw	r24, 0x01	; 1
    25e6:	b7 01       	movw	r22, r14
    25e8:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__unpack_f>
    25ec:	8e 01       	movw	r16, r28
    25ee:	0f 5e       	subi	r16, 0xEF	; 239
    25f0:	1f 4f       	sbci	r17, 0xFF	; 255
    25f2:	ce 01       	movw	r24, r28
    25f4:	05 96       	adiw	r24, 0x05	; 5
    25f6:	b8 01       	movw	r22, r16
    25f8:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__unpack_f>
    25fc:	29 85       	ldd	r18, Y+9	; 0x09
    25fe:	22 30       	cpi	r18, 0x02	; 2
    2600:	08 f4       	brcc	.+2      	; 0x2604 <__divsf3+0x48>
    2602:	7e c0       	rjmp	.+252    	; 0x2700 <__divsf3+0x144>
    2604:	39 89       	ldd	r19, Y+17	; 0x11
    2606:	32 30       	cpi	r19, 0x02	; 2
    2608:	10 f4       	brcc	.+4      	; 0x260e <__divsf3+0x52>
    260a:	b8 01       	movw	r22, r16
    260c:	7c c0       	rjmp	.+248    	; 0x2706 <__divsf3+0x14a>
    260e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2610:	9a 89       	ldd	r25, Y+18	; 0x12
    2612:	89 27       	eor	r24, r25
    2614:	8a 87       	std	Y+10, r24	; 0x0a
    2616:	24 30       	cpi	r18, 0x04	; 4
    2618:	11 f0       	breq	.+4      	; 0x261e <__divsf3+0x62>
    261a:	22 30       	cpi	r18, 0x02	; 2
    261c:	31 f4       	brne	.+12     	; 0x262a <__divsf3+0x6e>
    261e:	23 17       	cp	r18, r19
    2620:	09 f0       	breq	.+2      	; 0x2624 <__divsf3+0x68>
    2622:	6e c0       	rjmp	.+220    	; 0x2700 <__divsf3+0x144>
    2624:	6f e0       	ldi	r22, 0x0F	; 15
    2626:	71 e0       	ldi	r23, 0x01	; 1
    2628:	6e c0       	rjmp	.+220    	; 0x2706 <__divsf3+0x14a>
    262a:	34 30       	cpi	r19, 0x04	; 4
    262c:	39 f4       	brne	.+14     	; 0x263c <__divsf3+0x80>
    262e:	1d 86       	std	Y+13, r1	; 0x0d
    2630:	1e 86       	std	Y+14, r1	; 0x0e
    2632:	1f 86       	std	Y+15, r1	; 0x0f
    2634:	18 8a       	std	Y+16, r1	; 0x10
    2636:	1c 86       	std	Y+12, r1	; 0x0c
    2638:	1b 86       	std	Y+11, r1	; 0x0b
    263a:	04 c0       	rjmp	.+8      	; 0x2644 <__divsf3+0x88>
    263c:	32 30       	cpi	r19, 0x02	; 2
    263e:	21 f4       	brne	.+8      	; 0x2648 <__divsf3+0x8c>
    2640:	84 e0       	ldi	r24, 0x04	; 4
    2642:	89 87       	std	Y+9, r24	; 0x09
    2644:	b7 01       	movw	r22, r14
    2646:	5f c0       	rjmp	.+190    	; 0x2706 <__divsf3+0x14a>
    2648:	2b 85       	ldd	r18, Y+11	; 0x0b
    264a:	3c 85       	ldd	r19, Y+12	; 0x0c
    264c:	8b 89       	ldd	r24, Y+19	; 0x13
    264e:	9c 89       	ldd	r25, Y+20	; 0x14
    2650:	28 1b       	sub	r18, r24
    2652:	39 0b       	sbc	r19, r25
    2654:	3c 87       	std	Y+12, r19	; 0x0c
    2656:	2b 87       	std	Y+11, r18	; 0x0b
    2658:	ed 84       	ldd	r14, Y+13	; 0x0d
    265a:	fe 84       	ldd	r15, Y+14	; 0x0e
    265c:	0f 85       	ldd	r16, Y+15	; 0x0f
    265e:	18 89       	ldd	r17, Y+16	; 0x10
    2660:	ad 88       	ldd	r10, Y+21	; 0x15
    2662:	be 88       	ldd	r11, Y+22	; 0x16
    2664:	cf 88       	ldd	r12, Y+23	; 0x17
    2666:	d8 8c       	ldd	r13, Y+24	; 0x18
    2668:	ea 14       	cp	r14, r10
    266a:	fb 04       	cpc	r15, r11
    266c:	0c 05       	cpc	r16, r12
    266e:	1d 05       	cpc	r17, r13
    2670:	40 f4       	brcc	.+16     	; 0x2682 <__divsf3+0xc6>
    2672:	ee 0c       	add	r14, r14
    2674:	ff 1c       	adc	r15, r15
    2676:	00 1f       	adc	r16, r16
    2678:	11 1f       	adc	r17, r17
    267a:	21 50       	subi	r18, 0x01	; 1
    267c:	30 40       	sbci	r19, 0x00	; 0
    267e:	3c 87       	std	Y+12, r19	; 0x0c
    2680:	2b 87       	std	Y+11, r18	; 0x0b
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	40 e0       	ldi	r20, 0x00	; 0
    2688:	50 e0       	ldi	r21, 0x00	; 0
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	a0 e0       	ldi	r26, 0x00	; 0
    2690:	b0 e4       	ldi	r27, 0x40	; 64
    2692:	60 e0       	ldi	r22, 0x00	; 0
    2694:	70 e0       	ldi	r23, 0x00	; 0
    2696:	ea 14       	cp	r14, r10
    2698:	fb 04       	cpc	r15, r11
    269a:	0c 05       	cpc	r16, r12
    269c:	1d 05       	cpc	r17, r13
    269e:	40 f0       	brcs	.+16     	; 0x26b0 <__divsf3+0xf4>
    26a0:	28 2b       	or	r18, r24
    26a2:	39 2b       	or	r19, r25
    26a4:	4a 2b       	or	r20, r26
    26a6:	5b 2b       	or	r21, r27
    26a8:	ea 18       	sub	r14, r10
    26aa:	fb 08       	sbc	r15, r11
    26ac:	0c 09       	sbc	r16, r12
    26ae:	1d 09       	sbc	r17, r13
    26b0:	b6 95       	lsr	r27
    26b2:	a7 95       	ror	r26
    26b4:	97 95       	ror	r25
    26b6:	87 95       	ror	r24
    26b8:	ee 0c       	add	r14, r14
    26ba:	ff 1c       	adc	r15, r15
    26bc:	00 1f       	adc	r16, r16
    26be:	11 1f       	adc	r17, r17
    26c0:	6f 5f       	subi	r22, 0xFF	; 255
    26c2:	7f 4f       	sbci	r23, 0xFF	; 255
    26c4:	6f 31       	cpi	r22, 0x1F	; 31
    26c6:	71 05       	cpc	r23, r1
    26c8:	31 f7       	brne	.-52     	; 0x2696 <__divsf3+0xda>
    26ca:	da 01       	movw	r26, r20
    26cc:	c9 01       	movw	r24, r18
    26ce:	8f 77       	andi	r24, 0x7F	; 127
    26d0:	90 70       	andi	r25, 0x00	; 0
    26d2:	a0 70       	andi	r26, 0x00	; 0
    26d4:	b0 70       	andi	r27, 0x00	; 0
    26d6:	80 34       	cpi	r24, 0x40	; 64
    26d8:	91 05       	cpc	r25, r1
    26da:	a1 05       	cpc	r26, r1
    26dc:	b1 05       	cpc	r27, r1
    26de:	61 f4       	brne	.+24     	; 0x26f8 <__divsf3+0x13c>
    26e0:	27 fd       	sbrc	r18, 7
    26e2:	0a c0       	rjmp	.+20     	; 0x26f8 <__divsf3+0x13c>
    26e4:	e1 14       	cp	r14, r1
    26e6:	f1 04       	cpc	r15, r1
    26e8:	01 05       	cpc	r16, r1
    26ea:	11 05       	cpc	r17, r1
    26ec:	29 f0       	breq	.+10     	; 0x26f8 <__divsf3+0x13c>
    26ee:	20 5c       	subi	r18, 0xC0	; 192
    26f0:	3f 4f       	sbci	r19, 0xFF	; 255
    26f2:	4f 4f       	sbci	r20, 0xFF	; 255
    26f4:	5f 4f       	sbci	r21, 0xFF	; 255
    26f6:	20 78       	andi	r18, 0x80	; 128
    26f8:	2d 87       	std	Y+13, r18	; 0x0d
    26fa:	3e 87       	std	Y+14, r19	; 0x0e
    26fc:	4f 87       	std	Y+15, r20	; 0x0f
    26fe:	58 8b       	std	Y+16, r21	; 0x10
    2700:	be 01       	movw	r22, r28
    2702:	67 5f       	subi	r22, 0xF7	; 247
    2704:	7f 4f       	sbci	r23, 0xFF	; 255
    2706:	cb 01       	movw	r24, r22
    2708:	0e 94 6e 14 	call	0x28dc	; 0x28dc <__pack_f>
    270c:	68 96       	adiw	r28, 0x18	; 24
    270e:	ea e0       	ldi	r30, 0x0A	; 10
    2710:	0c 94 38 16 	jmp	0x2c70	; 0x2c70 <__epilogue_restores__+0x10>

00002714 <__gtsf2>:
    2714:	a8 e1       	ldi	r26, 0x18	; 24
    2716:	b0 e0       	ldi	r27, 0x00	; 0
    2718:	e0 e9       	ldi	r30, 0x90	; 144
    271a:	f3 e1       	ldi	r31, 0x13	; 19
    271c:	0c 94 20 16 	jmp	0x2c40	; 0x2c40 <__prologue_saves__+0x18>
    2720:	69 83       	std	Y+1, r22	; 0x01
    2722:	7a 83       	std	Y+2, r23	; 0x02
    2724:	8b 83       	std	Y+3, r24	; 0x03
    2726:	9c 83       	std	Y+4, r25	; 0x04
    2728:	2d 83       	std	Y+5, r18	; 0x05
    272a:	3e 83       	std	Y+6, r19	; 0x06
    272c:	4f 83       	std	Y+7, r20	; 0x07
    272e:	58 87       	std	Y+8, r21	; 0x08
    2730:	89 e0       	ldi	r24, 0x09	; 9
    2732:	e8 2e       	mov	r14, r24
    2734:	f1 2c       	mov	r15, r1
    2736:	ec 0e       	add	r14, r28
    2738:	fd 1e       	adc	r15, r29
    273a:	ce 01       	movw	r24, r28
    273c:	01 96       	adiw	r24, 0x01	; 1
    273e:	b7 01       	movw	r22, r14
    2740:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__unpack_f>
    2744:	8e 01       	movw	r16, r28
    2746:	0f 5e       	subi	r16, 0xEF	; 239
    2748:	1f 4f       	sbci	r17, 0xFF	; 255
    274a:	ce 01       	movw	r24, r28
    274c:	05 96       	adiw	r24, 0x05	; 5
    274e:	b8 01       	movw	r22, r16
    2750:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__unpack_f>
    2754:	89 85       	ldd	r24, Y+9	; 0x09
    2756:	82 30       	cpi	r24, 0x02	; 2
    2758:	40 f0       	brcs	.+16     	; 0x276a <__gtsf2+0x56>
    275a:	89 89       	ldd	r24, Y+17	; 0x11
    275c:	82 30       	cpi	r24, 0x02	; 2
    275e:	28 f0       	brcs	.+10     	; 0x276a <__gtsf2+0x56>
    2760:	c7 01       	movw	r24, r14
    2762:	b8 01       	movw	r22, r16
    2764:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <__fpcmp_parts_f>
    2768:	01 c0       	rjmp	.+2      	; 0x276c <__gtsf2+0x58>
    276a:	8f ef       	ldi	r24, 0xFF	; 255
    276c:	68 96       	adiw	r28, 0x18	; 24
    276e:	e6 e0       	ldi	r30, 0x06	; 6
    2770:	0c 94 3c 16 	jmp	0x2c78	; 0x2c78 <__epilogue_restores__+0x18>

00002774 <__gesf2>:
    2774:	a8 e1       	ldi	r26, 0x18	; 24
    2776:	b0 e0       	ldi	r27, 0x00	; 0
    2778:	e0 ec       	ldi	r30, 0xC0	; 192
    277a:	f3 e1       	ldi	r31, 0x13	; 19
    277c:	0c 94 20 16 	jmp	0x2c40	; 0x2c40 <__prologue_saves__+0x18>
    2780:	69 83       	std	Y+1, r22	; 0x01
    2782:	7a 83       	std	Y+2, r23	; 0x02
    2784:	8b 83       	std	Y+3, r24	; 0x03
    2786:	9c 83       	std	Y+4, r25	; 0x04
    2788:	2d 83       	std	Y+5, r18	; 0x05
    278a:	3e 83       	std	Y+6, r19	; 0x06
    278c:	4f 83       	std	Y+7, r20	; 0x07
    278e:	58 87       	std	Y+8, r21	; 0x08
    2790:	89 e0       	ldi	r24, 0x09	; 9
    2792:	e8 2e       	mov	r14, r24
    2794:	f1 2c       	mov	r15, r1
    2796:	ec 0e       	add	r14, r28
    2798:	fd 1e       	adc	r15, r29
    279a:	ce 01       	movw	r24, r28
    279c:	01 96       	adiw	r24, 0x01	; 1
    279e:	b7 01       	movw	r22, r14
    27a0:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__unpack_f>
    27a4:	8e 01       	movw	r16, r28
    27a6:	0f 5e       	subi	r16, 0xEF	; 239
    27a8:	1f 4f       	sbci	r17, 0xFF	; 255
    27aa:	ce 01       	movw	r24, r28
    27ac:	05 96       	adiw	r24, 0x05	; 5
    27ae:	b8 01       	movw	r22, r16
    27b0:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__unpack_f>
    27b4:	89 85       	ldd	r24, Y+9	; 0x09
    27b6:	82 30       	cpi	r24, 0x02	; 2
    27b8:	40 f0       	brcs	.+16     	; 0x27ca <__gesf2+0x56>
    27ba:	89 89       	ldd	r24, Y+17	; 0x11
    27bc:	82 30       	cpi	r24, 0x02	; 2
    27be:	28 f0       	brcs	.+10     	; 0x27ca <__gesf2+0x56>
    27c0:	c7 01       	movw	r24, r14
    27c2:	b8 01       	movw	r22, r16
    27c4:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <__fpcmp_parts_f>
    27c8:	01 c0       	rjmp	.+2      	; 0x27cc <__gesf2+0x58>
    27ca:	8f ef       	ldi	r24, 0xFF	; 255
    27cc:	68 96       	adiw	r28, 0x18	; 24
    27ce:	e6 e0       	ldi	r30, 0x06	; 6
    27d0:	0c 94 3c 16 	jmp	0x2c78	; 0x2c78 <__epilogue_restores__+0x18>

000027d4 <__ltsf2>:
    27d4:	a8 e1       	ldi	r26, 0x18	; 24
    27d6:	b0 e0       	ldi	r27, 0x00	; 0
    27d8:	e0 ef       	ldi	r30, 0xF0	; 240
    27da:	f3 e1       	ldi	r31, 0x13	; 19
    27dc:	0c 94 20 16 	jmp	0x2c40	; 0x2c40 <__prologue_saves__+0x18>
    27e0:	69 83       	std	Y+1, r22	; 0x01
    27e2:	7a 83       	std	Y+2, r23	; 0x02
    27e4:	8b 83       	std	Y+3, r24	; 0x03
    27e6:	9c 83       	std	Y+4, r25	; 0x04
    27e8:	2d 83       	std	Y+5, r18	; 0x05
    27ea:	3e 83       	std	Y+6, r19	; 0x06
    27ec:	4f 83       	std	Y+7, r20	; 0x07
    27ee:	58 87       	std	Y+8, r21	; 0x08
    27f0:	89 e0       	ldi	r24, 0x09	; 9
    27f2:	e8 2e       	mov	r14, r24
    27f4:	f1 2c       	mov	r15, r1
    27f6:	ec 0e       	add	r14, r28
    27f8:	fd 1e       	adc	r15, r29
    27fa:	ce 01       	movw	r24, r28
    27fc:	01 96       	adiw	r24, 0x01	; 1
    27fe:	b7 01       	movw	r22, r14
    2800:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__unpack_f>
    2804:	8e 01       	movw	r16, r28
    2806:	0f 5e       	subi	r16, 0xEF	; 239
    2808:	1f 4f       	sbci	r17, 0xFF	; 255
    280a:	ce 01       	movw	r24, r28
    280c:	05 96       	adiw	r24, 0x05	; 5
    280e:	b8 01       	movw	r22, r16
    2810:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__unpack_f>
    2814:	89 85       	ldd	r24, Y+9	; 0x09
    2816:	82 30       	cpi	r24, 0x02	; 2
    2818:	40 f0       	brcs	.+16     	; 0x282a <__ltsf2+0x56>
    281a:	89 89       	ldd	r24, Y+17	; 0x11
    281c:	82 30       	cpi	r24, 0x02	; 2
    281e:	28 f0       	brcs	.+10     	; 0x282a <__ltsf2+0x56>
    2820:	c7 01       	movw	r24, r14
    2822:	b8 01       	movw	r22, r16
    2824:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <__fpcmp_parts_f>
    2828:	01 c0       	rjmp	.+2      	; 0x282c <__ltsf2+0x58>
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	68 96       	adiw	r28, 0x18	; 24
    282e:	e6 e0       	ldi	r30, 0x06	; 6
    2830:	0c 94 3c 16 	jmp	0x2c78	; 0x2c78 <__epilogue_restores__+0x18>

00002834 <__fixsfsi>:
    2834:	ac e0       	ldi	r26, 0x0C	; 12
    2836:	b0 e0       	ldi	r27, 0x00	; 0
    2838:	e0 e2       	ldi	r30, 0x20	; 32
    283a:	f4 e1       	ldi	r31, 0x14	; 20
    283c:	0c 94 24 16 	jmp	0x2c48	; 0x2c48 <__prologue_saves__+0x20>
    2840:	69 83       	std	Y+1, r22	; 0x01
    2842:	7a 83       	std	Y+2, r23	; 0x02
    2844:	8b 83       	std	Y+3, r24	; 0x03
    2846:	9c 83       	std	Y+4, r25	; 0x04
    2848:	ce 01       	movw	r24, r28
    284a:	01 96       	adiw	r24, 0x01	; 1
    284c:	be 01       	movw	r22, r28
    284e:	6b 5f       	subi	r22, 0xFB	; 251
    2850:	7f 4f       	sbci	r23, 0xFF	; 255
    2852:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__unpack_f>
    2856:	8d 81       	ldd	r24, Y+5	; 0x05
    2858:	82 30       	cpi	r24, 0x02	; 2
    285a:	61 f1       	breq	.+88     	; 0x28b4 <__fixsfsi+0x80>
    285c:	82 30       	cpi	r24, 0x02	; 2
    285e:	50 f1       	brcs	.+84     	; 0x28b4 <__fixsfsi+0x80>
    2860:	84 30       	cpi	r24, 0x04	; 4
    2862:	21 f4       	brne	.+8      	; 0x286c <__fixsfsi+0x38>
    2864:	8e 81       	ldd	r24, Y+6	; 0x06
    2866:	88 23       	and	r24, r24
    2868:	51 f1       	breq	.+84     	; 0x28be <__fixsfsi+0x8a>
    286a:	2e c0       	rjmp	.+92     	; 0x28c8 <__fixsfsi+0x94>
    286c:	2f 81       	ldd	r18, Y+7	; 0x07
    286e:	38 85       	ldd	r19, Y+8	; 0x08
    2870:	37 fd       	sbrc	r19, 7
    2872:	20 c0       	rjmp	.+64     	; 0x28b4 <__fixsfsi+0x80>
    2874:	6e 81       	ldd	r22, Y+6	; 0x06
    2876:	2f 31       	cpi	r18, 0x1F	; 31
    2878:	31 05       	cpc	r19, r1
    287a:	1c f0       	brlt	.+6      	; 0x2882 <__fixsfsi+0x4e>
    287c:	66 23       	and	r22, r22
    287e:	f9 f0       	breq	.+62     	; 0x28be <__fixsfsi+0x8a>
    2880:	23 c0       	rjmp	.+70     	; 0x28c8 <__fixsfsi+0x94>
    2882:	8e e1       	ldi	r24, 0x1E	; 30
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	82 1b       	sub	r24, r18
    2888:	93 0b       	sbc	r25, r19
    288a:	29 85       	ldd	r18, Y+9	; 0x09
    288c:	3a 85       	ldd	r19, Y+10	; 0x0a
    288e:	4b 85       	ldd	r20, Y+11	; 0x0b
    2890:	5c 85       	ldd	r21, Y+12	; 0x0c
    2892:	04 c0       	rjmp	.+8      	; 0x289c <__fixsfsi+0x68>
    2894:	56 95       	lsr	r21
    2896:	47 95       	ror	r20
    2898:	37 95       	ror	r19
    289a:	27 95       	ror	r18
    289c:	8a 95       	dec	r24
    289e:	d2 f7       	brpl	.-12     	; 0x2894 <__fixsfsi+0x60>
    28a0:	66 23       	and	r22, r22
    28a2:	b1 f0       	breq	.+44     	; 0x28d0 <__fixsfsi+0x9c>
    28a4:	50 95       	com	r21
    28a6:	40 95       	com	r20
    28a8:	30 95       	com	r19
    28aa:	21 95       	neg	r18
    28ac:	3f 4f       	sbci	r19, 0xFF	; 255
    28ae:	4f 4f       	sbci	r20, 0xFF	; 255
    28b0:	5f 4f       	sbci	r21, 0xFF	; 255
    28b2:	0e c0       	rjmp	.+28     	; 0x28d0 <__fixsfsi+0x9c>
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	40 e0       	ldi	r20, 0x00	; 0
    28ba:	50 e0       	ldi	r21, 0x00	; 0
    28bc:	09 c0       	rjmp	.+18     	; 0x28d0 <__fixsfsi+0x9c>
    28be:	2f ef       	ldi	r18, 0xFF	; 255
    28c0:	3f ef       	ldi	r19, 0xFF	; 255
    28c2:	4f ef       	ldi	r20, 0xFF	; 255
    28c4:	5f e7       	ldi	r21, 0x7F	; 127
    28c6:	04 c0       	rjmp	.+8      	; 0x28d0 <__fixsfsi+0x9c>
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	40 e0       	ldi	r20, 0x00	; 0
    28ce:	50 e8       	ldi	r21, 0x80	; 128
    28d0:	b9 01       	movw	r22, r18
    28d2:	ca 01       	movw	r24, r20
    28d4:	2c 96       	adiw	r28, 0x0c	; 12
    28d6:	e2 e0       	ldi	r30, 0x02	; 2
    28d8:	0c 94 40 16 	jmp	0x2c80	; 0x2c80 <__epilogue_restores__+0x20>

000028dc <__pack_f>:
    28dc:	df 92       	push	r13
    28de:	ef 92       	push	r14
    28e0:	ff 92       	push	r15
    28e2:	0f 93       	push	r16
    28e4:	1f 93       	push	r17
    28e6:	fc 01       	movw	r30, r24
    28e8:	e4 80       	ldd	r14, Z+4	; 0x04
    28ea:	f5 80       	ldd	r15, Z+5	; 0x05
    28ec:	06 81       	ldd	r16, Z+6	; 0x06
    28ee:	17 81       	ldd	r17, Z+7	; 0x07
    28f0:	d1 80       	ldd	r13, Z+1	; 0x01
    28f2:	80 81       	ld	r24, Z
    28f4:	82 30       	cpi	r24, 0x02	; 2
    28f6:	48 f4       	brcc	.+18     	; 0x290a <__pack_f+0x2e>
    28f8:	80 e0       	ldi	r24, 0x00	; 0
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	a0 e1       	ldi	r26, 0x10	; 16
    28fe:	b0 e0       	ldi	r27, 0x00	; 0
    2900:	e8 2a       	or	r14, r24
    2902:	f9 2a       	or	r15, r25
    2904:	0a 2b       	or	r16, r26
    2906:	1b 2b       	or	r17, r27
    2908:	a5 c0       	rjmp	.+330    	; 0x2a54 <__pack_f+0x178>
    290a:	84 30       	cpi	r24, 0x04	; 4
    290c:	09 f4       	brne	.+2      	; 0x2910 <__pack_f+0x34>
    290e:	9f c0       	rjmp	.+318    	; 0x2a4e <__pack_f+0x172>
    2910:	82 30       	cpi	r24, 0x02	; 2
    2912:	21 f4       	brne	.+8      	; 0x291c <__pack_f+0x40>
    2914:	ee 24       	eor	r14, r14
    2916:	ff 24       	eor	r15, r15
    2918:	87 01       	movw	r16, r14
    291a:	05 c0       	rjmp	.+10     	; 0x2926 <__pack_f+0x4a>
    291c:	e1 14       	cp	r14, r1
    291e:	f1 04       	cpc	r15, r1
    2920:	01 05       	cpc	r16, r1
    2922:	11 05       	cpc	r17, r1
    2924:	19 f4       	brne	.+6      	; 0x292c <__pack_f+0x50>
    2926:	e0 e0       	ldi	r30, 0x00	; 0
    2928:	f0 e0       	ldi	r31, 0x00	; 0
    292a:	96 c0       	rjmp	.+300    	; 0x2a58 <__pack_f+0x17c>
    292c:	62 81       	ldd	r22, Z+2	; 0x02
    292e:	73 81       	ldd	r23, Z+3	; 0x03
    2930:	9f ef       	ldi	r25, 0xFF	; 255
    2932:	62 38       	cpi	r22, 0x82	; 130
    2934:	79 07       	cpc	r23, r25
    2936:	0c f0       	brlt	.+2      	; 0x293a <__pack_f+0x5e>
    2938:	5b c0       	rjmp	.+182    	; 0x29f0 <__pack_f+0x114>
    293a:	22 e8       	ldi	r18, 0x82	; 130
    293c:	3f ef       	ldi	r19, 0xFF	; 255
    293e:	26 1b       	sub	r18, r22
    2940:	37 0b       	sbc	r19, r23
    2942:	2a 31       	cpi	r18, 0x1A	; 26
    2944:	31 05       	cpc	r19, r1
    2946:	2c f0       	brlt	.+10     	; 0x2952 <__pack_f+0x76>
    2948:	20 e0       	ldi	r18, 0x00	; 0
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	40 e0       	ldi	r20, 0x00	; 0
    294e:	50 e0       	ldi	r21, 0x00	; 0
    2950:	2a c0       	rjmp	.+84     	; 0x29a6 <__pack_f+0xca>
    2952:	b8 01       	movw	r22, r16
    2954:	a7 01       	movw	r20, r14
    2956:	02 2e       	mov	r0, r18
    2958:	04 c0       	rjmp	.+8      	; 0x2962 <__pack_f+0x86>
    295a:	76 95       	lsr	r23
    295c:	67 95       	ror	r22
    295e:	57 95       	ror	r21
    2960:	47 95       	ror	r20
    2962:	0a 94       	dec	r0
    2964:	d2 f7       	brpl	.-12     	; 0x295a <__pack_f+0x7e>
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	a0 e0       	ldi	r26, 0x00	; 0
    296c:	b0 e0       	ldi	r27, 0x00	; 0
    296e:	04 c0       	rjmp	.+8      	; 0x2978 <__pack_f+0x9c>
    2970:	88 0f       	add	r24, r24
    2972:	99 1f       	adc	r25, r25
    2974:	aa 1f       	adc	r26, r26
    2976:	bb 1f       	adc	r27, r27
    2978:	2a 95       	dec	r18
    297a:	d2 f7       	brpl	.-12     	; 0x2970 <__pack_f+0x94>
    297c:	01 97       	sbiw	r24, 0x01	; 1
    297e:	a1 09       	sbc	r26, r1
    2980:	b1 09       	sbc	r27, r1
    2982:	8e 21       	and	r24, r14
    2984:	9f 21       	and	r25, r15
    2986:	a0 23       	and	r26, r16
    2988:	b1 23       	and	r27, r17
    298a:	00 97       	sbiw	r24, 0x00	; 0
    298c:	a1 05       	cpc	r26, r1
    298e:	b1 05       	cpc	r27, r1
    2990:	21 f0       	breq	.+8      	; 0x299a <__pack_f+0xbe>
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	a0 e0       	ldi	r26, 0x00	; 0
    2998:	b0 e0       	ldi	r27, 0x00	; 0
    299a:	9a 01       	movw	r18, r20
    299c:	ab 01       	movw	r20, r22
    299e:	28 2b       	or	r18, r24
    29a0:	39 2b       	or	r19, r25
    29a2:	4a 2b       	or	r20, r26
    29a4:	5b 2b       	or	r21, r27
    29a6:	da 01       	movw	r26, r20
    29a8:	c9 01       	movw	r24, r18
    29aa:	8f 77       	andi	r24, 0x7F	; 127
    29ac:	90 70       	andi	r25, 0x00	; 0
    29ae:	a0 70       	andi	r26, 0x00	; 0
    29b0:	b0 70       	andi	r27, 0x00	; 0
    29b2:	80 34       	cpi	r24, 0x40	; 64
    29b4:	91 05       	cpc	r25, r1
    29b6:	a1 05       	cpc	r26, r1
    29b8:	b1 05       	cpc	r27, r1
    29ba:	39 f4       	brne	.+14     	; 0x29ca <__pack_f+0xee>
    29bc:	27 ff       	sbrs	r18, 7
    29be:	09 c0       	rjmp	.+18     	; 0x29d2 <__pack_f+0xf6>
    29c0:	20 5c       	subi	r18, 0xC0	; 192
    29c2:	3f 4f       	sbci	r19, 0xFF	; 255
    29c4:	4f 4f       	sbci	r20, 0xFF	; 255
    29c6:	5f 4f       	sbci	r21, 0xFF	; 255
    29c8:	04 c0       	rjmp	.+8      	; 0x29d2 <__pack_f+0xf6>
    29ca:	21 5c       	subi	r18, 0xC1	; 193
    29cc:	3f 4f       	sbci	r19, 0xFF	; 255
    29ce:	4f 4f       	sbci	r20, 0xFF	; 255
    29d0:	5f 4f       	sbci	r21, 0xFF	; 255
    29d2:	e0 e0       	ldi	r30, 0x00	; 0
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	20 30       	cpi	r18, 0x00	; 0
    29d8:	a0 e0       	ldi	r26, 0x00	; 0
    29da:	3a 07       	cpc	r19, r26
    29dc:	a0 e0       	ldi	r26, 0x00	; 0
    29de:	4a 07       	cpc	r20, r26
    29e0:	a0 e4       	ldi	r26, 0x40	; 64
    29e2:	5a 07       	cpc	r21, r26
    29e4:	10 f0       	brcs	.+4      	; 0x29ea <__pack_f+0x10e>
    29e6:	e1 e0       	ldi	r30, 0x01	; 1
    29e8:	f0 e0       	ldi	r31, 0x00	; 0
    29ea:	79 01       	movw	r14, r18
    29ec:	8a 01       	movw	r16, r20
    29ee:	27 c0       	rjmp	.+78     	; 0x2a3e <__pack_f+0x162>
    29f0:	60 38       	cpi	r22, 0x80	; 128
    29f2:	71 05       	cpc	r23, r1
    29f4:	64 f5       	brge	.+88     	; 0x2a4e <__pack_f+0x172>
    29f6:	fb 01       	movw	r30, r22
    29f8:	e1 58       	subi	r30, 0x81	; 129
    29fa:	ff 4f       	sbci	r31, 0xFF	; 255
    29fc:	d8 01       	movw	r26, r16
    29fe:	c7 01       	movw	r24, r14
    2a00:	8f 77       	andi	r24, 0x7F	; 127
    2a02:	90 70       	andi	r25, 0x00	; 0
    2a04:	a0 70       	andi	r26, 0x00	; 0
    2a06:	b0 70       	andi	r27, 0x00	; 0
    2a08:	80 34       	cpi	r24, 0x40	; 64
    2a0a:	91 05       	cpc	r25, r1
    2a0c:	a1 05       	cpc	r26, r1
    2a0e:	b1 05       	cpc	r27, r1
    2a10:	39 f4       	brne	.+14     	; 0x2a20 <__pack_f+0x144>
    2a12:	e7 fe       	sbrs	r14, 7
    2a14:	0d c0       	rjmp	.+26     	; 0x2a30 <__pack_f+0x154>
    2a16:	80 e4       	ldi	r24, 0x40	; 64
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	a0 e0       	ldi	r26, 0x00	; 0
    2a1c:	b0 e0       	ldi	r27, 0x00	; 0
    2a1e:	04 c0       	rjmp	.+8      	; 0x2a28 <__pack_f+0x14c>
    2a20:	8f e3       	ldi	r24, 0x3F	; 63
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	a0 e0       	ldi	r26, 0x00	; 0
    2a26:	b0 e0       	ldi	r27, 0x00	; 0
    2a28:	e8 0e       	add	r14, r24
    2a2a:	f9 1e       	adc	r15, r25
    2a2c:	0a 1f       	adc	r16, r26
    2a2e:	1b 1f       	adc	r17, r27
    2a30:	17 ff       	sbrs	r17, 7
    2a32:	05 c0       	rjmp	.+10     	; 0x2a3e <__pack_f+0x162>
    2a34:	16 95       	lsr	r17
    2a36:	07 95       	ror	r16
    2a38:	f7 94       	ror	r15
    2a3a:	e7 94       	ror	r14
    2a3c:	31 96       	adiw	r30, 0x01	; 1
    2a3e:	87 e0       	ldi	r24, 0x07	; 7
    2a40:	16 95       	lsr	r17
    2a42:	07 95       	ror	r16
    2a44:	f7 94       	ror	r15
    2a46:	e7 94       	ror	r14
    2a48:	8a 95       	dec	r24
    2a4a:	d1 f7       	brne	.-12     	; 0x2a40 <__pack_f+0x164>
    2a4c:	05 c0       	rjmp	.+10     	; 0x2a58 <__pack_f+0x17c>
    2a4e:	ee 24       	eor	r14, r14
    2a50:	ff 24       	eor	r15, r15
    2a52:	87 01       	movw	r16, r14
    2a54:	ef ef       	ldi	r30, 0xFF	; 255
    2a56:	f0 e0       	ldi	r31, 0x00	; 0
    2a58:	6e 2f       	mov	r22, r30
    2a5a:	67 95       	ror	r22
    2a5c:	66 27       	eor	r22, r22
    2a5e:	67 95       	ror	r22
    2a60:	90 2f       	mov	r25, r16
    2a62:	9f 77       	andi	r25, 0x7F	; 127
    2a64:	d7 94       	ror	r13
    2a66:	dd 24       	eor	r13, r13
    2a68:	d7 94       	ror	r13
    2a6a:	8e 2f       	mov	r24, r30
    2a6c:	86 95       	lsr	r24
    2a6e:	49 2f       	mov	r20, r25
    2a70:	46 2b       	or	r20, r22
    2a72:	58 2f       	mov	r21, r24
    2a74:	5d 29       	or	r21, r13
    2a76:	b7 01       	movw	r22, r14
    2a78:	ca 01       	movw	r24, r20
    2a7a:	1f 91       	pop	r17
    2a7c:	0f 91       	pop	r16
    2a7e:	ff 90       	pop	r15
    2a80:	ef 90       	pop	r14
    2a82:	df 90       	pop	r13
    2a84:	08 95       	ret

00002a86 <__unpack_f>:
    2a86:	fc 01       	movw	r30, r24
    2a88:	db 01       	movw	r26, r22
    2a8a:	40 81       	ld	r20, Z
    2a8c:	51 81       	ldd	r21, Z+1	; 0x01
    2a8e:	22 81       	ldd	r18, Z+2	; 0x02
    2a90:	62 2f       	mov	r22, r18
    2a92:	6f 77       	andi	r22, 0x7F	; 127
    2a94:	70 e0       	ldi	r23, 0x00	; 0
    2a96:	22 1f       	adc	r18, r18
    2a98:	22 27       	eor	r18, r18
    2a9a:	22 1f       	adc	r18, r18
    2a9c:	93 81       	ldd	r25, Z+3	; 0x03
    2a9e:	89 2f       	mov	r24, r25
    2aa0:	88 0f       	add	r24, r24
    2aa2:	82 2b       	or	r24, r18
    2aa4:	28 2f       	mov	r18, r24
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	99 1f       	adc	r25, r25
    2aaa:	99 27       	eor	r25, r25
    2aac:	99 1f       	adc	r25, r25
    2aae:	11 96       	adiw	r26, 0x01	; 1
    2ab0:	9c 93       	st	X, r25
    2ab2:	11 97       	sbiw	r26, 0x01	; 1
    2ab4:	21 15       	cp	r18, r1
    2ab6:	31 05       	cpc	r19, r1
    2ab8:	a9 f5       	brne	.+106    	; 0x2b24 <__unpack_f+0x9e>
    2aba:	41 15       	cp	r20, r1
    2abc:	51 05       	cpc	r21, r1
    2abe:	61 05       	cpc	r22, r1
    2ac0:	71 05       	cpc	r23, r1
    2ac2:	11 f4       	brne	.+4      	; 0x2ac8 <__unpack_f+0x42>
    2ac4:	82 e0       	ldi	r24, 0x02	; 2
    2ac6:	37 c0       	rjmp	.+110    	; 0x2b36 <__unpack_f+0xb0>
    2ac8:	82 e8       	ldi	r24, 0x82	; 130
    2aca:	9f ef       	ldi	r25, 0xFF	; 255
    2acc:	13 96       	adiw	r26, 0x03	; 3
    2ace:	9c 93       	st	X, r25
    2ad0:	8e 93       	st	-X, r24
    2ad2:	12 97       	sbiw	r26, 0x02	; 2
    2ad4:	9a 01       	movw	r18, r20
    2ad6:	ab 01       	movw	r20, r22
    2ad8:	67 e0       	ldi	r22, 0x07	; 7
    2ada:	22 0f       	add	r18, r18
    2adc:	33 1f       	adc	r19, r19
    2ade:	44 1f       	adc	r20, r20
    2ae0:	55 1f       	adc	r21, r21
    2ae2:	6a 95       	dec	r22
    2ae4:	d1 f7       	brne	.-12     	; 0x2ada <__unpack_f+0x54>
    2ae6:	83 e0       	ldi	r24, 0x03	; 3
    2ae8:	8c 93       	st	X, r24
    2aea:	0d c0       	rjmp	.+26     	; 0x2b06 <__unpack_f+0x80>
    2aec:	22 0f       	add	r18, r18
    2aee:	33 1f       	adc	r19, r19
    2af0:	44 1f       	adc	r20, r20
    2af2:	55 1f       	adc	r21, r21
    2af4:	12 96       	adiw	r26, 0x02	; 2
    2af6:	8d 91       	ld	r24, X+
    2af8:	9c 91       	ld	r25, X
    2afa:	13 97       	sbiw	r26, 0x03	; 3
    2afc:	01 97       	sbiw	r24, 0x01	; 1
    2afe:	13 96       	adiw	r26, 0x03	; 3
    2b00:	9c 93       	st	X, r25
    2b02:	8e 93       	st	-X, r24
    2b04:	12 97       	sbiw	r26, 0x02	; 2
    2b06:	20 30       	cpi	r18, 0x00	; 0
    2b08:	80 e0       	ldi	r24, 0x00	; 0
    2b0a:	38 07       	cpc	r19, r24
    2b0c:	80 e0       	ldi	r24, 0x00	; 0
    2b0e:	48 07       	cpc	r20, r24
    2b10:	80 e4       	ldi	r24, 0x40	; 64
    2b12:	58 07       	cpc	r21, r24
    2b14:	58 f3       	brcs	.-42     	; 0x2aec <__unpack_f+0x66>
    2b16:	14 96       	adiw	r26, 0x04	; 4
    2b18:	2d 93       	st	X+, r18
    2b1a:	3d 93       	st	X+, r19
    2b1c:	4d 93       	st	X+, r20
    2b1e:	5c 93       	st	X, r21
    2b20:	17 97       	sbiw	r26, 0x07	; 7
    2b22:	08 95       	ret
    2b24:	2f 3f       	cpi	r18, 0xFF	; 255
    2b26:	31 05       	cpc	r19, r1
    2b28:	79 f4       	brne	.+30     	; 0x2b48 <__unpack_f+0xc2>
    2b2a:	41 15       	cp	r20, r1
    2b2c:	51 05       	cpc	r21, r1
    2b2e:	61 05       	cpc	r22, r1
    2b30:	71 05       	cpc	r23, r1
    2b32:	19 f4       	brne	.+6      	; 0x2b3a <__unpack_f+0xb4>
    2b34:	84 e0       	ldi	r24, 0x04	; 4
    2b36:	8c 93       	st	X, r24
    2b38:	08 95       	ret
    2b3a:	64 ff       	sbrs	r22, 4
    2b3c:	03 c0       	rjmp	.+6      	; 0x2b44 <__unpack_f+0xbe>
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	8c 93       	st	X, r24
    2b42:	12 c0       	rjmp	.+36     	; 0x2b68 <__unpack_f+0xe2>
    2b44:	1c 92       	st	X, r1
    2b46:	10 c0       	rjmp	.+32     	; 0x2b68 <__unpack_f+0xe2>
    2b48:	2f 57       	subi	r18, 0x7F	; 127
    2b4a:	30 40       	sbci	r19, 0x00	; 0
    2b4c:	13 96       	adiw	r26, 0x03	; 3
    2b4e:	3c 93       	st	X, r19
    2b50:	2e 93       	st	-X, r18
    2b52:	12 97       	sbiw	r26, 0x02	; 2
    2b54:	83 e0       	ldi	r24, 0x03	; 3
    2b56:	8c 93       	st	X, r24
    2b58:	87 e0       	ldi	r24, 0x07	; 7
    2b5a:	44 0f       	add	r20, r20
    2b5c:	55 1f       	adc	r21, r21
    2b5e:	66 1f       	adc	r22, r22
    2b60:	77 1f       	adc	r23, r23
    2b62:	8a 95       	dec	r24
    2b64:	d1 f7       	brne	.-12     	; 0x2b5a <__unpack_f+0xd4>
    2b66:	70 64       	ori	r23, 0x40	; 64
    2b68:	14 96       	adiw	r26, 0x04	; 4
    2b6a:	4d 93       	st	X+, r20
    2b6c:	5d 93       	st	X+, r21
    2b6e:	6d 93       	st	X+, r22
    2b70:	7c 93       	st	X, r23
    2b72:	17 97       	sbiw	r26, 0x07	; 7
    2b74:	08 95       	ret

00002b76 <__fpcmp_parts_f>:
    2b76:	1f 93       	push	r17
    2b78:	dc 01       	movw	r26, r24
    2b7a:	fb 01       	movw	r30, r22
    2b7c:	9c 91       	ld	r25, X
    2b7e:	92 30       	cpi	r25, 0x02	; 2
    2b80:	08 f4       	brcc	.+2      	; 0x2b84 <__fpcmp_parts_f+0xe>
    2b82:	47 c0       	rjmp	.+142    	; 0x2c12 <__fpcmp_parts_f+0x9c>
    2b84:	80 81       	ld	r24, Z
    2b86:	82 30       	cpi	r24, 0x02	; 2
    2b88:	08 f4       	brcc	.+2      	; 0x2b8c <__fpcmp_parts_f+0x16>
    2b8a:	43 c0       	rjmp	.+134    	; 0x2c12 <__fpcmp_parts_f+0x9c>
    2b8c:	94 30       	cpi	r25, 0x04	; 4
    2b8e:	51 f4       	brne	.+20     	; 0x2ba4 <__fpcmp_parts_f+0x2e>
    2b90:	11 96       	adiw	r26, 0x01	; 1
    2b92:	1c 91       	ld	r17, X
    2b94:	84 30       	cpi	r24, 0x04	; 4
    2b96:	99 f5       	brne	.+102    	; 0x2bfe <__fpcmp_parts_f+0x88>
    2b98:	81 81       	ldd	r24, Z+1	; 0x01
    2b9a:	68 2f       	mov	r22, r24
    2b9c:	70 e0       	ldi	r23, 0x00	; 0
    2b9e:	61 1b       	sub	r22, r17
    2ba0:	71 09       	sbc	r23, r1
    2ba2:	3f c0       	rjmp	.+126    	; 0x2c22 <__fpcmp_parts_f+0xac>
    2ba4:	84 30       	cpi	r24, 0x04	; 4
    2ba6:	21 f0       	breq	.+8      	; 0x2bb0 <__fpcmp_parts_f+0x3a>
    2ba8:	92 30       	cpi	r25, 0x02	; 2
    2baa:	31 f4       	brne	.+12     	; 0x2bb8 <__fpcmp_parts_f+0x42>
    2bac:	82 30       	cpi	r24, 0x02	; 2
    2bae:	b9 f1       	breq	.+110    	; 0x2c1e <__fpcmp_parts_f+0xa8>
    2bb0:	81 81       	ldd	r24, Z+1	; 0x01
    2bb2:	88 23       	and	r24, r24
    2bb4:	89 f1       	breq	.+98     	; 0x2c18 <__fpcmp_parts_f+0xa2>
    2bb6:	2d c0       	rjmp	.+90     	; 0x2c12 <__fpcmp_parts_f+0x9c>
    2bb8:	11 96       	adiw	r26, 0x01	; 1
    2bba:	1c 91       	ld	r17, X
    2bbc:	11 97       	sbiw	r26, 0x01	; 1
    2bbe:	82 30       	cpi	r24, 0x02	; 2
    2bc0:	f1 f0       	breq	.+60     	; 0x2bfe <__fpcmp_parts_f+0x88>
    2bc2:	81 81       	ldd	r24, Z+1	; 0x01
    2bc4:	18 17       	cp	r17, r24
    2bc6:	d9 f4       	brne	.+54     	; 0x2bfe <__fpcmp_parts_f+0x88>
    2bc8:	12 96       	adiw	r26, 0x02	; 2
    2bca:	2d 91       	ld	r18, X+
    2bcc:	3c 91       	ld	r19, X
    2bce:	13 97       	sbiw	r26, 0x03	; 3
    2bd0:	82 81       	ldd	r24, Z+2	; 0x02
    2bd2:	93 81       	ldd	r25, Z+3	; 0x03
    2bd4:	82 17       	cp	r24, r18
    2bd6:	93 07       	cpc	r25, r19
    2bd8:	94 f0       	brlt	.+36     	; 0x2bfe <__fpcmp_parts_f+0x88>
    2bda:	28 17       	cp	r18, r24
    2bdc:	39 07       	cpc	r19, r25
    2bde:	bc f0       	brlt	.+46     	; 0x2c0e <__fpcmp_parts_f+0x98>
    2be0:	14 96       	adiw	r26, 0x04	; 4
    2be2:	8d 91       	ld	r24, X+
    2be4:	9d 91       	ld	r25, X+
    2be6:	0d 90       	ld	r0, X+
    2be8:	bc 91       	ld	r27, X
    2bea:	a0 2d       	mov	r26, r0
    2bec:	24 81       	ldd	r18, Z+4	; 0x04
    2bee:	35 81       	ldd	r19, Z+5	; 0x05
    2bf0:	46 81       	ldd	r20, Z+6	; 0x06
    2bf2:	57 81       	ldd	r21, Z+7	; 0x07
    2bf4:	28 17       	cp	r18, r24
    2bf6:	39 07       	cpc	r19, r25
    2bf8:	4a 07       	cpc	r20, r26
    2bfa:	5b 07       	cpc	r21, r27
    2bfc:	18 f4       	brcc	.+6      	; 0x2c04 <__fpcmp_parts_f+0x8e>
    2bfe:	11 23       	and	r17, r17
    2c00:	41 f0       	breq	.+16     	; 0x2c12 <__fpcmp_parts_f+0x9c>
    2c02:	0a c0       	rjmp	.+20     	; 0x2c18 <__fpcmp_parts_f+0xa2>
    2c04:	82 17       	cp	r24, r18
    2c06:	93 07       	cpc	r25, r19
    2c08:	a4 07       	cpc	r26, r20
    2c0a:	b5 07       	cpc	r27, r21
    2c0c:	40 f4       	brcc	.+16     	; 0x2c1e <__fpcmp_parts_f+0xa8>
    2c0e:	11 23       	and	r17, r17
    2c10:	19 f0       	breq	.+6      	; 0x2c18 <__fpcmp_parts_f+0xa2>
    2c12:	61 e0       	ldi	r22, 0x01	; 1
    2c14:	70 e0       	ldi	r23, 0x00	; 0
    2c16:	05 c0       	rjmp	.+10     	; 0x2c22 <__fpcmp_parts_f+0xac>
    2c18:	6f ef       	ldi	r22, 0xFF	; 255
    2c1a:	7f ef       	ldi	r23, 0xFF	; 255
    2c1c:	02 c0       	rjmp	.+4      	; 0x2c22 <__fpcmp_parts_f+0xac>
    2c1e:	60 e0       	ldi	r22, 0x00	; 0
    2c20:	70 e0       	ldi	r23, 0x00	; 0
    2c22:	cb 01       	movw	r24, r22
    2c24:	1f 91       	pop	r17
    2c26:	08 95       	ret

00002c28 <__prologue_saves__>:
    2c28:	2f 92       	push	r2
    2c2a:	3f 92       	push	r3
    2c2c:	4f 92       	push	r4
    2c2e:	5f 92       	push	r5
    2c30:	6f 92       	push	r6
    2c32:	7f 92       	push	r7
    2c34:	8f 92       	push	r8
    2c36:	9f 92       	push	r9
    2c38:	af 92       	push	r10
    2c3a:	bf 92       	push	r11
    2c3c:	cf 92       	push	r12
    2c3e:	df 92       	push	r13
    2c40:	ef 92       	push	r14
    2c42:	ff 92       	push	r15
    2c44:	0f 93       	push	r16
    2c46:	1f 93       	push	r17
    2c48:	cf 93       	push	r28
    2c4a:	df 93       	push	r29
    2c4c:	cd b7       	in	r28, 0x3d	; 61
    2c4e:	de b7       	in	r29, 0x3e	; 62
    2c50:	ca 1b       	sub	r28, r26
    2c52:	db 0b       	sbc	r29, r27
    2c54:	0f b6       	in	r0, 0x3f	; 63
    2c56:	f8 94       	cli
    2c58:	de bf       	out	0x3e, r29	; 62
    2c5a:	0f be       	out	0x3f, r0	; 63
    2c5c:	cd bf       	out	0x3d, r28	; 61
    2c5e:	09 94       	ijmp

00002c60 <__epilogue_restores__>:
    2c60:	2a 88       	ldd	r2, Y+18	; 0x12
    2c62:	39 88       	ldd	r3, Y+17	; 0x11
    2c64:	48 88       	ldd	r4, Y+16	; 0x10
    2c66:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c68:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c6a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c6c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c6e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c70:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c72:	b9 84       	ldd	r11, Y+9	; 0x09
    2c74:	c8 84       	ldd	r12, Y+8	; 0x08
    2c76:	df 80       	ldd	r13, Y+7	; 0x07
    2c78:	ee 80       	ldd	r14, Y+6	; 0x06
    2c7a:	fd 80       	ldd	r15, Y+5	; 0x05
    2c7c:	0c 81       	ldd	r16, Y+4	; 0x04
    2c7e:	1b 81       	ldd	r17, Y+3	; 0x03
    2c80:	aa 81       	ldd	r26, Y+2	; 0x02
    2c82:	b9 81       	ldd	r27, Y+1	; 0x01
    2c84:	ce 0f       	add	r28, r30
    2c86:	d1 1d       	adc	r29, r1
    2c88:	0f b6       	in	r0, 0x3f	; 63
    2c8a:	f8 94       	cli
    2c8c:	de bf       	out	0x3e, r29	; 62
    2c8e:	0f be       	out	0x3f, r0	; 63
    2c90:	cd bf       	out	0x3d, r28	; 61
    2c92:	ed 01       	movw	r28, r26
    2c94:	08 95       	ret

00002c96 <_exit>:
    2c96:	f8 94       	cli

00002c98 <__stop_program>:
    2c98:	ff cf       	rjmp	.-2      	; 0x2c98 <__stop_program>
